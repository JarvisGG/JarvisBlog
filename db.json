{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/2710533-5ddc05554c24d6d9.png","path":"images/2710533-5ddc05554c24d6d9.png","modified":1,"renderable":0},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":0},{"_id":"source/images/2710533-cade3554a7db68ee.png","path":"images/2710533-cade3554a7db68ee.png","modified":1,"renderable":0},{"_id":"source/images/2710533-eb07b0f9a442d6f3.png","path":"images/2710533-eb07b0f9a442d6f3.png","modified":1,"renderable":0},{"_id":"source/images/2710533-0dbcc3353bd36d2f.png","path":"images/2710533-0dbcc3353bd36d2f.png","modified":1,"renderable":0},{"_id":"source/images/2710533-4c8e729db92f694a.png","path":"images/2710533-4c8e729db92f694a.png","modified":1,"renderable":0},{"_id":"source/video/tb_select_frame.mp4","path":"video/tb_select_frame.mp4","modified":1,"renderable":0},{"_id":"source/video/demo.mp4","path":"video/demo.mp4","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e3e83b1aeba93b46be9cc767508e0e906bd3f66b","modified":1624890511663},{"_id":"source/favicon.ico","hash":"0dfebe4948b9efec8ce2a41505bade0cb42817ed","modified":1624890511665},{"_id":"source/_posts/Android TV 焦点丢失的罪魁祸首.md","hash":"3c0989fdfc3c434b304845ebc3ab72c590f85361","modified":1624890511663},{"_id":"source/_posts/Dagger2体会.md","hash":"6730c5138e1bae37a2f9cfa973c06758c310e3dd","modified":1624890511664},{"_id":"source/_posts/Android 丢帧原理以及办法.md","hash":"8e4019eab661fa63dc6ff5eee68573326ed4db23","modified":1624890511664},{"_id":"source/_posts/GreenDao 数据库升级数据迁移.md","hash":"feaff8d701664f6bf3445e2a243f5c62d0305d02","modified":1624890511664},{"_id":"source/_posts/NestTouchScrollingLayout 无缝滑动的 Layout.md","hash":"d671b29dcbf7db341ffd6a7ed12108d4a00c2d84","modified":1624890511664},{"_id":"source/_posts/ObjectAdapter 扩展RecyclerView Adapter的方式.md","hash":"34b406dd907f00a9dbd0b94c4100eaa44956ed4c","modified":1624890511664},{"_id":"source/_posts/RxBus 的初步探索.md","hash":"a140080d24658650da77fb5ffe9a423d1aefdd99","modified":1624890511665},{"_id":"source/_posts/RecyclerView 知识点.md","hash":"45a02e79c2f65ec61bc0e294843b84e1d2a776dd","modified":1624890511664},{"_id":"source/about/index.md","hash":"49ee6dda4b0b23f0c10921d829e8ca5efd12f806","modified":1624890511665},{"_id":"source/_posts/SelectFrameView 视觉选择.md","hash":"4eef7e2404e6aeae74bb9d3e5714bdfe52571c04","modified":1624890979375},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1624890511665},{"_id":"source/images/2710533-5ddc05554c24d6d9.png","hash":"b6ddc2edb7ce458e9ba59cd4ab774ee55e677194","modified":1624890511666},{"_id":"source/images/avatar.jpeg","hash":"0dfebe4948b9efec8ce2a41505bade0cb42817ed","modified":1624890511668},{"_id":"source/tags/index.md","hash":"05e95de35711cf129428c878d1a7bc45dd1a5992","modified":1624890511668},{"_id":"source/images/2710533-cade3554a7db68ee.png","hash":"ddf8028b5ad2859d5e9820f7e73ffbe5dcceb0f1","modified":1624890511667},{"_id":"source/images/2710533-eb07b0f9a442d6f3.png","hash":"b4ce00bc2d7ec56a50bbc7c71f85615dbaf37060","modified":1624890511667},{"_id":"source/images/2710533-0dbcc3353bd36d2f.png","hash":"5befba63d66a0eb38632154908e86609d61cc920","modified":1624890511666},{"_id":"source/images/2710533-4c8e729db92f694a.png","hash":"46970f791c1abe07549a6ca14dad84a4538cf13f","modified":1624890511666},{"_id":"source/video/tb_select_frame.mp4","hash":"7f36af8b142c1ddc665910d495a7dd8cefc70b2b","modified":1624890912607},{"_id":"source/video/demo.mp4","hash":"cea5f2f5af7cd74a42eca369b7debf0262607983","modified":1624890511783},{"_id":"public/search.xml","hash":"43decc612b0a7979e11857a7dc435b87276b5d50","modified":1624891212135},{"_id":"public/about/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/tags/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/2021/06/28/SelectFrameView 视觉选择/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/2021/06/28/RecyclerView 知识点/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/2018/12/05/NestTouchScrollingLayout 无缝滑动的 Layout/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/2017/11/01/ObjectAdapter 扩展RecyclerView Adapter的方式/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/2017/07/20/Android TV 焦点丢失的罪魁祸首/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/2017/06/20/RxBus 的初步探索/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/2017/04/22/GreenDao 数据库升级数据迁移/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/2017/01/22/Android 丢帧原理以及办法/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/2016/08/11/Dagger2体会/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212139},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2016/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2016/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2017/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2017/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2017/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2017/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2017/07/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2017/11/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2018/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2018/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2021/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/archives/2021/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/tags/Android-源码/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212140},{"_id":"public/tags/Android-第三方/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212141},{"_id":"public/tags/Android-开源控件/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212141},{"_id":"public/tags/RxBus/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212141},{"_id":"public/tags/Android-View/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1624891212141},{"_id":"public/images/2710533-5ddc05554c24d6d9.png","hash":"b6ddc2edb7ce458e9ba59cd4ab774ee55e677194","modified":1624891212143},{"_id":"public/images/avatar.jpeg","hash":"0dfebe4948b9efec8ce2a41505bade0cb42817ed","modified":1624891212144},{"_id":"public/favicon.ico","hash":"0dfebe4948b9efec8ce2a41505bade0cb42817ed","modified":1624891212146},{"_id":"public/images/2710533-cade3554a7db68ee.png","hash":"ddf8028b5ad2859d5e9820f7e73ffbe5dcceb0f1","modified":1624891212146},{"_id":"public/images/2710533-eb07b0f9a442d6f3.png","hash":"b4ce00bc2d7ec56a50bbc7c71f85615dbaf37060","modified":1624891212146},{"_id":"public/images/2710533-0dbcc3353bd36d2f.png","hash":"5befba63d66a0eb38632154908e86609d61cc920","modified":1624891212148},{"_id":"public/images/2710533-4c8e729db92f694a.png","hash":"46970f791c1abe07549a6ca14dad84a4538cf13f","modified":1624891212148},{"_id":"public/video/tb_select_frame.mp4","hash":"7f36af8b142c1ddc665910d495a7dd8cefc70b2b","modified":1624891212227},{"_id":"public/video/demo.mp4","hash":"cea5f2f5af7cd74a42eca369b7debf0262607983","modified":1624891212257}],"Category":[],"Data":[],"Page":[{"date":"2017-07-03T11:56:55.000Z","type":"about","_content":"<img src=\"https://avatars3.githubusercontent.com/u/7964606?v=3&s=460\" width = \"150\" height = \"150\"/>\n<center>\n    Email：821388334@qq.com \n    微信：PowerBeats2\n    就职：[知乎](https://www.zhihu.com/)\n    GitHub：[JarvisGG](https://github.com/JarvisGG)\n</center>\n","source":"about/index.md","raw":"---\ndate: 2017-07-03 19:56:55\ntype: about\n---\n<img src=\"https://avatars3.githubusercontent.com/u/7964606?v=3&s=460\" width = \"150\" height = \"150\"/>\n<center>\n    Email：821388334@qq.com \n    微信：PowerBeats2\n    就职：[知乎](https://www.zhihu.com/)\n    GitHub：[JarvisGG](https://github.com/JarvisGG)\n</center>\n","updated":"2021-06-28T14:28:31.665Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ckqgq9v5b00015y8dfc590b4q","content":"<p><img src=\"https://avatars3.githubusercontent.com/u/7964606?v=3&s=460\" width=\"150\" height=\"150\"></p>\n<center><br>    Email：821388334@qq.com<br>    微信：PowerBeats2<br>    就职：<a href=\"https://www.zhihu.com/\" target=\"_blank\" rel=\"external\">知乎</a><br>    GitHub：<a href=\"https://github.com/JarvisGG\" target=\"_blank\" rel=\"external\">JarvisGG</a><br></center>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://avatars3.githubusercontent.com/u/7964606?v=3&s=460\" width=\"150\" height=\"150\"></p>\n<center><br>    Email：821388334@qq.com<br>    微信：PowerBeats2<br>    就职：<a href=\"https://www.zhihu.com/\" target=\"_blank\" rel=\"external\">知乎</a><br>    GitHub：<a href=\"https://github.com/JarvisGG\" target=\"_blank\" rel=\"external\">JarvisGG</a><br></center>\n"},{"title":"tags","date":"2017-07-03T10:09:36.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-07-03 18:09:36\ntype: \"tags\"\n---","updated":"2021-06-28T14:28:31.668Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckqgq9v5d00035y8dpbj8mdjq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android TV 焦点探索","date":"2017-07-19T17:06:56.000Z","comments":1,"_content":"\n## 前言\n毕业从事Android TV 开发一年了，这一年萦绕着我，挥之不去的就是焦点逻辑，TV 区别于手机的UI交互区别，应该就是focus事件与touch事件了，而国内关于Android TV的盘子还不如手机端踩得多，那么今天打算总结一下焦点的几个疑惑。这里我会分焦点搜索，焦点丢失来谈谈。踩踩盘子。\n<!--more-->\n## 焦点搜索\n\b这块儿Android源码很有意思，谷歌爹们真的牛啊，好了，当我们用遥控器按上下左右键的时候，我们会调用focusSearch，我们结合源码看一下.\n``` Java\npublic View focusSearch(@FocusRealDirection int direction) {\n    if (mParent != null) {\n        return mParent.focusSearch(this, direction);\n    } else {\n        return null;\n    }\n}\n```\nfocus 当前获得焦点的View，direction当前按键事件方向，我们可以看到这里View会将焦点上抛给Parent，接个我们进去看。\n``` Java\npublic View focusSearch(View focused, int direction) {\n    if (isRootNamespace()) {\n        // root namespace means we should consider ourselves the top of the\n        // tree for focus searching; otherwise we could be focus searching\n        // into other tabs.  see LocalActivityManager and TabHost for more info\n        return FocusFinder.getInstance().findNextFocus(this, focused, direction);\n    } else if (mParent != null) {\n        return mParent.focusSearch(focused, direction);\n    }\n    return null;\n}\n```\n这里我们看到有一个是否是根空间的判断，倘若当前\n","source":"_posts/Android TV 焦点丢失的罪魁祸首.md","raw":"---\ntitle: Android TV 焦点探索\ndate: 2017-07-20 1:06:56\ntags: Android 源码\ncomments: true\n---\n\n## 前言\n毕业从事Android TV 开发一年了，这一年萦绕着我，挥之不去的就是焦点逻辑，TV 区别于手机的UI交互区别，应该就是focus事件与touch事件了，而国内关于Android TV的盘子还不如手机端踩得多，那么今天打算总结一下焦点的几个疑惑。这里我会分焦点搜索，焦点丢失来谈谈。踩踩盘子。\n<!--more-->\n## 焦点搜索\n\b这块儿Android源码很有意思，谷歌爹们真的牛啊，好了，当我们用遥控器按上下左右键的时候，我们会调用focusSearch，我们结合源码看一下.\n``` Java\npublic View focusSearch(@FocusRealDirection int direction) {\n    if (mParent != null) {\n        return mParent.focusSearch(this, direction);\n    } else {\n        return null;\n    }\n}\n```\nfocus 当前获得焦点的View，direction当前按键事件方向，我们可以看到这里View会将焦点上抛给Parent，接个我们进去看。\n``` Java\npublic View focusSearch(View focused, int direction) {\n    if (isRootNamespace()) {\n        // root namespace means we should consider ourselves the top of the\n        // tree for focus searching; otherwise we could be focus searching\n        // into other tabs.  see LocalActivityManager and TabHost for more info\n        return FocusFinder.getInstance().findNextFocus(this, focused, direction);\n    } else if (mParent != null) {\n        return mParent.focusSearch(focused, direction);\n    }\n    return null;\n}\n```\n这里我们看到有一个是否是根空间的判断，倘若当前\n","slug":"Android TV 焦点丢失的罪魁祸首","published":1,"updated":"2021-06-28T14:28:31.663Z","layout":"post","photos":[],"link":"","_id":"ckqgq9v5800005y8dgv0um84x","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>毕业从事Android TV 开发一年了，这一年萦绕着我，挥之不去的就是焦点逻辑，TV 区别于手机的UI交互区别，应该就是focus事件与touch事件了，而国内关于Android TV的盘子还不如手机端踩得多，那么今天打算总结一下焦点的几个疑惑。这里我会分焦点搜索，焦点丢失来谈谈。踩踩盘子。<br><a id=\"more\"></a></p>\n<h2 id=\"焦点搜索\"><a href=\"#焦点搜索\" class=\"headerlink\" title=\"焦点搜索\"></a>焦点搜索</h2><p>\b这块儿Android源码很有意思，谷歌爹们真的牛啊，好了，当我们用遥控器按上下左右键的时候，我们会调用focusSearch，我们结合源码看一下.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">focusSearch</span><span class=\"params\">(@FocusRealDirection <span class=\"keyword\">int</span> direction)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mParent.focusSearch(<span class=\"keyword\">this</span>, direction);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>focus 当前获得焦点的View，direction当前按键事件方向，我们可以看到这里View会将焦点上抛给Parent，接个我们进去看。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">focusSearch</span><span class=\"params\">(View focused, <span class=\"keyword\">int</span> direction)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isRootNamespace()) &#123;</div><div class=\"line\">        <span class=\"comment\">// root namespace means we should consider ourselves the top of the</span></div><div class=\"line\">        <span class=\"comment\">// tree for focus searching; otherwise we could be focus searching</span></div><div class=\"line\">        <span class=\"comment\">// into other tabs.  see LocalActivityManager and TabHost for more info</span></div><div class=\"line\">        <span class=\"keyword\">return</span> FocusFinder.getInstance().findNextFocus(<span class=\"keyword\">this</span>, focused, direction);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mParent.focusSearch(focused, direction);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们看到有一个是否是根空间的判断，倘若当前</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>毕业从事Android TV 开发一年了，这一年萦绕着我，挥之不去的就是焦点逻辑，TV 区别于手机的UI交互区别，应该就是focus事件与touch事件了，而国内关于Android TV的盘子还不如手机端踩得多，那么今天打算总结一下焦点的几个疑惑。这里我会分焦点搜索，焦点丢失来谈谈。踩踩盘子。<br>","more":"</p>\n<h2 id=\"焦点搜索\"><a href=\"#焦点搜索\" class=\"headerlink\" title=\"焦点搜索\"></a>焦点搜索</h2><p>\b这块儿Android源码很有意思，谷歌爹们真的牛啊，好了，当我们用遥控器按上下左右键的时候，我们会调用focusSearch，我们结合源码看一下.<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">focusSearch</span><span class=\"params\">(@FocusRealDirection <span class=\"keyword\">int</span> direction)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mParent.focusSearch(<span class=\"keyword\">this</span>, direction);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>focus 当前获得焦点的View，direction当前按键事件方向，我们可以看到这里View会将焦点上抛给Parent，接个我们进去看。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">focusSearch</span><span class=\"params\">(View focused, <span class=\"keyword\">int</span> direction)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isRootNamespace()) &#123;</div><div class=\"line\">        <span class=\"comment\">// root namespace means we should consider ourselves the top of the</span></div><div class=\"line\">        <span class=\"comment\">// tree for focus searching; otherwise we could be focus searching</span></div><div class=\"line\">        <span class=\"comment\">// into other tabs.  see LocalActivityManager and TabHost for more info</span></div><div class=\"line\">        <span class=\"keyword\">return</span> FocusFinder.getInstance().findNextFocus(<span class=\"keyword\">this</span>, focused, direction);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mParent != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mParent.focusSearch(focused, direction);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们看到有一个是否是根空间的判断，倘若当前</p>"},{"title":"Dagger2体会","date":"2016-08-11T09:01:56.000Z","comments":1,"_content":"\n\n## 前言\n最近刚来我司，开始入手公司的项目，MVP，RxJava，Dagger2搭建的框架。对于我这个刚没多长时间的Android菜鸟，着实花了一段时间，说点儿题外话，最近研究了Java8，已经开始由命令式编程过度到函数式编程了，尤其是加了Lambda表达式，配起来RxJava的切换线程，异步操作爽呆了。\n\n至于MVP，开始我是只知道MVC，但在看我司的项目架构的时候发现有差别，后来在简书上看到一个博主，醍醐灌顶，明白了MVP其实跟MVC是不一样的，就单单Model来说，在MVC中只是我们的一些javaBean，而在MVP它涉及到数据的来龙去脉，数据是来自内存，硬盘，还是网络。已经数据将会怎样存储都包含其中，至于MV的不同，请大家看[MVP](https://hexo.io/)。\n\n接下来就是这篇博客的重点了，Dagger2，相信大家都或多或少用过或者听说过。让大家津津乐道的就是它的依赖注入，之前有瞭解过依赖注入，知道他最大的好处是解藕，大学时候没好好研究，今天我想说一下我的心得。\n<!--more-->\n\n## 几个疑问\n\n### 什么是解耦？\n\n解耦就是松耦合，在我们开始学Java的时候new过各种事物，(PS世间万物皆对象)，但当工程变大，你的java文件过多，一旦需求妹妹过来跟你娇滴滴的说，构造函数加个参数呗，毕竟是妹子求，怎能不从，然后你开始昏天黑地的找，这种最直观的牵一发而动全身的体验就是耦合，很直观吧。官方的说法就是，在A中new B违反了单一职责原则，B 只能在A中new，违反了开闭原则。我们需要做的就是弱化这种关系。\n\n\n### 什么是依赖注入？\n\n那么依赖注入这个思想是什么那，假设A需要B，我们要做的不是硬编码new B，而是通过一个工厂去生产它，你看到这一定蒙蔽了，工厂不也得new吗，讲道理，是这样，但你想，当你想改B的有参构造或是其他，你只需要改他的工厂。设计模式就是这样，你可能会感觉，好麻烦啊，我开始也是这样，觉得明明几行，为什么用了设计模式会这么多代码。担当开始接收项目，你会感觉自己的代码越写越难以维护，藕合度越高，最直观的感受，写的自己都心力交瘁，牵一发动全身，好了，回归正题，设想假如你在100个类里面new 了B，当B改变的时候你是不是要去一个个改，但是假如你只是修改他的工厂那就不用了，因为B 的源头是你在用到它的时候由工厂注入，无论是初始化加载，还是lazy加载，都一样。\n\n其实依赖注入我们一定见过，这里聚一下例子：\n#### 构造函数\n\n``` Java\npublic class A {\n    B b;\n    public A(B b) {\n        this.b = b;\n    }\n}\n```\n\n#### set方法注入\n``` Java\npublic class A {\n    B b;\n    public void setB(B b) {\n        this.b = b;\n    }\n}\n```\n\n#### 接口注入\n``` Java\ninterface InjectInterface() {\n    public void InjectB(B b);\n}\n\npublic class A implements InjectInterface {\n    B b;\n    @override\n    public void InjectB(B b) {\n        this.b = b;\n    }\n}\n```\n\n#### 注解方式(也是Dagger框架的主要方式)\n``` Java\npublic class A {\n    @Inject\n    B b;\n}\n```\n\n### 关于Dagger2的依赖注入？\n\nok，我觉得他流弊的地方是设计思想。dagger的最终目的是依赖注入，是解耦，但是他的实现方法很流弊。接下来我们来聊一聊他的几个keywords: Inject，Component，Module，Provides，这里允许我盗一张图(ps: [图的来源]( http://www.jianshu.com/p/cd2c1c9f68d4), 这篇文章的作者就是上面的MVP的作者。非常感谢大哥，之前也详细解答了我很多)\n\n![关系图](http://upload-images.jianshu.io/upload_images/1504173-0b81f8a57768a703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### Inject:\n两个作用:\n\n1.标识哪里需要被注入。\n\n2.标识哪里可以提供注入。\n``` Java\npublic class A {\n    // 这里需要被注入\n    @Inject\n    B b;\n}\n\npublic class B {\n    // 提供注入\n    @Inject\n    B() {\n      ...\n    }\n}\n```\n\n#### Commponent\n\n字面理解就是主持人，它更像是我们的分发器。发负责得到B的实例，并去给被标识注入的地方进行注入。定点投放。正所谓来龙去脉知道，我们需要Commponent来实现这个注入过程。\n``` Java\npublic class B {\n    // 提供注入\n    @Inject\n    B() {\n      ...\n    }\n}\n\npublic class A {\n    // 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系\n    @Inject\n    B b;\n}\n\n\n@Commponent\npublic interface Commponent {\n    // 这就是让A，B发生联系的地方\n    void Inject(A a);\n}\n\n// 这里我们修改一下Class A\n\npublic class A {\n    // 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系\n    @Inject\n    B b;\n\n    void A() {\n        // Dagger2 自动生成的组件用来注入，这样也就让A，B建立了联系\n        DaggerComponent.builder()\n                       .build()\n                       .inject(this);\n    }\n\n}\n```\n\n#### Model\n\n讲到这里，你会想，既然目标，来源都用Inject注解了，注入器Commponent也已经ok了，为何要用到Model，其实也很好理解，假如我们项目用第三方或者公司封装好的类库，你不可能指望你去打开它去修改，在你需要的位置加上Inject，这样的话，我们就可以用Model，将第三方我们需要的类暴露出来。Module其实是一个简单工厂模式，Module里面的方法基本都是创建类实例的方法。\n还是上代码清晰一些:\n``` Java\n@Model\npublic class A {\n    // B 为我们第三方lib中的类\n    B ProduceB() {\n        return new B();\n    }\n}\n```\n然而这样并没有完成，Model仅仅是创建实例的方法，我没还没有让他跟我的Component发生联系，我们需要Model可以跟我之前Inject需要注入的地方发生联系，接下来就引出来我下面的keyword: Provides\n\n#### Provides\n\n接着我们上面的话题，不要停。上面说到我们需要让我的Model跟我们的Commponent建立联系，这样我们可以提供Provides标注我们需要的构造方法，这样就实现了我们的需求。是不是很神奇。然后我们简单改一下上面的代码。\n\n``` Java\n@Model\npublic class A {\n    // Provides来标注\n    @Provides\n    B ProduceB() {\n        return new B();\n    }\n}\n```\n### 关于Model，Inject优先级？\n这里Dagger2处理的优先级是：Model > Inject\n也就是在初始化构造的时候，Dagger2会先去查找Model有没有Provide我们需要的构造方法，假如没有，它会去查找Inject。\n\n### 关于有参无参的构造？\n无参直接就create这个类，有参就去查看@model的@Provide，然后再查 Inject 来构造我们这个类需要的有参构造的参数，过程中如果又发现还有需要构造参数的就继续查@model的@Provide  然后再查 Inject 以此类推。\n\n## 简单总结\nDagger2的出现大大加快了Android的MVP模式的开发。而今天我说的是基础方面的，至于还有很多例如 Qualifier（限定符）、Singleton（单例）、Scope（作用域）、我会在接下来的Blog中进行分析，由衷地希望有看到这篇博客的童鞋，假如发现我的理解有问题，及时纠正我。\n\n最后郑重声明，感谢[牛大哥](http://www.jianshu.com/users/2ce7b74b592b/latest_articles).\n","source":"_posts/Dagger2体会.md","raw":"---\ntitle: Dagger2体会\ndate: 2016-08-11 17:01:56\ntags: Android 第三方\ncomments: true\n---\n\n\n## 前言\n最近刚来我司，开始入手公司的项目，MVP，RxJava，Dagger2搭建的框架。对于我这个刚没多长时间的Android菜鸟，着实花了一段时间，说点儿题外话，最近研究了Java8，已经开始由命令式编程过度到函数式编程了，尤其是加了Lambda表达式，配起来RxJava的切换线程，异步操作爽呆了。\n\n至于MVP，开始我是只知道MVC，但在看我司的项目架构的时候发现有差别，后来在简书上看到一个博主，醍醐灌顶，明白了MVP其实跟MVC是不一样的，就单单Model来说，在MVC中只是我们的一些javaBean，而在MVP它涉及到数据的来龙去脉，数据是来自内存，硬盘，还是网络。已经数据将会怎样存储都包含其中，至于MV的不同，请大家看[MVP](https://hexo.io/)。\n\n接下来就是这篇博客的重点了，Dagger2，相信大家都或多或少用过或者听说过。让大家津津乐道的就是它的依赖注入，之前有瞭解过依赖注入，知道他最大的好处是解藕，大学时候没好好研究，今天我想说一下我的心得。\n<!--more-->\n\n## 几个疑问\n\n### 什么是解耦？\n\n解耦就是松耦合，在我们开始学Java的时候new过各种事物，(PS世间万物皆对象)，但当工程变大，你的java文件过多，一旦需求妹妹过来跟你娇滴滴的说，构造函数加个参数呗，毕竟是妹子求，怎能不从，然后你开始昏天黑地的找，这种最直观的牵一发而动全身的体验就是耦合，很直观吧。官方的说法就是，在A中new B违反了单一职责原则，B 只能在A中new，违反了开闭原则。我们需要做的就是弱化这种关系。\n\n\n### 什么是依赖注入？\n\n那么依赖注入这个思想是什么那，假设A需要B，我们要做的不是硬编码new B，而是通过一个工厂去生产它，你看到这一定蒙蔽了，工厂不也得new吗，讲道理，是这样，但你想，当你想改B的有参构造或是其他，你只需要改他的工厂。设计模式就是这样，你可能会感觉，好麻烦啊，我开始也是这样，觉得明明几行，为什么用了设计模式会这么多代码。担当开始接收项目，你会感觉自己的代码越写越难以维护，藕合度越高，最直观的感受，写的自己都心力交瘁，牵一发动全身，好了，回归正题，设想假如你在100个类里面new 了B，当B改变的时候你是不是要去一个个改，但是假如你只是修改他的工厂那就不用了，因为B 的源头是你在用到它的时候由工厂注入，无论是初始化加载，还是lazy加载，都一样。\n\n其实依赖注入我们一定见过，这里聚一下例子：\n#### 构造函数\n\n``` Java\npublic class A {\n    B b;\n    public A(B b) {\n        this.b = b;\n    }\n}\n```\n\n#### set方法注入\n``` Java\npublic class A {\n    B b;\n    public void setB(B b) {\n        this.b = b;\n    }\n}\n```\n\n#### 接口注入\n``` Java\ninterface InjectInterface() {\n    public void InjectB(B b);\n}\n\npublic class A implements InjectInterface {\n    B b;\n    @override\n    public void InjectB(B b) {\n        this.b = b;\n    }\n}\n```\n\n#### 注解方式(也是Dagger框架的主要方式)\n``` Java\npublic class A {\n    @Inject\n    B b;\n}\n```\n\n### 关于Dagger2的依赖注入？\n\nok，我觉得他流弊的地方是设计思想。dagger的最终目的是依赖注入，是解耦，但是他的实现方法很流弊。接下来我们来聊一聊他的几个keywords: Inject，Component，Module，Provides，这里允许我盗一张图(ps: [图的来源]( http://www.jianshu.com/p/cd2c1c9f68d4), 这篇文章的作者就是上面的MVP的作者。非常感谢大哥，之前也详细解答了我很多)\n\n![关系图](http://upload-images.jianshu.io/upload_images/1504173-0b81f8a57768a703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#### Inject:\n两个作用:\n\n1.标识哪里需要被注入。\n\n2.标识哪里可以提供注入。\n``` Java\npublic class A {\n    // 这里需要被注入\n    @Inject\n    B b;\n}\n\npublic class B {\n    // 提供注入\n    @Inject\n    B() {\n      ...\n    }\n}\n```\n\n#### Commponent\n\n字面理解就是主持人，它更像是我们的分发器。发负责得到B的实例，并去给被标识注入的地方进行注入。定点投放。正所谓来龙去脉知道，我们需要Commponent来实现这个注入过程。\n``` Java\npublic class B {\n    // 提供注入\n    @Inject\n    B() {\n      ...\n    }\n}\n\npublic class A {\n    // 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系\n    @Inject\n    B b;\n}\n\n\n@Commponent\npublic interface Commponent {\n    // 这就是让A，B发生联系的地方\n    void Inject(A a);\n}\n\n// 这里我们修改一下Class A\n\npublic class A {\n    // 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系\n    @Inject\n    B b;\n\n    void A() {\n        // Dagger2 自动生成的组件用来注入，这样也就让A，B建立了联系\n        DaggerComponent.builder()\n                       .build()\n                       .inject(this);\n    }\n\n}\n```\n\n#### Model\n\n讲到这里，你会想，既然目标，来源都用Inject注解了，注入器Commponent也已经ok了，为何要用到Model，其实也很好理解，假如我们项目用第三方或者公司封装好的类库，你不可能指望你去打开它去修改，在你需要的位置加上Inject，这样的话，我们就可以用Model，将第三方我们需要的类暴露出来。Module其实是一个简单工厂模式，Module里面的方法基本都是创建类实例的方法。\n还是上代码清晰一些:\n``` Java\n@Model\npublic class A {\n    // B 为我们第三方lib中的类\n    B ProduceB() {\n        return new B();\n    }\n}\n```\n然而这样并没有完成，Model仅仅是创建实例的方法，我没还没有让他跟我的Component发生联系，我们需要Model可以跟我之前Inject需要注入的地方发生联系，接下来就引出来我下面的keyword: Provides\n\n#### Provides\n\n接着我们上面的话题，不要停。上面说到我们需要让我的Model跟我们的Commponent建立联系，这样我们可以提供Provides标注我们需要的构造方法，这样就实现了我们的需求。是不是很神奇。然后我们简单改一下上面的代码。\n\n``` Java\n@Model\npublic class A {\n    // Provides来标注\n    @Provides\n    B ProduceB() {\n        return new B();\n    }\n}\n```\n### 关于Model，Inject优先级？\n这里Dagger2处理的优先级是：Model > Inject\n也就是在初始化构造的时候，Dagger2会先去查找Model有没有Provide我们需要的构造方法，假如没有，它会去查找Inject。\n\n### 关于有参无参的构造？\n无参直接就create这个类，有参就去查看@model的@Provide，然后再查 Inject 来构造我们这个类需要的有参构造的参数，过程中如果又发现还有需要构造参数的就继续查@model的@Provide  然后再查 Inject 以此类推。\n\n## 简单总结\nDagger2的出现大大加快了Android的MVP模式的开发。而今天我说的是基础方面的，至于还有很多例如 Qualifier（限定符）、Singleton（单例）、Scope（作用域）、我会在接下来的Blog中进行分析，由衷地希望有看到这篇博客的童鞋，假如发现我的理解有问题，及时纠正我。\n\n最后郑重声明，感谢[牛大哥](http://www.jianshu.com/users/2ce7b74b592b/latest_articles).\n","slug":"Dagger2体会","published":1,"updated":"2021-06-28T14:28:31.664Z","layout":"post","photos":[],"link":"","_id":"ckqgq9v5c00025y8d98n5o4um","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近刚来我司，开始入手公司的项目，MVP，RxJava，Dagger2搭建的框架。对于我这个刚没多长时间的Android菜鸟，着实花了一段时间，说点儿题外话，最近研究了Java8，已经开始由命令式编程过度到函数式编程了，尤其是加了Lambda表达式，配起来RxJava的切换线程，异步操作爽呆了。</p>\n<p>至于MVP，开始我是只知道MVC，但在看我司的项目架构的时候发现有差别，后来在简书上看到一个博主，醍醐灌顶，明白了MVP其实跟MVC是不一样的，就单单Model来说，在MVC中只是我们的一些javaBean，而在MVP它涉及到数据的来龙去脉，数据是来自内存，硬盘，还是网络。已经数据将会怎样存储都包含其中，至于MV的不同，请大家看<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">MVP</a>。</p>\n<p>接下来就是这篇博客的重点了，Dagger2，相信大家都或多或少用过或者听说过。让大家津津乐道的就是它的依赖注入，之前有瞭解过依赖注入，知道他最大的好处是解藕，大学时候没好好研究，今天我想说一下我的心得。<br><a id=\"more\"></a></p>\n<h2 id=\"几个疑问\"><a href=\"#几个疑问\" class=\"headerlink\" title=\"几个疑问\"></a>几个疑问</h2><h3 id=\"什么是解耦？\"><a href=\"#什么是解耦？\" class=\"headerlink\" title=\"什么是解耦？\"></a>什么是解耦？</h3><p>解耦就是松耦合，在我们开始学Java的时候new过各种事物，(PS世间万物皆对象)，但当工程变大，你的java文件过多，一旦需求妹妹过来跟你娇滴滴的说，构造函数加个参数呗，毕竟是妹子求，怎能不从，然后你开始昏天黑地的找，这种最直观的牵一发而动全身的体验就是耦合，很直观吧。官方的说法就是，在A中new B违反了单一职责原则，B 只能在A中new，违反了开闭原则。我们需要做的就是弱化这种关系。</p>\n<h3 id=\"什么是依赖注入？\"><a href=\"#什么是依赖注入？\" class=\"headerlink\" title=\"什么是依赖注入？\"></a>什么是依赖注入？</h3><p>那么依赖注入这个思想是什么那，假设A需要B，我们要做的不是硬编码new B，而是通过一个工厂去生产它，你看到这一定蒙蔽了，工厂不也得new吗，讲道理，是这样，但你想，当你想改B的有参构造或是其他，你只需要改他的工厂。设计模式就是这样，你可能会感觉，好麻烦啊，我开始也是这样，觉得明明几行，为什么用了设计模式会这么多代码。担当开始接收项目，你会感觉自己的代码越写越难以维护，藕合度越高，最直观的感受，写的自己都心力交瘁，牵一发动全身，好了，回归正题，设想假如你在100个类里面new 了B，当B改变的时候你是不是要去一个个改，但是假如你只是修改他的工厂那就不用了，因为B 的源头是你在用到它的时候由工厂注入，无论是初始化加载，还是lazy加载，都一样。</p>\n<p>其实依赖注入我们一定见过，这里聚一下例子：</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    B b;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">A</span><span class=\"params\">(B b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"set方法注入\"><a href=\"#set方法注入\" class=\"headerlink\" title=\"set方法注入\"></a>set方法注入</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    B b;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setB</span><span class=\"params\">(B b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"接口注入\"><a href=\"#接口注入\" class=\"headerlink\" title=\"接口注入\"></a>接口注入</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InjectInterface</span>() </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InjectB</span><span class=\"params\">(B b)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">implements</span> <span class=\"title\">InjectInterface</span> </span>&#123;</div><div class=\"line\">    B b;</div><div class=\"line\">    <span class=\"meta\">@override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InjectB</span><span class=\"params\">(B b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"注解方式-也是Dagger框架的主要方式\"><a href=\"#注解方式-也是Dagger框架的主要方式\" class=\"headerlink\" title=\"注解方式(也是Dagger框架的主要方式)\"></a>注解方式(也是Dagger框架的主要方式)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关于Dagger2的依赖注入？\"><a href=\"#关于Dagger2的依赖注入？\" class=\"headerlink\" title=\"关于Dagger2的依赖注入？\"></a>关于Dagger2的依赖注入？</h3><p>ok，我觉得他流弊的地方是设计思想。dagger的最终目的是依赖注入，是解耦，但是他的实现方法很流弊。接下来我们来聊一聊他的几个keywords: Inject，Component，Module，Provides，这里允许我盗一张图(ps: <a href=\"http://www.jianshu.com/p/cd2c1c9f68d4\" target=\"_blank\" rel=\"external\">图的来源</a>, 这篇文章的作者就是上面的MVP的作者。非常感谢大哥，之前也详细解答了我很多)</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1504173-0b81f8a57768a703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"关系图\"></p>\n<h4 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"Inject:\"></a>Inject:</h4><p>两个作用:</p>\n<p>1.标识哪里需要被注入。</p>\n<p>2.标识哪里可以提供注入。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里需要被注入</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 提供注入</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B() &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Commponent\"><a href=\"#Commponent\" class=\"headerlink\" title=\"Commponent\"></a>Commponent</h4><p>字面理解就是主持人，它更像是我们的分发器。发负责得到B的实例，并去给被标识注入的地方进行注入。定点投放。正所谓来龙去脉知道，我们需要Commponent来实现这个注入过程。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 提供注入</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B() &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Commponent</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Commponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这就是让A，B发生联系的地方</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Inject</span><span class=\"params\">(A a)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这里我们修改一下Class A</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B b;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">A</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Dagger2 自动生成的组件用来注入，这样也就让A，B建立了联系</span></div><div class=\"line\">        DaggerComponent.builder()</div><div class=\"line\">                       .build()</div><div class=\"line\">                       .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h4><p>讲到这里，你会想，既然目标，来源都用Inject注解了，注入器Commponent也已经ok了，为何要用到Model，其实也很好理解，假如我们项目用第三方或者公司封装好的类库，你不可能指望你去打开它去修改，在你需要的位置加上Inject，这样的话，我们就可以用Model，将第三方我们需要的类暴露出来。Module其实是一个简单工厂模式，Module里面的方法基本都是创建类实例的方法。<br>还是上代码清晰一些:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Model</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// B 为我们第三方lib中的类</span></div><div class=\"line\">    <span class=\"function\">B <span class=\"title\">ProduceB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然而这样并没有完成，Model仅仅是创建实例的方法，我没还没有让他跟我的Component发生联系，我们需要Model可以跟我之前Inject需要注入的地方发生联系，接下来就引出来我下面的keyword: Provides</p>\n<h4 id=\"Provides\"><a href=\"#Provides\" class=\"headerlink\" title=\"Provides\"></a>Provides</h4><p>接着我们上面的话题，不要停。上面说到我们需要让我的Model跟我们的Commponent建立联系，这样我们可以提供Provides标注我们需要的构造方法，这样就实现了我们的需求。是不是很神奇。然后我们简单改一下上面的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Model</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Provides来标注</span></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\">B <span class=\"title\">ProduceB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关于Model，Inject优先级？\"><a href=\"#关于Model，Inject优先级？\" class=\"headerlink\" title=\"关于Model，Inject优先级？\"></a>关于Model，Inject优先级？</h3><p>这里Dagger2处理的优先级是：Model &gt; Inject<br>也就是在初始化构造的时候，Dagger2会先去查找Model有没有Provide我们需要的构造方法，假如没有，它会去查找Inject。</p>\n<h3 id=\"关于有参无参的构造？\"><a href=\"#关于有参无参的构造？\" class=\"headerlink\" title=\"关于有参无参的构造？\"></a>关于有参无参的构造？</h3><p>无参直接就create这个类，有参就去查看@model的@Provide，然后再查 Inject 来构造我们这个类需要的有参构造的参数，过程中如果又发现还有需要构造参数的就继续查@model的@Provide  然后再查 Inject 以此类推。</p>\n<h2 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h2><p>Dagger2的出现大大加快了Android的MVP模式的开发。而今天我说的是基础方面的，至于还有很多例如 Qualifier（限定符）、Singleton（单例）、Scope（作用域）、我会在接下来的Blog中进行分析，由衷地希望有看到这篇博客的童鞋，假如发现我的理解有问题，及时纠正我。</p>\n<p>最后郑重声明，感谢<a href=\"http://www.jianshu.com/users/2ce7b74b592b/latest_articles\" target=\"_blank\" rel=\"external\">牛大哥</a>.</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近刚来我司，开始入手公司的项目，MVP，RxJava，Dagger2搭建的框架。对于我这个刚没多长时间的Android菜鸟，着实花了一段时间，说点儿题外话，最近研究了Java8，已经开始由命令式编程过度到函数式编程了，尤其是加了Lambda表达式，配起来RxJava的切换线程，异步操作爽呆了。</p>\n<p>至于MVP，开始我是只知道MVC，但在看我司的项目架构的时候发现有差别，后来在简书上看到一个博主，醍醐灌顶，明白了MVP其实跟MVC是不一样的，就单单Model来说，在MVC中只是我们的一些javaBean，而在MVP它涉及到数据的来龙去脉，数据是来自内存，硬盘，还是网络。已经数据将会怎样存储都包含其中，至于MV的不同，请大家看<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">MVP</a>。</p>\n<p>接下来就是这篇博客的重点了，Dagger2，相信大家都或多或少用过或者听说过。让大家津津乐道的就是它的依赖注入，之前有瞭解过依赖注入，知道他最大的好处是解藕，大学时候没好好研究，今天我想说一下我的心得。<br>","more":"</p>\n<h2 id=\"几个疑问\"><a href=\"#几个疑问\" class=\"headerlink\" title=\"几个疑问\"></a>几个疑问</h2><h3 id=\"什么是解耦？\"><a href=\"#什么是解耦？\" class=\"headerlink\" title=\"什么是解耦？\"></a>什么是解耦？</h3><p>解耦就是松耦合，在我们开始学Java的时候new过各种事物，(PS世间万物皆对象)，但当工程变大，你的java文件过多，一旦需求妹妹过来跟你娇滴滴的说，构造函数加个参数呗，毕竟是妹子求，怎能不从，然后你开始昏天黑地的找，这种最直观的牵一发而动全身的体验就是耦合，很直观吧。官方的说法就是，在A中new B违反了单一职责原则，B 只能在A中new，违反了开闭原则。我们需要做的就是弱化这种关系。</p>\n<h3 id=\"什么是依赖注入？\"><a href=\"#什么是依赖注入？\" class=\"headerlink\" title=\"什么是依赖注入？\"></a>什么是依赖注入？</h3><p>那么依赖注入这个思想是什么那，假设A需要B，我们要做的不是硬编码new B，而是通过一个工厂去生产它，你看到这一定蒙蔽了，工厂不也得new吗，讲道理，是这样，但你想，当你想改B的有参构造或是其他，你只需要改他的工厂。设计模式就是这样，你可能会感觉，好麻烦啊，我开始也是这样，觉得明明几行，为什么用了设计模式会这么多代码。担当开始接收项目，你会感觉自己的代码越写越难以维护，藕合度越高，最直观的感受，写的自己都心力交瘁，牵一发动全身，好了，回归正题，设想假如你在100个类里面new 了B，当B改变的时候你是不是要去一个个改，但是假如你只是修改他的工厂那就不用了，因为B 的源头是你在用到它的时候由工厂注入，无论是初始化加载，还是lazy加载，都一样。</p>\n<p>其实依赖注入我们一定见过，这里聚一下例子：</p>\n<h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    B b;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">A</span><span class=\"params\">(B b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"set方法注入\"><a href=\"#set方法注入\" class=\"headerlink\" title=\"set方法注入\"></a>set方法注入</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    B b;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setB</span><span class=\"params\">(B b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"接口注入\"><a href=\"#接口注入\" class=\"headerlink\" title=\"接口注入\"></a>接口注入</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InjectInterface</span>() </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InjectB</span><span class=\"params\">(B b)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> <span class=\"keyword\">implements</span> <span class=\"title\">InjectInterface</span> </span>&#123;</div><div class=\"line\">    B b;</div><div class=\"line\">    <span class=\"meta\">@override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">InjectB</span><span class=\"params\">(B b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.b = b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"注解方式-也是Dagger框架的主要方式\"><a href=\"#注解方式-也是Dagger框架的主要方式\" class=\"headerlink\" title=\"注解方式(也是Dagger框架的主要方式)\"></a>注解方式(也是Dagger框架的主要方式)</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关于Dagger2的依赖注入？\"><a href=\"#关于Dagger2的依赖注入？\" class=\"headerlink\" title=\"关于Dagger2的依赖注入？\"></a>关于Dagger2的依赖注入？</h3><p>ok，我觉得他流弊的地方是设计思想。dagger的最终目的是依赖注入，是解耦，但是他的实现方法很流弊。接下来我们来聊一聊他的几个keywords: Inject，Component，Module，Provides，这里允许我盗一张图(ps: <a href=\"http://www.jianshu.com/p/cd2c1c9f68d4\" target=\"_blank\" rel=\"external\">图的来源</a>, 这篇文章的作者就是上面的MVP的作者。非常感谢大哥，之前也详细解答了我很多)</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1504173-0b81f8a57768a703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"关系图\"></p>\n<h4 id=\"Inject\"><a href=\"#Inject\" class=\"headerlink\" title=\"Inject:\"></a>Inject:</h4><p>两个作用:</p>\n<p>1.标识哪里需要被注入。</p>\n<p>2.标识哪里可以提供注入。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里需要被注入</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 提供注入</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B() &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Commponent\"><a href=\"#Commponent\" class=\"headerlink\" title=\"Commponent\"></a>Commponent</h4><p>字面理解就是主持人，它更像是我们的分发器。发负责得到B的实例，并去给被标识注入的地方进行注入。定点投放。正所谓来龙去脉知道，我们需要Commponent来实现这个注入过程。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 提供注入</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B() &#123;</div><div class=\"line\">      ...</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B b;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Commponent</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Commponent</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这就是让A，B发生联系的地方</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Inject</span><span class=\"params\">(A a)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这里我们修改一下Class A</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里我们需要找到找到B的实例进行注入，也就是需要Commponent来建立联系</span></div><div class=\"line\">    <span class=\"meta\">@Inject</span></div><div class=\"line\">    B b;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">A</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Dagger2 自动生成的组件用来注入，这样也就让A，B建立了联系</span></div><div class=\"line\">        DaggerComponent.builder()</div><div class=\"line\">                       .build()</div><div class=\"line\">                       .inject(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Model\"><a href=\"#Model\" class=\"headerlink\" title=\"Model\"></a>Model</h4><p>讲到这里，你会想，既然目标，来源都用Inject注解了，注入器Commponent也已经ok了，为何要用到Model，其实也很好理解，假如我们项目用第三方或者公司封装好的类库，你不可能指望你去打开它去修改，在你需要的位置加上Inject，这样的话，我们就可以用Model，将第三方我们需要的类暴露出来。Module其实是一个简单工厂模式，Module里面的方法基本都是创建类实例的方法。<br>还是上代码清晰一些:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Model</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// B 为我们第三方lib中的类</span></div><div class=\"line\">    <span class=\"function\">B <span class=\"title\">ProduceB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>然而这样并没有完成，Model仅仅是创建实例的方法，我没还没有让他跟我的Component发生联系，我们需要Model可以跟我之前Inject需要注入的地方发生联系，接下来就引出来我下面的keyword: Provides</p>\n<h4 id=\"Provides\"><a href=\"#Provides\" class=\"headerlink\" title=\"Provides\"></a>Provides</h4><p>接着我们上面的话题，不要停。上面说到我们需要让我的Model跟我们的Commponent建立联系，这样我们可以提供Provides标注我们需要的构造方法，这样就实现了我们的需求。是不是很神奇。然后我们简单改一下上面的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Model</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Provides来标注</span></div><div class=\"line\">    <span class=\"meta\">@Provides</span></div><div class=\"line\">    <span class=\"function\">B <span class=\"title\">ProduceB</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> B();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"关于Model，Inject优先级？\"><a href=\"#关于Model，Inject优先级？\" class=\"headerlink\" title=\"关于Model，Inject优先级？\"></a>关于Model，Inject优先级？</h3><p>这里Dagger2处理的优先级是：Model &gt; Inject<br>也就是在初始化构造的时候，Dagger2会先去查找Model有没有Provide我们需要的构造方法，假如没有，它会去查找Inject。</p>\n<h3 id=\"关于有参无参的构造？\"><a href=\"#关于有参无参的构造？\" class=\"headerlink\" title=\"关于有参无参的构造？\"></a>关于有参无参的构造？</h3><p>无参直接就create这个类，有参就去查看@model的@Provide，然后再查 Inject 来构造我们这个类需要的有参构造的参数，过程中如果又发现还有需要构造参数的就继续查@model的@Provide  然后再查 Inject 以此类推。</p>\n<h2 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a>简单总结</h2><p>Dagger2的出现大大加快了Android的MVP模式的开发。而今天我说的是基础方面的，至于还有很多例如 Qualifier（限定符）、Singleton（单例）、Scope（作用域）、我会在接下来的Blog中进行分析，由衷地希望有看到这篇博客的童鞋，假如发现我的理解有问题，及时纠正我。</p>\n<p>最后郑重声明，感谢<a href=\"http://www.jianshu.com/users/2ce7b74b592b/latest_articles\" target=\"_blank\" rel=\"external\">牛大哥</a>.</p>"},{"title":"Android 丢帧原理以及办法","date":"2017-01-22T09:53:56.000Z","comments":1,"_content":"\n\n## 接近年底，想分享点儿东西给大家。\n\n## Android UI绘制过程\n\n开发中的卡顿我想没跟人都遇到过，之前也是搜博客看看怎么个解决办法，没有认真研究过，今天我打算跟大家聊一聊。\n\n先从View 说吧。相信大家应该都知道View的绘制过程，measure，layout，draw。丢帧一定是在16ms内没有把这些事儿干完就对了，这里我们简单的分一下，主要是计算时间，以及绘图时间。\n\n<!--more-->\n\n计算时间：这里的measure，layout的过程，都是会向下递归计算的，学过数据结构的话，应该知道，深搜的代价是很大的。所以尽量让树的高度降低，这里就引出扁平化布局。\n\n绘图时间：这里需要着重讲一下，因为有时候这才是我们UI卡顿的主要原因。在这里我们要把android的试图看成是三维的，就像photoshop的图层一样。android在绘制的时候就会一层一层的“粉刷”，好了，那么造成卡顿，也就是丢帧，说白了最后没有在16ms内做完。好了，让我们剖析一下：\n\n\n### invalidate()：\n\n我们知道invalidate 是用来请求View 重绘的\n\n``` Java\n// Propagate the damage rectangle to the parent view.\nfinal AttachInfo ai = mAttachInfo;\nfinal ViewParent p = mParent;\nif (p != null && ai != null && l < r && t < b) {\n    final Rect damage = ai.mTmpInvalRect;\n    damage.set(l, t, r, b);\n    p.invalidateChild(this, damage);\n}\n```\n\ninvalidateInternal\n这里可以看出来draw的过程其实就是拿到AttachInfo 里面包含着绘制信息，以及将绘制区域拿到，通过parent去绘制。让我们跟进去。\n\n``` Java\npublic ViewParent invalidateChildInParent(final int[] location, final Rect dirty) {\n    if ((mPrivateFlags & PFLAG_DRAWN) == PFLAG_DRAWN ||\n            (mPrivateFlags & PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID) {\n        if ((mGroupFlags & (FLAG_OPTIMIZE_INVALIDATE | FLAG_ANIMATION_DONE)) !=\n                    FLAG_OPTIMIZE_INVALIDATE) {\n            dirty.offset(location[CHILD_LEFT_INDEX] - mScrollX,\n                    location[CHILD_TOP_INDEX] - mScrollY);\n            if ((mGroupFlags & FLAG_CLIP_CHILDREN) == 0) {\n                dirty.union(0, 0, mRight - mLeft, mBottom - mTop);\n            }\n\n            final int left = mLeft;\n            final int top = mTop;\n\n            if ((mGroupFlags & FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) {\n                if (!dirty.intersect(0, 0, mRight - left, mBottom - top)) {\n                    dirty.setEmpty();\n                }\n            }\n            mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;\n\n            location[CHILD_LEFT_INDEX] = left;\n            location[CHILD_TOP_INDEX] = top;\n\n            if (mLayerType != LAYER_TYPE_NONE) {\n                mPrivateFlags |= PFLAG_INVALIDATED;\n            }\n\n            return mParent;\n\n        } else {\n            mPrivateFlags &= ~PFLAG_DRAWN & ~PFLAG_DRAWING_CACHE_VALID;\n\n            location[CHILD_LEFT_INDEX] = mLeft;\n            location[CHILD_TOP_INDEX] = mTop;\n            if ((mGroupFlags & FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) {\n                dirty.set(0, 0, mRight - mLeft, mBottom - mTop);\n            } else {\n                // in case the dirty rect extends outside the bounds of this container\n                dirty.union(0, 0, mRight - mLeft, mBottom - mTop);\n            }\n\n            if (mLayerType != LAYER_TYPE_NONE) {\n                mPrivateFlags |= PFLAG_INVALIDATED;\n            }\n\n            return mParent;\n        }\n    }\n\n    return null;\n}\n```\ninvalidateChildInParent\n这里的dirty代表你绘制的这块区域是否透明。\n\n``` Java\nvoid invalidate() {\n    mDirty.set(0, 0, mWidth, mHeight);\n    if (!mWillDrawSoon) {\n        scheduleTraversals();\n    }\n}\n```\ninvalidate\n这里我们看到了个关键函数 scheduleTraversals ，为什么说神奇。我们看一下\n\n``` Java\nvoid scheduleTraversals() {\n    if (!mTraversalScheduled) {\n        mTraversalScheduled = true;\n        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();\n        mChoreographer.postCallback(\n                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);\n        if (!mUnbufferedInputDispatch) {\n            scheduleConsumeBatchedInput();\n        }\n        notifyRendererOfFramePending();\n        pokeDrawLockIfNeeded();\n    }\n}\n```\nscheduleTraversals\n这里最重要的是Choreographer 这个，我们最终算出来的绘制信息都要通过它回调，开始他会注册一个广播用来接收时钟信息，然后他会在内部建立一个UI绘制队列：CallbackQueue，我们在外部CallBack的时候，会将我们的绘制信息作为CallbackRecord 然后会在接收到一个时钟信号的时候进行doFrame操作，并打印Traces信息，从而来绘制一帧。\n\n``` Java\nprivate static final class CallbackRecord {\n    public CallbackRecord next;\n    public long dueTime;\n    public Object action; // Runnable or FrameCallback\n    public Object token;\n\n    public void run(long frameTimeNanos) {\n        if (token == FRAME_CALLBACK_TOKEN) {\n            ((FrameCallback)action).doFrame(frameTimeNanos);\n        } else {\n            ((Runnable)action).run();\n        }\n    }\n}\nprivate final class CallbackQueue {\n    private CallbackRecord mHead;\n\n    public boolean hasDueCallbacksLocked(long now) {\n        return mHead != null && mHead.dueTime <= now;\n    }\n\n    public CallbackRecord extractDueCallbacksLocked(long now) {\n        CallbackRecord callbacks = mHead;\n        if (callbacks == null || callbacks.dueTime > now) {\n            return null;\n        }\n\n        CallbackRecord last = callbacks;\n        CallbackRecord next = last.next;\n        while (next != null) {\n            if (next.dueTime > now) {\n                last.next = null;\n                break;\n            }\n            last = next;\n            next = next.next;\n        }\n        mHead = next;\n        return callbacks;\n    }\n\n    public void addCallbackLocked(long dueTime, Object action, Object token) {\n        CallbackRecord callback = obtainCallbackLocked(dueTime, action, token);\n        CallbackRecord entry = mHead;\n        if (entry == null) {\n            mHead = callback;\n            return;\n        }\n        if (dueTime < entry.dueTime) {\n            callback.next = entry;\n            mHead = callback;\n            return;\n        }\n        while (entry.next != null) {\n            if (dueTime < entry.next.dueTime) {\n                callback.next = entry.next;\n                break;\n            }\n            entry = entry.next;\n        }\n        entry.next = callback;\n    }\n\n    public void removeCallbacksLocked(Object action, Object token) {\n        CallbackRecord predecessor = null;\n        for (CallbackRecord callback = mHead; callback != null;) {\n            final CallbackRecord next = callback.next;\n            if ((action == null || callback.action == action)\n                    && (token == null || callback.token == token)) {\n                if (predecessor != null) {\n                    predecessor.next = next;\n                } else {\n                    mHead = next;\n                }\n                recycleCallbackLocked(callback);\n            } else {\n                predecessor = callback;\n            }\n            callback = next;\n        }\n    }\n}\n```\nCallbackQueue and CallbackRecord\n\n``` Java\nprivate void postCallbackDelayedInternal(int callbackType,\n            Object action, Object token, long delayMillis) {\n    if (DEBUG_FRAMES) {\n        Log.d(TAG, \"PostCallback: type=\" + callbackType\n                + \", action=\" + action + \", token=\" + token\n                + \", delayMillis=\" + delayMillis);\n    }\n\n    synchronized (mLock) {\n        final long now = SystemClock.uptimeMillis();\n        final long dueTime = now + delayMillis;\n        mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);\n\n        if (dueTime <= now) {\n            scheduleFrameLocked(now);\n        } else {\n            Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);\n            msg.arg1 = callbackType;\n            msg.setAsynchronous(true);\n            mHandler.sendMessageAtTime(msg, dueTime);\n        }\n    }\n}\n```\npostCallbackDelayedInternal\n可以看到这里我们把我们的绘制内容扔到队列里，等待轮训。\n\n``` Java\nprivate final class FrameDisplayEventReceiver extends DisplayEventReceiver\n            implements Runnable {\n    private boolean mHavePendingVsync;\n    private long mTimestampNanos;\n    private int mFrame;\n\n    public FrameDisplayEventReceiver(Looper looper) {\n        super(looper);\n    }\n\n    @Override\n    public void onVsync(long timestampNanos, int builtInDisplayId, int frame) {\n        // Ignore vsync from secondary display.\n        // This can be problematic because the call to scheduleVsync() is a one-shot.\n        // We need to ensure that we will still receive the vsync from the primary\n        // display which is the one we really care about.  Ideally we should schedule\n        // vsync for a particular display.\n        // At this time Surface Flinger won't send us vsyncs for secondary displays\n        // but that could change in the future so let's log a message to help us remember\n        // that we need to fix this.\n        if (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {\n            Log.d(TAG, \"Received vsync from secondary display, but we don't support \"\n                    + \"this case yet.  Choreographer needs a way to explicitly request \"\n                    + \"vsync for a specific display to ensure it doesn't lose track \"\n                    + \"of its scheduled vsync.\");\n            scheduleVsync();\n            return;\n        }\n\n        // Post the vsync event to the Handler.\n        // The idea is to prevent incoming vsync events from completely starving\n        // the message queue.  If there are no messages in the queue with timestamps\n        // earlier than the frame time, then the vsync event will be processed immediately.\n        // Otherwise, messages that predate the vsync event will be handled first.\n        long now = System.nanoTime();\n        if (timestampNanos > now) {\n            Log.w(TAG, \"Frame time is \" + ((timestampNanos - now) * 0.000001f)\n                    + \" ms in the future!  Check that graphics HAL is generating vsync \"\n                    + \"timestamps using the correct timebase.\");\n            timestampNanos = now;\n        }\n\n        if (mHavePendingVsync) {\n            Log.w(TAG, \"Already have a pending vsync event.  There should only be \"\n                    + \"one at a time.\");\n        } else {\n            mHavePendingVsync = true;\n        }\n\n        mTimestampNanos = timestampNanos;\n        mFrame = frame;\n        Message msg = Message.obtain(mHandler, this);\n        msg.setAsynchronous(true);\n        mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);\n    }\n\n    @Override\n    public void run() {\n        mHavePendingVsync = false;\n        doFrame(mTimestampNanos, mFrame);\n    }\n}\n```\nFrameDisplayEventReceiver\n接收时钟脉冲信号的广播，16ms一次，我们的目的就是在这个时钟脉冲里搞定整个 view\n\n### Android 动画\n\nAnimator，ScrollTo，offsetLeftAndRight，这里面我们先单列这几项，都是同一个原理。这里我们可以大胆的猜想，一定是频繁执行我们的 Choreographer.CallBack 来绘制，因为只要在16ms内绘制成功，那就是流畅的动画。下面我们验证一下\n\nScrollTo:\n\n我们先看一下 View 中这个方法\n\n``` Java\npublic void scrollTo(int x, int y) {\n    if (mScrollX != x || mScrollY != y) {\n        int oldX = mScrollX;\n        int oldY = mScrollY;\n        mScrollX = x;\n        mScrollY = y;\n        invalidateParentCaches();\n        onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n        if (!awakenScrollBars()) {\n            postInvalidateOnAnimation();\n        }\n    }\n}\n```\nscrollTo\n很简单，我们都可以看懂，开始位置，结束位置，这里我们重点关注 postInvalidateOnAnimation()  这个方法\n\n``` Java\npublic void postInvalidateOnAnimation() {\n    // We try only with the AttachInfo because there's no point in invalidating\n    // if we are not attached to our window\n    final AttachInfo attachInfo = mAttachInfo;\n    if (attachInfo != null) {\n        attachInfo.mViewRootImpl.dispatchInvalidateOnAnimation(this);\n    }\n}\n```\npostInvalidateOnAnimation\n我们可以看到，这里的动画过程绘制他还是扔到了ViewRootImpl 代理做这件事。\n\n``` Java\npublic void dispatchInvalidateRectOnAnimation(AttachInfo.InvalidateInfo info) {\n    mInvalidateOnAnimationRunnable.addViewRect(info);\n}\n```\ndispatchInvalidateOnAnimation\n这里我们看到他开了个线程 mInvalidateOnAnimationRunnable 去添加我们这个将要绘制的 view，接下来我们继续庖丁解牛\n\n``` Java\nfinal class InvalidateOnAnimationRunnable implements Runnable {\n    private boolean mPosted;\n    private final ArrayList<View> mViews = new ArrayList<View>();\n    private final ArrayList<AttachInfo.InvalidateInfo> mViewRects =\n            new ArrayList<AttachInfo.InvalidateInfo>();\n    private View[] mTempViews;\n    private AttachInfo.InvalidateInfo[] mTempViewRects;\n\n    public void addView(View view) {\n        synchronized (this) {\n            mViews.add(view);\n            postIfNeededLocked();\n        }\n    }\n\n    public void addViewRect(AttachInfo.InvalidateInfo info) {\n        synchronized (this) {\n            mViewRects.add(info);\n            postIfNeededLocked();\n        }\n    }\n\n    public void removeView(View view) {\n        synchronized (this) {\n            mViews.remove(view);\n\n            for (int i = mViewRects.size(); i-- > 0; ) {\n                AttachInfo.InvalidateInfo info = mViewRects.get(i);\n                if (info.target == view) {\n                    mViewRects.remove(i);\n                    info.recycle();\n                }\n            }\n\n            if (mPosted && mViews.isEmpty() && mViewRects.isEmpty()) {\n                mChoreographer.removeCallbacks(Choreographer.CALLBACK_ANIMATION, this, null);\n                mPosted = false;\n            }\n        }\n    }\n\n    @Override\n    public void run() {\n        final int viewCount;\n        final int viewRectCount;\n        synchronized (this) {\n            mPosted = false;\n\n            viewCount = mViews.size();\n            if (viewCount != 0) {\n                mTempViews = mViews.toArray(mTempViews != null\n                        ? mTempViews : new View[viewCount]);\n                mViews.clear();\n            }\n\n            viewRectCount = mViewRects.size();\n            if (viewRectCount != 0) {\n                mTempViewRects = mViewRects.toArray(mTempViewRects != null\n                        ? mTempViewRects : new AttachInfo.InvalidateInfo[viewRectCount]);\n                mViewRects.clear();\n            }\n        }\n\n        for (int i = 0; i < viewCount; i++) {\n            mTempViews[i].invalidate();\n            mTempViews[i] = null;\n        }\n\n        for (int i = 0; i < viewRectCount; i++) {\n            final View.AttachInfo.InvalidateInfo info = mTempViewRects[i];\n            info.target.invalidate(info.left, info.top, info.right, info.bottom);\n            info.recycle();\n        }\n    }\n\n    private void postIfNeededLocked() {\n        if (!mPosted) {\n            mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, this, null);\n            mPosted = true;\n        }\n    }\n}\n```\nInvalidateOnAnimationRunnable\n终于，应了我们的猜想，ViewRootImpl 有一个专门执行动画绘制操作的线程，我们可以看到 run() 里面不断地CallBack，然后回收，当然里面有些线程锁啥的不涉及本文就不细说了。\n\n### ValueAnimator：\n\n这里我们有个 AnimationHandler 来执行动画操作，这其中我们可以看到\n\n``` Java\nfor (int i = 0; i < numAnims; ++i) {\n    ValueAnimator anim = mTmpAnimations.get(i);\n    if (mAnimations.contains(anim) && anim.doAnimationFrame(frameTime)) {\n        mEndingAnims.add(anim);\n    }\n}\nmTmpAnimations.clear();\n```\ndoAnimationFrame\n这里在不断循环我们所有的anim，并在不断执行 scheduleAnimation 方法\n\n``` Java\nprivate void scheduleAnimation() {\n    if (!mAnimationScheduled) {\n        mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, mAnimate, null);\n        mAnimationScheduled = true;\n    }\n}\n```\nscheduleAnimation\n剩下的大家自己翻阅源码把。\n\n这里总结一下。我们所有界面上视图的变化都是都是 ViewRootImpl 把需要重绘的东西填充 Choreographer 中的 mCallbackQueues 队列，然后在时钟脉冲的广播下进行轮训执行。\n\n既然提到队列，假如我们在16ms内大量的填充 AttachInfo 之类的绘制OBJ，就会导致无法再一次时钟脉冲内绘制完毕，就会在造成丢帧，UI阻塞。\n\n避免 Android UI 卡顿解决办法\n\n解决办法：分析了好多，这里说两个方法。\n\n1.避免重绘，这里避免图层（View）迭代。这里我们可以去开发者模式中对“显示GPU视图更新”打钩\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-cade3554a7db68ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n过度绘制\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-eb07b0f9a442d6f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n优化以后\n这里引用 http://hukai.me/android-performance-render 这篇博客的作者，盗个图。😂\n\n这里可以进行，选择制定画布绘制，而不是整个view去绘制。可以在onDraw中进行限制，去限制绘制区域，例如\n\ncanvas.clipRect(100,100,350,600, Region.Op.INTERSECT);\n\n2.扁平化布局，归根结底也是减少 mCallbackQueues 队列大小。保证尽量在16ms内绘制完毕，再有就是可以减少视图 ViewTree 的高度，减少时间复杂度，从而优化计算过程\n\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-4c8e729db92f694a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nxml代码\n\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-0dbcc3353bd36d2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n优化后的xml代码\n＊附：\n\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-5ddc05554c24d6d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n绘制层级\n通过打开刚才说的开发者选项，来根据颜色来判断页面绘制情况。\n\n距离回家还有8 个小时，17年希望可以发觉更多的东西给大家，并且希望大家可以积极指出文章中的错误。祝大家新年快乐！😄","source":"_posts/Android 丢帧原理以及办法.md","raw":"---\ntitle: Android 丢帧原理以及办法\ndate: 2017-01-22 17:53:56\ntags: Android 源码\ncomments: true\n---\n\n\n## 接近年底，想分享点儿东西给大家。\n\n## Android UI绘制过程\n\n开发中的卡顿我想没跟人都遇到过，之前也是搜博客看看怎么个解决办法，没有认真研究过，今天我打算跟大家聊一聊。\n\n先从View 说吧。相信大家应该都知道View的绘制过程，measure，layout，draw。丢帧一定是在16ms内没有把这些事儿干完就对了，这里我们简单的分一下，主要是计算时间，以及绘图时间。\n\n<!--more-->\n\n计算时间：这里的measure，layout的过程，都是会向下递归计算的，学过数据结构的话，应该知道，深搜的代价是很大的。所以尽量让树的高度降低，这里就引出扁平化布局。\n\n绘图时间：这里需要着重讲一下，因为有时候这才是我们UI卡顿的主要原因。在这里我们要把android的试图看成是三维的，就像photoshop的图层一样。android在绘制的时候就会一层一层的“粉刷”，好了，那么造成卡顿，也就是丢帧，说白了最后没有在16ms内做完。好了，让我们剖析一下：\n\n\n### invalidate()：\n\n我们知道invalidate 是用来请求View 重绘的\n\n``` Java\n// Propagate the damage rectangle to the parent view.\nfinal AttachInfo ai = mAttachInfo;\nfinal ViewParent p = mParent;\nif (p != null && ai != null && l < r && t < b) {\n    final Rect damage = ai.mTmpInvalRect;\n    damage.set(l, t, r, b);\n    p.invalidateChild(this, damage);\n}\n```\n\ninvalidateInternal\n这里可以看出来draw的过程其实就是拿到AttachInfo 里面包含着绘制信息，以及将绘制区域拿到，通过parent去绘制。让我们跟进去。\n\n``` Java\npublic ViewParent invalidateChildInParent(final int[] location, final Rect dirty) {\n    if ((mPrivateFlags & PFLAG_DRAWN) == PFLAG_DRAWN ||\n            (mPrivateFlags & PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID) {\n        if ((mGroupFlags & (FLAG_OPTIMIZE_INVALIDATE | FLAG_ANIMATION_DONE)) !=\n                    FLAG_OPTIMIZE_INVALIDATE) {\n            dirty.offset(location[CHILD_LEFT_INDEX] - mScrollX,\n                    location[CHILD_TOP_INDEX] - mScrollY);\n            if ((mGroupFlags & FLAG_CLIP_CHILDREN) == 0) {\n                dirty.union(0, 0, mRight - mLeft, mBottom - mTop);\n            }\n\n            final int left = mLeft;\n            final int top = mTop;\n\n            if ((mGroupFlags & FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) {\n                if (!dirty.intersect(0, 0, mRight - left, mBottom - top)) {\n                    dirty.setEmpty();\n                }\n            }\n            mPrivateFlags &= ~PFLAG_DRAWING_CACHE_VALID;\n\n            location[CHILD_LEFT_INDEX] = left;\n            location[CHILD_TOP_INDEX] = top;\n\n            if (mLayerType != LAYER_TYPE_NONE) {\n                mPrivateFlags |= PFLAG_INVALIDATED;\n            }\n\n            return mParent;\n\n        } else {\n            mPrivateFlags &= ~PFLAG_DRAWN & ~PFLAG_DRAWING_CACHE_VALID;\n\n            location[CHILD_LEFT_INDEX] = mLeft;\n            location[CHILD_TOP_INDEX] = mTop;\n            if ((mGroupFlags & FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) {\n                dirty.set(0, 0, mRight - mLeft, mBottom - mTop);\n            } else {\n                // in case the dirty rect extends outside the bounds of this container\n                dirty.union(0, 0, mRight - mLeft, mBottom - mTop);\n            }\n\n            if (mLayerType != LAYER_TYPE_NONE) {\n                mPrivateFlags |= PFLAG_INVALIDATED;\n            }\n\n            return mParent;\n        }\n    }\n\n    return null;\n}\n```\ninvalidateChildInParent\n这里的dirty代表你绘制的这块区域是否透明。\n\n``` Java\nvoid invalidate() {\n    mDirty.set(0, 0, mWidth, mHeight);\n    if (!mWillDrawSoon) {\n        scheduleTraversals();\n    }\n}\n```\ninvalidate\n这里我们看到了个关键函数 scheduleTraversals ，为什么说神奇。我们看一下\n\n``` Java\nvoid scheduleTraversals() {\n    if (!mTraversalScheduled) {\n        mTraversalScheduled = true;\n        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();\n        mChoreographer.postCallback(\n                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);\n        if (!mUnbufferedInputDispatch) {\n            scheduleConsumeBatchedInput();\n        }\n        notifyRendererOfFramePending();\n        pokeDrawLockIfNeeded();\n    }\n}\n```\nscheduleTraversals\n这里最重要的是Choreographer 这个，我们最终算出来的绘制信息都要通过它回调，开始他会注册一个广播用来接收时钟信息，然后他会在内部建立一个UI绘制队列：CallbackQueue，我们在外部CallBack的时候，会将我们的绘制信息作为CallbackRecord 然后会在接收到一个时钟信号的时候进行doFrame操作，并打印Traces信息，从而来绘制一帧。\n\n``` Java\nprivate static final class CallbackRecord {\n    public CallbackRecord next;\n    public long dueTime;\n    public Object action; // Runnable or FrameCallback\n    public Object token;\n\n    public void run(long frameTimeNanos) {\n        if (token == FRAME_CALLBACK_TOKEN) {\n            ((FrameCallback)action).doFrame(frameTimeNanos);\n        } else {\n            ((Runnable)action).run();\n        }\n    }\n}\nprivate final class CallbackQueue {\n    private CallbackRecord mHead;\n\n    public boolean hasDueCallbacksLocked(long now) {\n        return mHead != null && mHead.dueTime <= now;\n    }\n\n    public CallbackRecord extractDueCallbacksLocked(long now) {\n        CallbackRecord callbacks = mHead;\n        if (callbacks == null || callbacks.dueTime > now) {\n            return null;\n        }\n\n        CallbackRecord last = callbacks;\n        CallbackRecord next = last.next;\n        while (next != null) {\n            if (next.dueTime > now) {\n                last.next = null;\n                break;\n            }\n            last = next;\n            next = next.next;\n        }\n        mHead = next;\n        return callbacks;\n    }\n\n    public void addCallbackLocked(long dueTime, Object action, Object token) {\n        CallbackRecord callback = obtainCallbackLocked(dueTime, action, token);\n        CallbackRecord entry = mHead;\n        if (entry == null) {\n            mHead = callback;\n            return;\n        }\n        if (dueTime < entry.dueTime) {\n            callback.next = entry;\n            mHead = callback;\n            return;\n        }\n        while (entry.next != null) {\n            if (dueTime < entry.next.dueTime) {\n                callback.next = entry.next;\n                break;\n            }\n            entry = entry.next;\n        }\n        entry.next = callback;\n    }\n\n    public void removeCallbacksLocked(Object action, Object token) {\n        CallbackRecord predecessor = null;\n        for (CallbackRecord callback = mHead; callback != null;) {\n            final CallbackRecord next = callback.next;\n            if ((action == null || callback.action == action)\n                    && (token == null || callback.token == token)) {\n                if (predecessor != null) {\n                    predecessor.next = next;\n                } else {\n                    mHead = next;\n                }\n                recycleCallbackLocked(callback);\n            } else {\n                predecessor = callback;\n            }\n            callback = next;\n        }\n    }\n}\n```\nCallbackQueue and CallbackRecord\n\n``` Java\nprivate void postCallbackDelayedInternal(int callbackType,\n            Object action, Object token, long delayMillis) {\n    if (DEBUG_FRAMES) {\n        Log.d(TAG, \"PostCallback: type=\" + callbackType\n                + \", action=\" + action + \", token=\" + token\n                + \", delayMillis=\" + delayMillis);\n    }\n\n    synchronized (mLock) {\n        final long now = SystemClock.uptimeMillis();\n        final long dueTime = now + delayMillis;\n        mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);\n\n        if (dueTime <= now) {\n            scheduleFrameLocked(now);\n        } else {\n            Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);\n            msg.arg1 = callbackType;\n            msg.setAsynchronous(true);\n            mHandler.sendMessageAtTime(msg, dueTime);\n        }\n    }\n}\n```\npostCallbackDelayedInternal\n可以看到这里我们把我们的绘制内容扔到队列里，等待轮训。\n\n``` Java\nprivate final class FrameDisplayEventReceiver extends DisplayEventReceiver\n            implements Runnable {\n    private boolean mHavePendingVsync;\n    private long mTimestampNanos;\n    private int mFrame;\n\n    public FrameDisplayEventReceiver(Looper looper) {\n        super(looper);\n    }\n\n    @Override\n    public void onVsync(long timestampNanos, int builtInDisplayId, int frame) {\n        // Ignore vsync from secondary display.\n        // This can be problematic because the call to scheduleVsync() is a one-shot.\n        // We need to ensure that we will still receive the vsync from the primary\n        // display which is the one we really care about.  Ideally we should schedule\n        // vsync for a particular display.\n        // At this time Surface Flinger won't send us vsyncs for secondary displays\n        // but that could change in the future so let's log a message to help us remember\n        // that we need to fix this.\n        if (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) {\n            Log.d(TAG, \"Received vsync from secondary display, but we don't support \"\n                    + \"this case yet.  Choreographer needs a way to explicitly request \"\n                    + \"vsync for a specific display to ensure it doesn't lose track \"\n                    + \"of its scheduled vsync.\");\n            scheduleVsync();\n            return;\n        }\n\n        // Post the vsync event to the Handler.\n        // The idea is to prevent incoming vsync events from completely starving\n        // the message queue.  If there are no messages in the queue with timestamps\n        // earlier than the frame time, then the vsync event will be processed immediately.\n        // Otherwise, messages that predate the vsync event will be handled first.\n        long now = System.nanoTime();\n        if (timestampNanos > now) {\n            Log.w(TAG, \"Frame time is \" + ((timestampNanos - now) * 0.000001f)\n                    + \" ms in the future!  Check that graphics HAL is generating vsync \"\n                    + \"timestamps using the correct timebase.\");\n            timestampNanos = now;\n        }\n\n        if (mHavePendingVsync) {\n            Log.w(TAG, \"Already have a pending vsync event.  There should only be \"\n                    + \"one at a time.\");\n        } else {\n            mHavePendingVsync = true;\n        }\n\n        mTimestampNanos = timestampNanos;\n        mFrame = frame;\n        Message msg = Message.obtain(mHandler, this);\n        msg.setAsynchronous(true);\n        mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);\n    }\n\n    @Override\n    public void run() {\n        mHavePendingVsync = false;\n        doFrame(mTimestampNanos, mFrame);\n    }\n}\n```\nFrameDisplayEventReceiver\n接收时钟脉冲信号的广播，16ms一次，我们的目的就是在这个时钟脉冲里搞定整个 view\n\n### Android 动画\n\nAnimator，ScrollTo，offsetLeftAndRight，这里面我们先单列这几项，都是同一个原理。这里我们可以大胆的猜想，一定是频繁执行我们的 Choreographer.CallBack 来绘制，因为只要在16ms内绘制成功，那就是流畅的动画。下面我们验证一下\n\nScrollTo:\n\n我们先看一下 View 中这个方法\n\n``` Java\npublic void scrollTo(int x, int y) {\n    if (mScrollX != x || mScrollY != y) {\n        int oldX = mScrollX;\n        int oldY = mScrollY;\n        mScrollX = x;\n        mScrollY = y;\n        invalidateParentCaches();\n        onScrollChanged(mScrollX, mScrollY, oldX, oldY);\n        if (!awakenScrollBars()) {\n            postInvalidateOnAnimation();\n        }\n    }\n}\n```\nscrollTo\n很简单，我们都可以看懂，开始位置，结束位置，这里我们重点关注 postInvalidateOnAnimation()  这个方法\n\n``` Java\npublic void postInvalidateOnAnimation() {\n    // We try only with the AttachInfo because there's no point in invalidating\n    // if we are not attached to our window\n    final AttachInfo attachInfo = mAttachInfo;\n    if (attachInfo != null) {\n        attachInfo.mViewRootImpl.dispatchInvalidateOnAnimation(this);\n    }\n}\n```\npostInvalidateOnAnimation\n我们可以看到，这里的动画过程绘制他还是扔到了ViewRootImpl 代理做这件事。\n\n``` Java\npublic void dispatchInvalidateRectOnAnimation(AttachInfo.InvalidateInfo info) {\n    mInvalidateOnAnimationRunnable.addViewRect(info);\n}\n```\ndispatchInvalidateOnAnimation\n这里我们看到他开了个线程 mInvalidateOnAnimationRunnable 去添加我们这个将要绘制的 view，接下来我们继续庖丁解牛\n\n``` Java\nfinal class InvalidateOnAnimationRunnable implements Runnable {\n    private boolean mPosted;\n    private final ArrayList<View> mViews = new ArrayList<View>();\n    private final ArrayList<AttachInfo.InvalidateInfo> mViewRects =\n            new ArrayList<AttachInfo.InvalidateInfo>();\n    private View[] mTempViews;\n    private AttachInfo.InvalidateInfo[] mTempViewRects;\n\n    public void addView(View view) {\n        synchronized (this) {\n            mViews.add(view);\n            postIfNeededLocked();\n        }\n    }\n\n    public void addViewRect(AttachInfo.InvalidateInfo info) {\n        synchronized (this) {\n            mViewRects.add(info);\n            postIfNeededLocked();\n        }\n    }\n\n    public void removeView(View view) {\n        synchronized (this) {\n            mViews.remove(view);\n\n            for (int i = mViewRects.size(); i-- > 0; ) {\n                AttachInfo.InvalidateInfo info = mViewRects.get(i);\n                if (info.target == view) {\n                    mViewRects.remove(i);\n                    info.recycle();\n                }\n            }\n\n            if (mPosted && mViews.isEmpty() && mViewRects.isEmpty()) {\n                mChoreographer.removeCallbacks(Choreographer.CALLBACK_ANIMATION, this, null);\n                mPosted = false;\n            }\n        }\n    }\n\n    @Override\n    public void run() {\n        final int viewCount;\n        final int viewRectCount;\n        synchronized (this) {\n            mPosted = false;\n\n            viewCount = mViews.size();\n            if (viewCount != 0) {\n                mTempViews = mViews.toArray(mTempViews != null\n                        ? mTempViews : new View[viewCount]);\n                mViews.clear();\n            }\n\n            viewRectCount = mViewRects.size();\n            if (viewRectCount != 0) {\n                mTempViewRects = mViewRects.toArray(mTempViewRects != null\n                        ? mTempViewRects : new AttachInfo.InvalidateInfo[viewRectCount]);\n                mViewRects.clear();\n            }\n        }\n\n        for (int i = 0; i < viewCount; i++) {\n            mTempViews[i].invalidate();\n            mTempViews[i] = null;\n        }\n\n        for (int i = 0; i < viewRectCount; i++) {\n            final View.AttachInfo.InvalidateInfo info = mTempViewRects[i];\n            info.target.invalidate(info.left, info.top, info.right, info.bottom);\n            info.recycle();\n        }\n    }\n\n    private void postIfNeededLocked() {\n        if (!mPosted) {\n            mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, this, null);\n            mPosted = true;\n        }\n    }\n}\n```\nInvalidateOnAnimationRunnable\n终于，应了我们的猜想，ViewRootImpl 有一个专门执行动画绘制操作的线程，我们可以看到 run() 里面不断地CallBack，然后回收，当然里面有些线程锁啥的不涉及本文就不细说了。\n\n### ValueAnimator：\n\n这里我们有个 AnimationHandler 来执行动画操作，这其中我们可以看到\n\n``` Java\nfor (int i = 0; i < numAnims; ++i) {\n    ValueAnimator anim = mTmpAnimations.get(i);\n    if (mAnimations.contains(anim) && anim.doAnimationFrame(frameTime)) {\n        mEndingAnims.add(anim);\n    }\n}\nmTmpAnimations.clear();\n```\ndoAnimationFrame\n这里在不断循环我们所有的anim，并在不断执行 scheduleAnimation 方法\n\n``` Java\nprivate void scheduleAnimation() {\n    if (!mAnimationScheduled) {\n        mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, mAnimate, null);\n        mAnimationScheduled = true;\n    }\n}\n```\nscheduleAnimation\n剩下的大家自己翻阅源码把。\n\n这里总结一下。我们所有界面上视图的变化都是都是 ViewRootImpl 把需要重绘的东西填充 Choreographer 中的 mCallbackQueues 队列，然后在时钟脉冲的广播下进行轮训执行。\n\n既然提到队列，假如我们在16ms内大量的填充 AttachInfo 之类的绘制OBJ，就会导致无法再一次时钟脉冲内绘制完毕，就会在造成丢帧，UI阻塞。\n\n避免 Android UI 卡顿解决办法\n\n解决办法：分析了好多，这里说两个方法。\n\n1.避免重绘，这里避免图层（View）迭代。这里我们可以去开发者模式中对“显示GPU视图更新”打钩\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-cade3554a7db68ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n过度绘制\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-eb07b0f9a442d6f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n优化以后\n这里引用 http://hukai.me/android-performance-render 这篇博客的作者，盗个图。😂\n\n这里可以进行，选择制定画布绘制，而不是整个view去绘制。可以在onDraw中进行限制，去限制绘制区域，例如\n\ncanvas.clipRect(100,100,350,600, Region.Op.INTERSECT);\n\n2.扁平化布局，归根结底也是减少 mCallbackQueues 队列大小。保证尽量在16ms内绘制完毕，再有就是可以减少视图 ViewTree 的高度，减少时间复杂度，从而优化计算过程\n\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-4c8e729db92f694a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nxml代码\n\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-0dbcc3353bd36d2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n优化后的xml代码\n＊附：\n\n\n![Alt text](http://upload-images.jianshu.io/upload_images/2710533-5ddc05554c24d6d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n绘制层级\n通过打开刚才说的开发者选项，来根据颜色来判断页面绘制情况。\n\n距离回家还有8 个小时，17年希望可以发觉更多的东西给大家，并且希望大家可以积极指出文章中的错误。祝大家新年快乐！😄","slug":"Android 丢帧原理以及办法","published":1,"updated":"2021-06-28T14:28:31.664Z","layout":"post","photos":[],"link":"","_id":"ckqgq9v5e00055y8dmzs6v4dv","content":"<h2 id=\"接近年底，想分享点儿东西给大家。\"><a href=\"#接近年底，想分享点儿东西给大家。\" class=\"headerlink\" title=\"接近年底，想分享点儿东西给大家。\"></a>接近年底，想分享点儿东西给大家。</h2><h2 id=\"Android-UI绘制过程\"><a href=\"#Android-UI绘制过程\" class=\"headerlink\" title=\"Android UI绘制过程\"></a>Android UI绘制过程</h2><p>开发中的卡顿我想没跟人都遇到过，之前也是搜博客看看怎么个解决办法，没有认真研究过，今天我打算跟大家聊一聊。</p>\n<p>先从View 说吧。相信大家应该都知道View的绘制过程，measure，layout，draw。丢帧一定是在16ms内没有把这些事儿干完就对了，这里我们简单的分一下，主要是计算时间，以及绘图时间。</p>\n<a id=\"more\"></a>\n<p>计算时间：这里的measure，layout的过程，都是会向下递归计算的，学过数据结构的话，应该知道，深搜的代价是很大的。所以尽量让树的高度降低，这里就引出扁平化布局。</p>\n<p>绘图时间：这里需要着重讲一下，因为有时候这才是我们UI卡顿的主要原因。在这里我们要把android的试图看成是三维的，就像photoshop的图层一样。android在绘制的时候就会一层一层的“粉刷”，好了，那么造成卡顿，也就是丢帧，说白了最后没有在16ms内做完。好了，让我们剖析一下：</p>\n<h3 id=\"invalidate-：\"><a href=\"#invalidate-：\" class=\"headerlink\" title=\"invalidate()：\"></a>invalidate()：</h3><p>我们知道invalidate 是用来请求View 重绘的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Propagate the damage rectangle to the parent view.</span></div><div class=\"line\"><span class=\"keyword\">final</span> AttachInfo ai = mAttachInfo;</div><div class=\"line\"><span class=\"keyword\">final</span> ViewParent p = mParent;</div><div class=\"line\"><span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; ai != <span class=\"keyword\">null</span> &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Rect damage = ai.mTmpInvalRect;</div><div class=\"line\">    damage.set(l, t, r, b);</div><div class=\"line\">    p.invalidateChild(<span class=\"keyword\">this</span>, damage);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>invalidateInternal<br>这里可以看出来draw的过程其实就是拿到AttachInfo 里面包含着绘制信息，以及将绘制区域拿到，通过parent去绘制。让我们跟进去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewParent <span class=\"title\">invalidateChildInParent</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] location, <span class=\"keyword\">final</span> Rect dirty)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_DRAWN) == PFLAG_DRAWN ||</div><div class=\"line\">            (mPrivateFlags &amp; PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((mGroupFlags &amp; (FLAG_OPTIMIZE_INVALIDATE | FLAG_ANIMATION_DONE)) !=</div><div class=\"line\">                    FLAG_OPTIMIZE_INVALIDATE) &#123;</div><div class=\"line\">            dirty.offset(location[CHILD_LEFT_INDEX] - mScrollX,</div><div class=\"line\">                    location[CHILD_TOP_INDEX] - mScrollY);</div><div class=\"line\">            <span class=\"keyword\">if</span> ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                dirty.union(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mRight - mLeft, mBottom - mTop);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> left = mLeft;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top = mTop;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!dirty.intersect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mRight - left, mBottom - top)) &#123;</div><div class=\"line\">                    dirty.setEmpty();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</div><div class=\"line\"></div><div class=\"line\">            location[CHILD_LEFT_INDEX] = left;</div><div class=\"line\">            location[CHILD_TOP_INDEX] = top;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (mLayerType != LAYER_TYPE_NONE) &#123;</div><div class=\"line\">                mPrivateFlags |= PFLAG_INVALIDATED;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> mParent;</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mPrivateFlags &amp;= ~PFLAG_DRAWN &amp; ~PFLAG_DRAWING_CACHE_VALID;</div><div class=\"line\"></div><div class=\"line\">            location[CHILD_LEFT_INDEX] = mLeft;</div><div class=\"line\">            location[CHILD_TOP_INDEX] = mTop;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) &#123;</div><div class=\"line\">                dirty.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mRight - mLeft, mBottom - mTop);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// in case the dirty rect extends outside the bounds of this container</span></div><div class=\"line\">                dirty.union(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mRight - mLeft, mBottom - mTop);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (mLayerType != LAYER_TYPE_NONE) &#123;</div><div class=\"line\">                mPrivateFlags |= PFLAG_INVALIDATED;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> mParent;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>invalidateChildInParent<br>这里的dirty代表你绘制的这块区域是否透明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">invalidate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mDirty.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mWidth, mHeight);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mWillDrawSoon) &#123;</div><div class=\"line\">        scheduleTraversals();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>invalidate<br>这里我们看到了个关键函数 scheduleTraversals ，为什么说神奇。我们看一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</div><div class=\"line\">        mTraversalScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</div><div class=\"line\">        mChoreographer.postCallback(</div><div class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mUnbufferedInputDispatch) &#123;</div><div class=\"line\">            scheduleConsumeBatchedInput();</div><div class=\"line\">        &#125;</div><div class=\"line\">        notifyRendererOfFramePending();</div><div class=\"line\">        pokeDrawLockIfNeeded();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>scheduleTraversals<br>这里最重要的是Choreographer 这个，我们最终算出来的绘制信息都要通过它回调，开始他会注册一个广播用来接收时钟信息，然后他会在内部建立一个UI绘制队列：CallbackQueue，我们在外部CallBack的时候，会将我们的绘制信息作为CallbackRecord 然后会在接收到一个时钟信号的时候进行doFrame操作，并打印Traces信息，从而来绘制一帧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallbackRecord</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> CallbackRecord next;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> dueTime;</div><div class=\"line\">    <span class=\"keyword\">public</span> Object action; <span class=\"comment\">// Runnable or FrameCallback</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Object token;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(<span class=\"keyword\">long</span> frameTimeNanos)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (token == FRAME_CALLBACK_TOKEN) &#123;</div><div class=\"line\">            ((FrameCallback)action).doFrame(frameTimeNanos);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ((Runnable)action).run();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallbackQueue</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> CallbackRecord mHead;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasDueCallbacksLocked</span><span class=\"params\">(<span class=\"keyword\">long</span> now)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mHead != <span class=\"keyword\">null</span> &amp;&amp; mHead.dueTime &lt;= now;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CallbackRecord <span class=\"title\">extractDueCallbacksLocked</span><span class=\"params\">(<span class=\"keyword\">long</span> now)</span> </span>&#123;</div><div class=\"line\">        CallbackRecord callbacks = mHead;</div><div class=\"line\">        <span class=\"keyword\">if</span> (callbacks == <span class=\"keyword\">null</span> || callbacks.dueTime &gt; now) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        CallbackRecord last = callbacks;</div><div class=\"line\">        CallbackRecord next = last.next;</div><div class=\"line\">        <span class=\"keyword\">while</span> (next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (next.dueTime &gt; now) &#123;</div><div class=\"line\">                last.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            last = next;</div><div class=\"line\">            next = next.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mHead = next;</div><div class=\"line\">        <span class=\"keyword\">return</span> callbacks;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCallbackLocked</span><span class=\"params\">(<span class=\"keyword\">long</span> dueTime, Object action, Object token)</span> </span>&#123;</div><div class=\"line\">        CallbackRecord callback = obtainCallbackLocked(dueTime, action, token);</div><div class=\"line\">        CallbackRecord entry = mHead;</div><div class=\"line\">        <span class=\"keyword\">if</span> (entry == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mHead = callback;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dueTime &lt; entry.dueTime) &#123;</div><div class=\"line\">            callback.next = entry;</div><div class=\"line\">            mHead = callback;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span> (entry.next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dueTime &lt; entry.next.dueTime) &#123;</div><div class=\"line\">                callback.next = entry.next;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            entry = entry.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        entry.next = callback;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeCallbacksLocked</span><span class=\"params\">(Object action, Object token)</span> </span>&#123;</div><div class=\"line\">        CallbackRecord predecessor = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (CallbackRecord callback = mHead; callback != <span class=\"keyword\">null</span>;) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> CallbackRecord next = callback.next;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((action == <span class=\"keyword\">null</span> || callback.action == action)</div><div class=\"line\">                    &amp;&amp; (token == <span class=\"keyword\">null</span> || callback.token == token)) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (predecessor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    predecessor.next = next;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mHead = next;</div><div class=\"line\">                &#125;</div><div class=\"line\">                recycleCallbackLocked(callback);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                predecessor = callback;</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>CallbackQueue and CallbackRecord</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallbackDelayedInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType,</span></span></div><div class=\"line\">            Object action, Object token, <span class=\"keyword\">long</span> delayMillis) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_FRAMES) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"PostCallback: type=\"</span> + callbackType</div><div class=\"line\">                + <span class=\"string\">\", action=\"</span> + action + <span class=\"string\">\", token=\"</span> + token</div><div class=\"line\">                + <span class=\"string\">\", delayMillis=\"</span> + delayMillis);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> dueTime = now + delayMillis;</div><div class=\"line\">        mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (dueTime &lt;= now) &#123;</div><div class=\"line\">            scheduleFrameLocked(now);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</div><div class=\"line\">            msg.arg1 = callbackType;</div><div class=\"line\">            msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mHandler.sendMessageAtTime(msg, dueTime);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>postCallbackDelayedInternal<br>可以看到这里我们把我们的绘制内容扔到队列里，等待轮训。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrameDisplayEventReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">DisplayEventReceiver</span></span></div><div class=\"line\">            <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mHavePendingVsync;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> mTimestampNanos;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mFrame;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FrameDisplayEventReceiver</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> builtInDisplayId, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Ignore vsync from secondary display.</span></div><div class=\"line\">        <span class=\"comment\">// This can be problematic because the call to scheduleVsync() is a one-shot.</span></div><div class=\"line\">        <span class=\"comment\">// We need to ensure that we will still receive the vsync from the primary</span></div><div class=\"line\">        <span class=\"comment\">// display which is the one we really care about.  Ideally we should schedule</span></div><div class=\"line\">        <span class=\"comment\">// vsync for a particular display.</span></div><div class=\"line\">        <span class=\"comment\">// At this time Surface Flinger won't send us vsyncs for secondary displays</span></div><div class=\"line\">        <span class=\"comment\">// but that could change in the future so let's log a message to help us remember</span></div><div class=\"line\">        <span class=\"comment\">// that we need to fix this.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Received vsync from secondary display, but we don't support \"</span></div><div class=\"line\">                    + <span class=\"string\">\"this case yet.  Choreographer needs a way to explicitly request \"</span></div><div class=\"line\">                    + <span class=\"string\">\"vsync for a specific display to ensure it doesn't lose track \"</span></div><div class=\"line\">                    + <span class=\"string\">\"of its scheduled vsync.\"</span>);</div><div class=\"line\">            scheduleVsync();</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Post the vsync event to the Handler.</span></div><div class=\"line\">        <span class=\"comment\">// The idea is to prevent incoming vsync events from completely starving</span></div><div class=\"line\">        <span class=\"comment\">// the message queue.  If there are no messages in the queue with timestamps</span></div><div class=\"line\">        <span class=\"comment\">// earlier than the frame time, then the vsync event will be processed immediately.</span></div><div class=\"line\">        <span class=\"comment\">// Otherwise, messages that predate the vsync event will be handled first.</span></div><div class=\"line\">        <span class=\"keyword\">long</span> now = System.nanoTime();</div><div class=\"line\">        <span class=\"keyword\">if</span> (timestampNanos &gt; now) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"Frame time is \"</span> + ((timestampNanos - now) * <span class=\"number\">0.000001f</span>)</div><div class=\"line\">                    + <span class=\"string\">\" ms in the future!  Check that graphics HAL is generating vsync \"</span></div><div class=\"line\">                    + <span class=\"string\">\"timestamps using the correct timebase.\"</span>);</div><div class=\"line\">            timestampNanos = now;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mHavePendingVsync) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"Already have a pending vsync event.  There should only be \"</span></div><div class=\"line\">                    + <span class=\"string\">\"one at a time.\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mHavePendingVsync = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mTimestampNanos = timestampNanos;</div><div class=\"line\">        mFrame = frame;</div><div class=\"line\">        Message msg = Message.obtain(mHandler, <span class=\"keyword\">this</span>);</div><div class=\"line\">        msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mHavePendingVsync = <span class=\"keyword\">false</span>;</div><div class=\"line\">        doFrame(mTimestampNanos, mFrame);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>FrameDisplayEventReceiver<br>接收时钟脉冲信号的广播，16ms一次，我们的目的就是在这个时钟脉冲里搞定整个 view</p>\n<h3 id=\"Android-动画\"><a href=\"#Android-动画\" class=\"headerlink\" title=\"Android 动画\"></a>Android 动画</h3><p>Animator，ScrollTo，offsetLeftAndRight，这里面我们先单列这几项，都是同一个原理。这里我们可以大胆的猜想，一定是频繁执行我们的 Choreographer.CallBack 来绘制，因为只要在16ms内绘制成功，那就是流畅的动画。下面我们验证一下</p>\n<p>ScrollTo:</p>\n<p>我们先看一下 View 中这个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">        mScrollX = x;</div><div class=\"line\">        mScrollY = y;</div><div class=\"line\">        invalidateParentCaches();</div><div class=\"line\">        onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">            postInvalidateOnAnimation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>scrollTo<br>很简单，我们都可以看懂，开始位置，结束位置，这里我们重点关注 postInvalidateOnAnimation()  这个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postInvalidateOnAnimation</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// We try only with the AttachInfo because there's no point in invalidating</span></div><div class=\"line\">    <span class=\"comment\">// if we are not attached to our window</span></div><div class=\"line\">    <span class=\"keyword\">final</span> AttachInfo attachInfo = mAttachInfo;</div><div class=\"line\">    <span class=\"keyword\">if</span> (attachInfo != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        attachInfo.mViewRootImpl.dispatchInvalidateOnAnimation(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>postInvalidateOnAnimation<br>我们可以看到，这里的动画过程绘制他还是扔到了ViewRootImpl 代理做这件事。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchInvalidateRectOnAnimation</span><span class=\"params\">(AttachInfo.InvalidateInfo info)</span> </span>&#123;</div><div class=\"line\">    mInvalidateOnAnimationRunnable.addViewRect(info);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dispatchInvalidateOnAnimation<br>这里我们看到他开了个线程 mInvalidateOnAnimationRunnable 去添加我们这个将要绘制的 view，接下来我们继续庖丁解牛</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvalidateOnAnimationRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mPosted;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;View&gt; mViews = <span class=\"keyword\">new</span> ArrayList&lt;View&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;AttachInfo.InvalidateInfo&gt; mViewRects =</div><div class=\"line\">            <span class=\"keyword\">new</span> ArrayList&lt;AttachInfo.InvalidateInfo&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> View[] mTempViews;</div><div class=\"line\">    <span class=\"keyword\">private</span> AttachInfo.InvalidateInfo[] mTempViewRects;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            mViews.add(view);</div><div class=\"line\">            postIfNeededLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewRect</span><span class=\"params\">(AttachInfo.InvalidateInfo info)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            mViewRects.add(info);</div><div class=\"line\">            postIfNeededLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            mViews.remove(view);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = mViewRects.size(); i-- &gt; <span class=\"number\">0</span>; ) &#123;</div><div class=\"line\">                AttachInfo.InvalidateInfo info = mViewRects.get(i);</div><div class=\"line\">                <span class=\"keyword\">if</span> (info.target == view) &#123;</div><div class=\"line\">                    mViewRects.remove(i);</div><div class=\"line\">                    info.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (mPosted &amp;&amp; mViews.isEmpty() &amp;&amp; mViewRects.isEmpty()) &#123;</div><div class=\"line\">                mChoreographer.removeCallbacks(Choreographer.CALLBACK_ANIMATION, <span class=\"keyword\">this</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">                mPosted = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewCount;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewRectCount;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            mPosted = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">            viewCount = mViews.size();</div><div class=\"line\">            <span class=\"keyword\">if</span> (viewCount != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                mTempViews = mViews.toArray(mTempViews != <span class=\"keyword\">null</span></div><div class=\"line\">                        ? mTempViews : <span class=\"keyword\">new</span> View[viewCount]);</div><div class=\"line\">                mViews.clear();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            viewRectCount = mViewRects.size();</div><div class=\"line\">            <span class=\"keyword\">if</span> (viewRectCount != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                mTempViewRects = mViewRects.toArray(mTempViewRects != <span class=\"keyword\">null</span></div><div class=\"line\">                        ? mTempViewRects : <span class=\"keyword\">new</span> AttachInfo.InvalidateInfo[viewRectCount]);</div><div class=\"line\">                mViewRects.clear();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; viewCount; i++) &#123;</div><div class=\"line\">            mTempViews[i].invalidate();</div><div class=\"line\">            mTempViews[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; viewRectCount; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View.AttachInfo.InvalidateInfo info = mTempViewRects[i];</div><div class=\"line\">            info.target.invalidate(info.left, info.top, info.right, info.bottom);</div><div class=\"line\">            info.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postIfNeededLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mPosted) &#123;</div><div class=\"line\">            mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, <span class=\"keyword\">this</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            mPosted = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>InvalidateOnAnimationRunnable<br>终于，应了我们的猜想，ViewRootImpl 有一个专门执行动画绘制操作的线程，我们可以看到 run() 里面不断地CallBack，然后回收，当然里面有些线程锁啥的不涉及本文就不细说了。</p>\n<h3 id=\"ValueAnimator：\"><a href=\"#ValueAnimator：\" class=\"headerlink\" title=\"ValueAnimator：\"></a>ValueAnimator：</h3><p>这里我们有个 AnimationHandler 来执行动画操作，这其中我们可以看到</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numAnims; ++i) &#123;</div><div class=\"line\">    ValueAnimator anim = mTmpAnimations.get(i);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mAnimations.contains(anim) &amp;&amp; anim.doAnimationFrame(frameTime)) &#123;</div><div class=\"line\">        mEndingAnims.add(anim);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">mTmpAnimations.clear();</div></pre></td></tr></table></figure>\n<p>doAnimationFrame<br>这里在不断循环我们所有的anim，并在不断执行 scheduleAnimation 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleAnimation</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mAnimationScheduled) &#123;</div><div class=\"line\">        mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, mAnimate, <span class=\"keyword\">null</span>);</div><div class=\"line\">        mAnimationScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>scheduleAnimation<br>剩下的大家自己翻阅源码把。</p>\n<p>这里总结一下。我们所有界面上视图的变化都是都是 ViewRootImpl 把需要重绘的东西填充 Choreographer 中的 mCallbackQueues 队列，然后在时钟脉冲的广播下进行轮训执行。</p>\n<p>既然提到队列，假如我们在16ms内大量的填充 AttachInfo 之类的绘制OBJ，就会导致无法再一次时钟脉冲内绘制完毕，就会在造成丢帧，UI阻塞。</p>\n<p>避免 Android UI 卡顿解决办法</p>\n<p>解决办法：分析了好多，这里说两个方法。</p>\n<p>1.避免重绘，这里避免图层（View）迭代。这里我们可以去开发者模式中对“显示GPU视图更新”打钩</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-cade3554a7db68ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>过度绘制</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-eb07b0f9a442d6f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>优化以后<br>这里引用 <a href=\"http://hukai.me/android-performance-render\" target=\"_blank\" rel=\"external\">http://hukai.me/android-performance-render</a> 这篇博客的作者，盗个图。😂</p>\n<p>这里可以进行，选择制定画布绘制，而不是整个view去绘制。可以在onDraw中进行限制，去限制绘制区域，例如</p>\n<p>canvas.clipRect(100,100,350,600, Region.Op.INTERSECT);</p>\n<p>2.扁平化布局，归根结底也是减少 mCallbackQueues 队列大小。保证尽量在16ms内绘制完毕，再有就是可以减少视图 ViewTree 的高度，减少时间复杂度，从而优化计算过程</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-4c8e729db92f694a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>xml代码</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-0dbcc3353bd36d2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>优化后的xml代码<br>＊附：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-5ddc05554c24d6d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>绘制层级<br>通过打开刚才说的开发者选项，来根据颜色来判断页面绘制情况。</p>\n<p>距离回家还有8 个小时，17年希望可以发觉更多的东西给大家，并且希望大家可以积极指出文章中的错误。祝大家新年快乐！😄</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"接近年底，想分享点儿东西给大家。\"><a href=\"#接近年底，想分享点儿东西给大家。\" class=\"headerlink\" title=\"接近年底，想分享点儿东西给大家。\"></a>接近年底，想分享点儿东西给大家。</h2><h2 id=\"Android-UI绘制过程\"><a href=\"#Android-UI绘制过程\" class=\"headerlink\" title=\"Android UI绘制过程\"></a>Android UI绘制过程</h2><p>开发中的卡顿我想没跟人都遇到过，之前也是搜博客看看怎么个解决办法，没有认真研究过，今天我打算跟大家聊一聊。</p>\n<p>先从View 说吧。相信大家应该都知道View的绘制过程，measure，layout，draw。丢帧一定是在16ms内没有把这些事儿干完就对了，这里我们简单的分一下，主要是计算时间，以及绘图时间。</p>","more":"<p>计算时间：这里的measure，layout的过程，都是会向下递归计算的，学过数据结构的话，应该知道，深搜的代价是很大的。所以尽量让树的高度降低，这里就引出扁平化布局。</p>\n<p>绘图时间：这里需要着重讲一下，因为有时候这才是我们UI卡顿的主要原因。在这里我们要把android的试图看成是三维的，就像photoshop的图层一样。android在绘制的时候就会一层一层的“粉刷”，好了，那么造成卡顿，也就是丢帧，说白了最后没有在16ms内做完。好了，让我们剖析一下：</p>\n<h3 id=\"invalidate-：\"><a href=\"#invalidate-：\" class=\"headerlink\" title=\"invalidate()：\"></a>invalidate()：</h3><p>我们知道invalidate 是用来请求View 重绘的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Propagate the damage rectangle to the parent view.</span></div><div class=\"line\"><span class=\"keyword\">final</span> AttachInfo ai = mAttachInfo;</div><div class=\"line\"><span class=\"keyword\">final</span> ViewParent p = mParent;</div><div class=\"line\"><span class=\"keyword\">if</span> (p != <span class=\"keyword\">null</span> &amp;&amp; ai != <span class=\"keyword\">null</span> &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</div><div class=\"line\">    <span class=\"keyword\">final</span> Rect damage = ai.mTmpInvalRect;</div><div class=\"line\">    damage.set(l, t, r, b);</div><div class=\"line\">    p.invalidateChild(<span class=\"keyword\">this</span>, damage);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>invalidateInternal<br>这里可以看出来draw的过程其实就是拿到AttachInfo 里面包含着绘制信息，以及将绘制区域拿到，通过parent去绘制。让我们跟进去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ViewParent <span class=\"title\">invalidateChildInParent</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span>[] location, <span class=\"keyword\">final</span> Rect dirty)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_DRAWN) == PFLAG_DRAWN ||</div><div class=\"line\">            (mPrivateFlags &amp; PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> ((mGroupFlags &amp; (FLAG_OPTIMIZE_INVALIDATE | FLAG_ANIMATION_DONE)) !=</div><div class=\"line\">                    FLAG_OPTIMIZE_INVALIDATE) &#123;</div><div class=\"line\">            dirty.offset(location[CHILD_LEFT_INDEX] - mScrollX,</div><div class=\"line\">                    location[CHILD_TOP_INDEX] - mScrollY);</div><div class=\"line\">            <span class=\"keyword\">if</span> ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                dirty.union(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mRight - mLeft, mBottom - mTop);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> left = mLeft;</div><div class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> top = mTop;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!dirty.intersect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mRight - left, mBottom - top)) &#123;</div><div class=\"line\">                    dirty.setEmpty();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</div><div class=\"line\"></div><div class=\"line\">            location[CHILD_LEFT_INDEX] = left;</div><div class=\"line\">            location[CHILD_TOP_INDEX] = top;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (mLayerType != LAYER_TYPE_NONE) &#123;</div><div class=\"line\">                mPrivateFlags |= PFLAG_INVALIDATED;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> mParent;</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mPrivateFlags &amp;= ~PFLAG_DRAWN &amp; ~PFLAG_DRAWING_CACHE_VALID;</div><div class=\"line\"></div><div class=\"line\">            location[CHILD_LEFT_INDEX] = mLeft;</div><div class=\"line\">            location[CHILD_TOP_INDEX] = mTop;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((mGroupFlags &amp; FLAG_CLIP_CHILDREN) == FLAG_CLIP_CHILDREN) &#123;</div><div class=\"line\">                dirty.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mRight - mLeft, mBottom - mTop);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">// in case the dirty rect extends outside the bounds of this container</span></div><div class=\"line\">                dirty.union(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mRight - mLeft, mBottom - mTop);</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (mLayerType != LAYER_TYPE_NONE) &#123;</div><div class=\"line\">                mPrivateFlags |= PFLAG_INVALIDATED;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">return</span> mParent;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>invalidateChildInParent<br>这里的dirty代表你绘制的这块区域是否透明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">invalidate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mDirty.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, mWidth, mHeight);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mWillDrawSoon) &#123;</div><div class=\"line\">        scheduleTraversals();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>invalidate<br>这里我们看到了个关键函数 scheduleTraversals ，为什么说神奇。我们看一下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">scheduleTraversals</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mTraversalScheduled) &#123;</div><div class=\"line\">        mTraversalScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">        mTraversalBarrier = mHandler.getLooper().getQueue().postSyncBarrier();</div><div class=\"line\">        mChoreographer.postCallback(</div><div class=\"line\">                Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mUnbufferedInputDispatch) &#123;</div><div class=\"line\">            scheduleConsumeBatchedInput();</div><div class=\"line\">        &#125;</div><div class=\"line\">        notifyRendererOfFramePending();</div><div class=\"line\">        pokeDrawLockIfNeeded();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>scheduleTraversals<br>这里最重要的是Choreographer 这个，我们最终算出来的绘制信息都要通过它回调，开始他会注册一个广播用来接收时钟信息，然后他会在内部建立一个UI绘制队列：CallbackQueue，我们在外部CallBack的时候，会将我们的绘制信息作为CallbackRecord 然后会在接收到一个时钟信号的时候进行doFrame操作，并打印Traces信息，从而来绘制一帧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallbackRecord</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> CallbackRecord next;</div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> dueTime;</div><div class=\"line\">    <span class=\"keyword\">public</span> Object action; <span class=\"comment\">// Runnable or FrameCallback</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Object token;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">(<span class=\"keyword\">long</span> frameTimeNanos)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (token == FRAME_CALLBACK_TOKEN) &#123;</div><div class=\"line\">            ((FrameCallback)action).doFrame(frameTimeNanos);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            ((Runnable)action).run();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallbackQueue</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> CallbackRecord mHead;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">hasDueCallbacksLocked</span><span class=\"params\">(<span class=\"keyword\">long</span> now)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mHead != <span class=\"keyword\">null</span> &amp;&amp; mHead.dueTime &lt;= now;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> CallbackRecord <span class=\"title\">extractDueCallbacksLocked</span><span class=\"params\">(<span class=\"keyword\">long</span> now)</span> </span>&#123;</div><div class=\"line\">        CallbackRecord callbacks = mHead;</div><div class=\"line\">        <span class=\"keyword\">if</span> (callbacks == <span class=\"keyword\">null</span> || callbacks.dueTime &gt; now) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        CallbackRecord last = callbacks;</div><div class=\"line\">        CallbackRecord next = last.next;</div><div class=\"line\">        <span class=\"keyword\">while</span> (next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (next.dueTime &gt; now) &#123;</div><div class=\"line\">                last.next = <span class=\"keyword\">null</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            last = next;</div><div class=\"line\">            next = next.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        mHead = next;</div><div class=\"line\">        <span class=\"keyword\">return</span> callbacks;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addCallbackLocked</span><span class=\"params\">(<span class=\"keyword\">long</span> dueTime, Object action, Object token)</span> </span>&#123;</div><div class=\"line\">        CallbackRecord callback = obtainCallbackLocked(dueTime, action, token);</div><div class=\"line\">        CallbackRecord entry = mHead;</div><div class=\"line\">        <span class=\"keyword\">if</span> (entry == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mHead = callback;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (dueTime &lt; entry.dueTime) &#123;</div><div class=\"line\">            callback.next = entry;</div><div class=\"line\">            mHead = callback;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">while</span> (entry.next != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (dueTime &lt; entry.next.dueTime) &#123;</div><div class=\"line\">                callback.next = entry.next;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            entry = entry.next;</div><div class=\"line\">        &#125;</div><div class=\"line\">        entry.next = callback;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeCallbacksLocked</span><span class=\"params\">(Object action, Object token)</span> </span>&#123;</div><div class=\"line\">        CallbackRecord predecessor = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (CallbackRecord callback = mHead; callback != <span class=\"keyword\">null</span>;) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> CallbackRecord next = callback.next;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((action == <span class=\"keyword\">null</span> || callback.action == action)</div><div class=\"line\">                    &amp;&amp; (token == <span class=\"keyword\">null</span> || callback.token == token)) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (predecessor != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    predecessor.next = next;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    mHead = next;</div><div class=\"line\">                &#125;</div><div class=\"line\">                recycleCallbackLocked(callback);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                predecessor = callback;</div><div class=\"line\">            &#125;</div><div class=\"line\">            callback = next;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>CallbackQueue and CallbackRecord</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postCallbackDelayedInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> callbackType,</span></span></div><div class=\"line\">            Object action, Object token, <span class=\"keyword\">long</span> delayMillis) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (DEBUG_FRAMES) &#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"PostCallback: type=\"</span> + callbackType</div><div class=\"line\">                + <span class=\"string\">\", action=\"</span> + action + <span class=\"string\">\", token=\"</span> + token</div><div class=\"line\">                + <span class=\"string\">\", delayMillis=\"</span> + delayMillis);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (mLock) &#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> now = SystemClock.uptimeMillis();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> dueTime = now + delayMillis;</div><div class=\"line\">        mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (dueTime &lt;= now) &#123;</div><div class=\"line\">            scheduleFrameLocked(now);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</div><div class=\"line\">            msg.arg1 = callbackType;</div><div class=\"line\">            msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mHandler.sendMessageAtTime(msg, dueTime);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>postCallbackDelayedInternal<br>可以看到这里我们把我们的绘制内容扔到队列里，等待轮训。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrameDisplayEventReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">DisplayEventReceiver</span></span></div><div class=\"line\">            <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mHavePendingVsync;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> mTimestampNanos;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mFrame;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FrameDisplayEventReceiver</span><span class=\"params\">(Looper looper)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(looper);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onVsync</span><span class=\"params\">(<span class=\"keyword\">long</span> timestampNanos, <span class=\"keyword\">int</span> builtInDisplayId, <span class=\"keyword\">int</span> frame)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Ignore vsync from secondary display.</span></div><div class=\"line\">        <span class=\"comment\">// This can be problematic because the call to scheduleVsync() is a one-shot.</span></div><div class=\"line\">        <span class=\"comment\">// We need to ensure that we will still receive the vsync from the primary</span></div><div class=\"line\">        <span class=\"comment\">// display which is the one we really care about.  Ideally we should schedule</span></div><div class=\"line\">        <span class=\"comment\">// vsync for a particular display.</span></div><div class=\"line\">        <span class=\"comment\">// At this time Surface Flinger won't send us vsyncs for secondary displays</span></div><div class=\"line\">        <span class=\"comment\">// but that could change in the future so let's log a message to help us remember</span></div><div class=\"line\">        <span class=\"comment\">// that we need to fix this.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (builtInDisplayId != SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"Received vsync from secondary display, but we don't support \"</span></div><div class=\"line\">                    + <span class=\"string\">\"this case yet.  Choreographer needs a way to explicitly request \"</span></div><div class=\"line\">                    + <span class=\"string\">\"vsync for a specific display to ensure it doesn't lose track \"</span></div><div class=\"line\">                    + <span class=\"string\">\"of its scheduled vsync.\"</span>);</div><div class=\"line\">            scheduleVsync();</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Post the vsync event to the Handler.</span></div><div class=\"line\">        <span class=\"comment\">// The idea is to prevent incoming vsync events from completely starving</span></div><div class=\"line\">        <span class=\"comment\">// the message queue.  If there are no messages in the queue with timestamps</span></div><div class=\"line\">        <span class=\"comment\">// earlier than the frame time, then the vsync event will be processed immediately.</span></div><div class=\"line\">        <span class=\"comment\">// Otherwise, messages that predate the vsync event will be handled first.</span></div><div class=\"line\">        <span class=\"keyword\">long</span> now = System.nanoTime();</div><div class=\"line\">        <span class=\"keyword\">if</span> (timestampNanos &gt; now) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"Frame time is \"</span> + ((timestampNanos - now) * <span class=\"number\">0.000001f</span>)</div><div class=\"line\">                    + <span class=\"string\">\" ms in the future!  Check that graphics HAL is generating vsync \"</span></div><div class=\"line\">                    + <span class=\"string\">\"timestamps using the correct timebase.\"</span>);</div><div class=\"line\">            timestampNanos = now;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (mHavePendingVsync) &#123;</div><div class=\"line\">            Log.w(TAG, <span class=\"string\">\"Already have a pending vsync event.  There should only be \"</span></div><div class=\"line\">                    + <span class=\"string\">\"one at a time.\"</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            mHavePendingVsync = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mTimestampNanos = timestampNanos;</div><div class=\"line\">        mFrame = frame;</div><div class=\"line\">        Message msg = Message.obtain(mHandler, <span class=\"keyword\">this</span>);</div><div class=\"line\">        msg.setAsynchronous(<span class=\"keyword\">true</span>);</div><div class=\"line\">        mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mHavePendingVsync = <span class=\"keyword\">false</span>;</div><div class=\"line\">        doFrame(mTimestampNanos, mFrame);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>FrameDisplayEventReceiver<br>接收时钟脉冲信号的广播，16ms一次，我们的目的就是在这个时钟脉冲里搞定整个 view</p>\n<h3 id=\"Android-动画\"><a href=\"#Android-动画\" class=\"headerlink\" title=\"Android 动画\"></a>Android 动画</h3><p>Animator，ScrollTo，offsetLeftAndRight，这里面我们先单列这几项，都是同一个原理。这里我们可以大胆的猜想，一定是频繁执行我们的 Choreographer.CallBack 来绘制，因为只要在16ms内绘制成功，那就是流畅的动画。下面我们验证一下</p>\n<p>ScrollTo:</p>\n<p>我们先看一下 View 中这个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mScrollX != x || mScrollY != y) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldX = mScrollX;</div><div class=\"line\">        <span class=\"keyword\">int</span> oldY = mScrollY;</div><div class=\"line\">        mScrollX = x;</div><div class=\"line\">        mScrollY = y;</div><div class=\"line\">        invalidateParentCaches();</div><div class=\"line\">        onScrollChanged(mScrollX, mScrollY, oldX, oldY);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!awakenScrollBars()) &#123;</div><div class=\"line\">            postInvalidateOnAnimation();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>scrollTo<br>很简单，我们都可以看懂，开始位置，结束位置，这里我们重点关注 postInvalidateOnAnimation()  这个方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postInvalidateOnAnimation</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// We try only with the AttachInfo because there's no point in invalidating</span></div><div class=\"line\">    <span class=\"comment\">// if we are not attached to our window</span></div><div class=\"line\">    <span class=\"keyword\">final</span> AttachInfo attachInfo = mAttachInfo;</div><div class=\"line\">    <span class=\"keyword\">if</span> (attachInfo != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">        attachInfo.mViewRootImpl.dispatchInvalidateOnAnimation(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>postInvalidateOnAnimation<br>我们可以看到，这里的动画过程绘制他还是扔到了ViewRootImpl 代理做这件事。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchInvalidateRectOnAnimation</span><span class=\"params\">(AttachInfo.InvalidateInfo info)</span> </span>&#123;</div><div class=\"line\">    mInvalidateOnAnimationRunnable.addViewRect(info);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>dispatchInvalidateOnAnimation<br>这里我们看到他开了个线程 mInvalidateOnAnimationRunnable 去添加我们这个将要绘制的 view，接下来我们继续庖丁解牛</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InvalidateOnAnimationRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mPosted;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;View&gt; mViews = <span class=\"keyword\">new</span> ArrayList&lt;View&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;AttachInfo.InvalidateInfo&gt; mViewRects =</div><div class=\"line\">            <span class=\"keyword\">new</span> ArrayList&lt;AttachInfo.InvalidateInfo&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> View[] mTempViews;</div><div class=\"line\">    <span class=\"keyword\">private</span> AttachInfo.InvalidateInfo[] mTempViewRects;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            mViews.add(view);</div><div class=\"line\">            postIfNeededLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addViewRect</span><span class=\"params\">(AttachInfo.InvalidateInfo info)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            mViewRects.add(info);</div><div class=\"line\">            postIfNeededLocked();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">removeView</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            mViews.remove(view);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = mViewRects.size(); i-- &gt; <span class=\"number\">0</span>; ) &#123;</div><div class=\"line\">                AttachInfo.InvalidateInfo info = mViewRects.get(i);</div><div class=\"line\">                <span class=\"keyword\">if</span> (info.target == view) &#123;</div><div class=\"line\">                    mViewRects.remove(i);</div><div class=\"line\">                    info.recycle();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">if</span> (mPosted &amp;&amp; mViews.isEmpty() &amp;&amp; mViewRects.isEmpty()) &#123;</div><div class=\"line\">                mChoreographer.removeCallbacks(Choreographer.CALLBACK_ANIMATION, <span class=\"keyword\">this</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">                mPosted = <span class=\"keyword\">false</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewCount;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> viewRectCount;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            mPosted = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">            viewCount = mViews.size();</div><div class=\"line\">            <span class=\"keyword\">if</span> (viewCount != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                mTempViews = mViews.toArray(mTempViews != <span class=\"keyword\">null</span></div><div class=\"line\">                        ? mTempViews : <span class=\"keyword\">new</span> View[viewCount]);</div><div class=\"line\">                mViews.clear();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            viewRectCount = mViewRects.size();</div><div class=\"line\">            <span class=\"keyword\">if</span> (viewRectCount != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                mTempViewRects = mViewRects.toArray(mTempViewRects != <span class=\"keyword\">null</span></div><div class=\"line\">                        ? mTempViewRects : <span class=\"keyword\">new</span> AttachInfo.InvalidateInfo[viewRectCount]);</div><div class=\"line\">                mViewRects.clear();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; viewCount; i++) &#123;</div><div class=\"line\">            mTempViews[i].invalidate();</div><div class=\"line\">            mTempViews[i] = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; viewRectCount; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View.AttachInfo.InvalidateInfo info = mTempViewRects[i];</div><div class=\"line\">            info.target.invalidate(info.left, info.top, info.right, info.bottom);</div><div class=\"line\">            info.recycle();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">postIfNeededLocked</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!mPosted) &#123;</div><div class=\"line\">            mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, <span class=\"keyword\">this</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">            mPosted = <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>InvalidateOnAnimationRunnable<br>终于，应了我们的猜想，ViewRootImpl 有一个专门执行动画绘制操作的线程，我们可以看到 run() 里面不断地CallBack，然后回收，当然里面有些线程锁啥的不涉及本文就不细说了。</p>\n<h3 id=\"ValueAnimator：\"><a href=\"#ValueAnimator：\" class=\"headerlink\" title=\"ValueAnimator：\"></a>ValueAnimator：</h3><p>这里我们有个 AnimationHandler 来执行动画操作，这其中我们可以看到</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numAnims; ++i) &#123;</div><div class=\"line\">    ValueAnimator anim = mTmpAnimations.get(i);</div><div class=\"line\">    <span class=\"keyword\">if</span> (mAnimations.contains(anim) &amp;&amp; anim.doAnimationFrame(frameTime)) &#123;</div><div class=\"line\">        mEndingAnims.add(anim);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">mTmpAnimations.clear();</div></pre></td></tr></table></figure>\n<p>doAnimationFrame<br>这里在不断循环我们所有的anim，并在不断执行 scheduleAnimation 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleAnimation</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!mAnimationScheduled) &#123;</div><div class=\"line\">        mChoreographer.postCallback(Choreographer.CALLBACK_ANIMATION, mAnimate, <span class=\"keyword\">null</span>);</div><div class=\"line\">        mAnimationScheduled = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>scheduleAnimation<br>剩下的大家自己翻阅源码把。</p>\n<p>这里总结一下。我们所有界面上视图的变化都是都是 ViewRootImpl 把需要重绘的东西填充 Choreographer 中的 mCallbackQueues 队列，然后在时钟脉冲的广播下进行轮训执行。</p>\n<p>既然提到队列，假如我们在16ms内大量的填充 AttachInfo 之类的绘制OBJ，就会导致无法再一次时钟脉冲内绘制完毕，就会在造成丢帧，UI阻塞。</p>\n<p>避免 Android UI 卡顿解决办法</p>\n<p>解决办法：分析了好多，这里说两个方法。</p>\n<p>1.避免重绘，这里避免图层（View）迭代。这里我们可以去开发者模式中对“显示GPU视图更新”打钩</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-cade3554a7db68ee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>过度绘制</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-eb07b0f9a442d6f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>优化以后<br>这里引用 <a href=\"http://hukai.me/android-performance-render\" target=\"_blank\" rel=\"external\">http://hukai.me/android-performance-render</a> 这篇博客的作者，盗个图。😂</p>\n<p>这里可以进行，选择制定画布绘制，而不是整个view去绘制。可以在onDraw中进行限制，去限制绘制区域，例如</p>\n<p>canvas.clipRect(100,100,350,600, Region.Op.INTERSECT);</p>\n<p>2.扁平化布局，归根结底也是减少 mCallbackQueues 队列大小。保证尽量在16ms内绘制完毕，再有就是可以减少视图 ViewTree 的高度，减少时间复杂度，从而优化计算过程</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-4c8e729db92f694a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>xml代码</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-0dbcc3353bd36d2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>优化后的xml代码<br>＊附：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2710533-5ddc05554c24d6d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Alt text\"></p>\n<p>绘制层级<br>通过打开刚才说的开发者选项，来根据颜色来判断页面绘制情况。</p>\n<p>距离回家还有8 个小时，17年希望可以发觉更多的东西给大家，并且希望大家可以积极指出文章中的错误。祝大家新年快乐！😄</p>"},{"title":"GreenDao 数据库升级数据迁移","date":"2017-04-22T03:53:56.000Z","comments":1,"_content":"\n## 前言\n最近需要解决GreenDao 在迭代升级数据库时需要做数据库迁移。经过查资料解决了，立个flag备忘。。\n\n## 问题切入点\n在GreenDao apt自动生成的DaoMaster代码\n<!--more-->\n\n``` Java\n/** WARNING: Drops all table on Upgrade! Use only during development. */\npublic static class DevOpenHelper extends OpenHelper {\n    public DevOpenHelper(Context context, String name, CursorFactory factory) {\n        super(context, name, factory);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        Log.i(\"greenDAO\", \"Upgrading schema from version \" + oldVersion + \" to \" + newVersion + \" by dropping all tables\");\n        dropAllTables(db, true);\n        onCreate(db);\n    }\n}\n```\nGreenDao 在根据数据库版本号升级的时候会执行DevOpenHelper的onUpgrade方法，我们依次看到dropAllTables，onCreate，先清除所有的数据表，然后重建，这样我们上一个版本是数据表里的老数据就被drop掉了。所以我们的切入点就是着这里。\n\n## 解决办法\n这里我们的基本思路是：\n1.对老的数据表重新命名，作为临时数据表\n2.建立新的数据表\n3.将临时数据表的所有数据迁移到新的数据表\n4.删除临时数据表\n这里我们统筹用MigrationHelper管理\n``` Java\npublic static void migrate(SQLiteDatabase db, Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    // 1 新建临时表\n    generateTempTables(db, daoClasses);\n    // 2 创建新表\n    createAllTables(db, false, daoClasses);\n    // 3 临时表数据写入新表，删除临时表\n    restoreData(db, daoClasses);\n}\n```\n### step.1\n将老的数据表重命名 **_TEMP\n``` Java\nprivate static void generateTempTables(SQLiteDatabase db, Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    for (int i = 0; i < daoClasses.length; i++) {\n        DaoConfig daoConfig = new DaoConfig(db, daoClasses[i]);\n        String tableName = daoConfig.tablename;\n        if (!checkTable(db, tableName))\n            continue;\n        String tempTableName = daoConfig.tablename.concat(\"_TEMP\");\n        StringBuilder insertTableStringBuilder = new StringBuilder();\n        insertTableStringBuilder.append(\"alter table \")\n                .append(tableName)\n                .append(\" rename to \")\n                .append(tempTableName)\n                .append(\";\");\n        db.execSQL(insertTableStringBuilder.toString());\n    }\n}\n\nprivate static boolean checkTable(SQLiteDatabase db, String tableName) {\n    StringBuilder query = new StringBuilder();\n    query.append(\"SELECT count(*) FROM sqlite_master WHERE type='table' AND name='\")\n            .append(tableName)\n            .append(\"'\");\n    Cursor c = db.rawQuery(query.toString(), null);\n    if (c.moveToNext()) {\n        int count = c.getInt(0);\n        if (count > 0) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}\n```\n这里从系统表 sqlite_master 里面查需要迁移数据的表是否存在\n### step.2\n``` Java\nprivate static void createAllTables(SQLiteDatabase db, boolean ifNotExits, @NonNull Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    reflectMethod(db, \"createTable\", ifNotExits, daoClasses);\n}\n\nprivate static void reflectMethod(SQLiteDatabase db, String methodName, boolean isExists, Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    if (daoClasses.length < 1) {\n        return;\n    }\n    try {\n        for (Class cls : daoClasses) {\n            Method method = cls.getDeclaredMethod(methodName, SQLiteDatabase.class, boolean.class);\n            method.invoke(null, db, isExists);\n        }\n    } catch (NoSuchMethodException e) {\n        e.printStackTrace();\n    } catch (InvocationTargetException e) {\n        e.printStackTrace();\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}\n```\n由于父类AbstractDao不存在createTable这个方法，而是在每个子类的***Dao实现了createTable这个方法，所以这里我们采用反射来获得这个方法，来做建立新的表结构操作。\n### step.3\n``` Java\nprivate static void restoreData(SQLiteDatabase db, Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    for (int i = 0; i < daoClasses.length; i++) {\n        DaoConfig daoConfig = new DaoConfig(db, daoClasses[i]);\n        String tableName = daoConfig.tablename;\n        String tempTableName = daoConfig.tablename.concat(\"_TEMP\");\n        if (!checkTable(db,tempTableName))\n            continue;\n        List<String> columns = getColumns(db, tempTableName);\n        ArrayList<String> properties = new ArrayList<>(columns.size());\n        for (int j = 0; j < daoConfig.properties.length; j++) {\n            String columnName = daoConfig.properties[j].columnName;\n            if (columns.contains(columnName)) {\n                properties.add(columnName);\n            }\n        }\n        if (properties.size() > 0) {\n            final String columnSQL = TextUtils.join(\",\", properties);\n            StringBuilder insertTableStringBuilder = new StringBuilder();\n            insertTableStringBuilder.append(\"INSERT INTO \")\n                    .append(tableName)\n                    .append(\" (\")\n                    .append(columnSQL)\n                    .append(\") SELECT \")\n                    .append(columnSQL)\n                    .append(\" FROM \")\n                    .append(tempTableName)\n                    .append(\";\");\n\n            db.execSQL(insertTableStringBuilder.toString());\n        }\n        StringBuilder dropTableStringBuilder = new StringBuilder();\n        dropTableStringBuilder.append(\"DROP TABLE \").append(tempTableName);\n        db.execSQL(dropTableStringBuilder.toString());\n    }\n}\n\nprivate static List<String> getColumns(SQLiteDatabase db, String tableName) {\n    List<String> columns = null;\n    Cursor cursor = null;\n    try {\n        cursor = db.rawQuery(\"SELECT * FROM \" + tableName + \" limit 0\", null);\n        if (null != cursor && cursor.getColumnCount() > 0) {\n            columns = Arrays.asList(cursor.getColumnNames());\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (cursor != null)\n            cursor.close();\n        if (null == columns)\n            columns = new ArrayList<>();\n    }\n    return columns;\n}\n```\n这里就是简单的从老表拿数据insert到新的表结构里面，这里可以根据具体项目来进行插入。","source":"_posts/GreenDao 数据库升级数据迁移.md","raw":"---\ntitle: GreenDao 数据库升级数据迁移\ndate: 2017-04-22 11:53:56\ntags: Android 第三方\ncomments: true\n---\n\n## 前言\n最近需要解决GreenDao 在迭代升级数据库时需要做数据库迁移。经过查资料解决了，立个flag备忘。。\n\n## 问题切入点\n在GreenDao apt自动生成的DaoMaster代码\n<!--more-->\n\n``` Java\n/** WARNING: Drops all table on Upgrade! Use only during development. */\npublic static class DevOpenHelper extends OpenHelper {\n    public DevOpenHelper(Context context, String name, CursorFactory factory) {\n        super(context, name, factory);\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        Log.i(\"greenDAO\", \"Upgrading schema from version \" + oldVersion + \" to \" + newVersion + \" by dropping all tables\");\n        dropAllTables(db, true);\n        onCreate(db);\n    }\n}\n```\nGreenDao 在根据数据库版本号升级的时候会执行DevOpenHelper的onUpgrade方法，我们依次看到dropAllTables，onCreate，先清除所有的数据表，然后重建，这样我们上一个版本是数据表里的老数据就被drop掉了。所以我们的切入点就是着这里。\n\n## 解决办法\n这里我们的基本思路是：\n1.对老的数据表重新命名，作为临时数据表\n2.建立新的数据表\n3.将临时数据表的所有数据迁移到新的数据表\n4.删除临时数据表\n这里我们统筹用MigrationHelper管理\n``` Java\npublic static void migrate(SQLiteDatabase db, Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    // 1 新建临时表\n    generateTempTables(db, daoClasses);\n    // 2 创建新表\n    createAllTables(db, false, daoClasses);\n    // 3 临时表数据写入新表，删除临时表\n    restoreData(db, daoClasses);\n}\n```\n### step.1\n将老的数据表重命名 **_TEMP\n``` Java\nprivate static void generateTempTables(SQLiteDatabase db, Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    for (int i = 0; i < daoClasses.length; i++) {\n        DaoConfig daoConfig = new DaoConfig(db, daoClasses[i]);\n        String tableName = daoConfig.tablename;\n        if (!checkTable(db, tableName))\n            continue;\n        String tempTableName = daoConfig.tablename.concat(\"_TEMP\");\n        StringBuilder insertTableStringBuilder = new StringBuilder();\n        insertTableStringBuilder.append(\"alter table \")\n                .append(tableName)\n                .append(\" rename to \")\n                .append(tempTableName)\n                .append(\";\");\n        db.execSQL(insertTableStringBuilder.toString());\n    }\n}\n\nprivate static boolean checkTable(SQLiteDatabase db, String tableName) {\n    StringBuilder query = new StringBuilder();\n    query.append(\"SELECT count(*) FROM sqlite_master WHERE type='table' AND name='\")\n            .append(tableName)\n            .append(\"'\");\n    Cursor c = db.rawQuery(query.toString(), null);\n    if (c.moveToNext()) {\n        int count = c.getInt(0);\n        if (count > 0) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n}\n```\n这里从系统表 sqlite_master 里面查需要迁移数据的表是否存在\n### step.2\n``` Java\nprivate static void createAllTables(SQLiteDatabase db, boolean ifNotExits, @NonNull Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    reflectMethod(db, \"createTable\", ifNotExits, daoClasses);\n}\n\nprivate static void reflectMethod(SQLiteDatabase db, String methodName, boolean isExists, Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    if (daoClasses.length < 1) {\n        return;\n    }\n    try {\n        for (Class cls : daoClasses) {\n            Method method = cls.getDeclaredMethod(methodName, SQLiteDatabase.class, boolean.class);\n            method.invoke(null, db, isExists);\n        }\n    } catch (NoSuchMethodException e) {\n        e.printStackTrace();\n    } catch (InvocationTargetException e) {\n        e.printStackTrace();\n    } catch (IllegalAccessException e) {\n        e.printStackTrace();\n    }\n}\n```\n由于父类AbstractDao不存在createTable这个方法，而是在每个子类的***Dao实现了createTable这个方法，所以这里我们采用反射来获得这个方法，来做建立新的表结构操作。\n### step.3\n``` Java\nprivate static void restoreData(SQLiteDatabase db, Class<? extends AbstractDao<?, ?>>... daoClasses) {\n    for (int i = 0; i < daoClasses.length; i++) {\n        DaoConfig daoConfig = new DaoConfig(db, daoClasses[i]);\n        String tableName = daoConfig.tablename;\n        String tempTableName = daoConfig.tablename.concat(\"_TEMP\");\n        if (!checkTable(db,tempTableName))\n            continue;\n        List<String> columns = getColumns(db, tempTableName);\n        ArrayList<String> properties = new ArrayList<>(columns.size());\n        for (int j = 0; j < daoConfig.properties.length; j++) {\n            String columnName = daoConfig.properties[j].columnName;\n            if (columns.contains(columnName)) {\n                properties.add(columnName);\n            }\n        }\n        if (properties.size() > 0) {\n            final String columnSQL = TextUtils.join(\",\", properties);\n            StringBuilder insertTableStringBuilder = new StringBuilder();\n            insertTableStringBuilder.append(\"INSERT INTO \")\n                    .append(tableName)\n                    .append(\" (\")\n                    .append(columnSQL)\n                    .append(\") SELECT \")\n                    .append(columnSQL)\n                    .append(\" FROM \")\n                    .append(tempTableName)\n                    .append(\";\");\n\n            db.execSQL(insertTableStringBuilder.toString());\n        }\n        StringBuilder dropTableStringBuilder = new StringBuilder();\n        dropTableStringBuilder.append(\"DROP TABLE \").append(tempTableName);\n        db.execSQL(dropTableStringBuilder.toString());\n    }\n}\n\nprivate static List<String> getColumns(SQLiteDatabase db, String tableName) {\n    List<String> columns = null;\n    Cursor cursor = null;\n    try {\n        cursor = db.rawQuery(\"SELECT * FROM \" + tableName + \" limit 0\", null);\n        if (null != cursor && cursor.getColumnCount() > 0) {\n            columns = Arrays.asList(cursor.getColumnNames());\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (cursor != null)\n            cursor.close();\n        if (null == columns)\n            columns = new ArrayList<>();\n    }\n    return columns;\n}\n```\n这里就是简单的从老表拿数据insert到新的表结构里面，这里可以根据具体项目来进行插入。","slug":"GreenDao 数据库升级数据迁移","published":1,"updated":"2021-06-28T14:28:31.664Z","layout":"post","photos":[],"link":"","_id":"ckqgq9v5f00065y8dym2ld2t1","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近需要解决GreenDao 在迭代升级数据库时需要做数据库迁移。经过查资料解决了，立个flag备忘。。</p>\n<h2 id=\"问题切入点\"><a href=\"#问题切入点\" class=\"headerlink\" title=\"问题切入点\"></a>问题切入点</h2><p>在GreenDao apt自动生成的DaoMaster代码<br><a id=\"more\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** WARNING: Drops all table on Upgrade! Use only during development. */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DevOpenHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">OpenHelper</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DevOpenHelper</span><span class=\"params\">(Context context, String name, CursorFactory factory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, name, factory);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">        Log.i(<span class=\"string\">\"greenDAO\"</span>, <span class=\"string\">\"Upgrading schema from version \"</span> + oldVersion + <span class=\"string\">\" to \"</span> + newVersion + <span class=\"string\">\" by dropping all tables\"</span>);</div><div class=\"line\">        dropAllTables(db, <span class=\"keyword\">true</span>);</div><div class=\"line\">        onCreate(db);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>GreenDao 在根据数据库版本号升级的时候会执行DevOpenHelper的onUpgrade方法，我们依次看到dropAllTables，onCreate，先清除所有的数据表，然后重建，这样我们上一个版本是数据表里的老数据就被drop掉了。所以我们的切入点就是着这里。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>这里我们的基本思路是：<br>1.对老的数据表重新命名，作为临时数据表<br>2.建立新的数据表<br>3.将临时数据表的所有数据迁移到新的数据表<br>4.删除临时数据表<br>这里我们统筹用MigrationHelper管理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">migrate</span><span class=\"params\">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1 新建临时表</span></div><div class=\"line\">    generateTempTables(db, daoClasses);</div><div class=\"line\">    <span class=\"comment\">// 2 创建新表</span></div><div class=\"line\">    createAllTables(db, <span class=\"keyword\">false</span>, daoClasses);</div><div class=\"line\">    <span class=\"comment\">// 3 临时表数据写入新表，删除临时表</span></div><div class=\"line\">    restoreData(db, daoClasses);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step.1\"></a>step.1</h3><p>将老的数据表重命名 **_TEMP<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generateTempTables</span><span class=\"params\">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; daoClasses.length; i++) &#123;</div><div class=\"line\">        DaoConfig daoConfig = <span class=\"keyword\">new</span> DaoConfig(db, daoClasses[i]);</div><div class=\"line\">        String tableName = daoConfig.tablename;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!checkTable(db, tableName))</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        String tempTableName = daoConfig.tablename.concat(<span class=\"string\">\"_TEMP\"</span>);</div><div class=\"line\">        StringBuilder insertTableStringBuilder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        insertTableStringBuilder.append(<span class=\"string\">\"alter table \"</span>)</div><div class=\"line\">                .append(tableName)</div><div class=\"line\">                .append(<span class=\"string\">\" rename to \"</span>)</div><div class=\"line\">                .append(tempTableName)</div><div class=\"line\">                .append(<span class=\"string\">\";\"</span>);</div><div class=\"line\">        db.execSQL(insertTableStringBuilder.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkTable</span><span class=\"params\">(SQLiteDatabase db, String tableName)</span> </span>&#123;</div><div class=\"line\">    StringBuilder query = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    query.append(<span class=\"string\">\"SELECT count(*) FROM sqlite_master WHERE type='table' AND name='\"</span>)</div><div class=\"line\">            .append(tableName)</div><div class=\"line\">            .append(<span class=\"string\">\"'\"</span>);</div><div class=\"line\">    Cursor c = db.rawQuery(query.toString(), <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (c.moveToNext()) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = c.getInt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里从系统表 sqlite_master 里面查需要迁移数据的表是否存在</p>\n<h3 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step.2\"></a>step.2</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createAllTables</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">boolean</span> ifNotExits, @NonNull Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    reflectMethod(db, <span class=\"string\">\"createTable\"</span>, ifNotExits, daoClasses);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reflectMethod</span><span class=\"params\">(SQLiteDatabase db, String methodName, <span class=\"keyword\">boolean</span> isExists, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (daoClasses.length &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Class cls : daoClasses) &#123;</div><div class=\"line\">            Method method = cls.getDeclaredMethod(methodName, SQLiteDatabase.class, <span class=\"keyword\">boolean</span>.class);</div><div class=\"line\">            method.invoke(<span class=\"keyword\">null</span>, db, isExists);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于父类AbstractDao不存在createTable这个方法，而是在每个子类的<em>*</em>Dao实现了createTable这个方法，所以这里我们采用反射来获得这个方法，来做建立新的表结构操作。</p>\n<h3 id=\"step-3\"><a href=\"#step-3\" class=\"headerlink\" title=\"step.3\"></a>step.3</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreData</span><span class=\"params\">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; daoClasses.length; i++) &#123;</div><div class=\"line\">        DaoConfig daoConfig = <span class=\"keyword\">new</span> DaoConfig(db, daoClasses[i]);</div><div class=\"line\">        String tableName = daoConfig.tablename;</div><div class=\"line\">        String tempTableName = daoConfig.tablename.concat(<span class=\"string\">\"_TEMP\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!checkTable(db,tempTableName))</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        List&lt;String&gt; columns = getColumns(db, tempTableName);</div><div class=\"line\">        ArrayList&lt;String&gt; properties = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(columns.size());</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; daoConfig.properties.length; j++) &#123;</div><div class=\"line\">            String columnName = daoConfig.properties[j].columnName;</div><div class=\"line\">            <span class=\"keyword\">if</span> (columns.contains(columnName)) &#123;</div><div class=\"line\">                properties.add(columnName);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (properties.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> String columnSQL = TextUtils.join(<span class=\"string\">\",\"</span>, properties);</div><div class=\"line\">            StringBuilder insertTableStringBuilder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">            insertTableStringBuilder.append(<span class=\"string\">\"INSERT INTO \"</span>)</div><div class=\"line\">                    .append(tableName)</div><div class=\"line\">                    .append(<span class=\"string\">\" (\"</span>)</div><div class=\"line\">                    .append(columnSQL)</div><div class=\"line\">                    .append(<span class=\"string\">\") SELECT \"</span>)</div><div class=\"line\">                    .append(columnSQL)</div><div class=\"line\">                    .append(<span class=\"string\">\" FROM \"</span>)</div><div class=\"line\">                    .append(tempTableName)</div><div class=\"line\">                    .append(<span class=\"string\">\";\"</span>);</div><div class=\"line\"></div><div class=\"line\">            db.execSQL(insertTableStringBuilder.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">        StringBuilder dropTableStringBuilder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        dropTableStringBuilder.append(<span class=\"string\">\"DROP TABLE \"</span>).append(tempTableName);</div><div class=\"line\">        db.execSQL(dropTableStringBuilder.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getColumns</span><span class=\"params\">(SQLiteDatabase db, String tableName)</span> </span>&#123;</div><div class=\"line\">    List&lt;String&gt; columns = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Cursor cursor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        cursor = db.rawQuery(<span class=\"string\">\"SELECT * FROM \"</span> + tableName + <span class=\"string\">\" limit 0\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cursor &amp;&amp; cursor.getColumnCount() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            columns = Arrays.asList(cursor.getColumnNames());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (cursor != <span class=\"keyword\">null</span>)</div><div class=\"line\">            cursor.close();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == columns)</div><div class=\"line\">            columns = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> columns;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里就是简单的从老表拿数据insert到新的表结构里面，这里可以根据具体项目来进行插入。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近需要解决GreenDao 在迭代升级数据库时需要做数据库迁移。经过查资料解决了，立个flag备忘。。</p>\n<h2 id=\"问题切入点\"><a href=\"#问题切入点\" class=\"headerlink\" title=\"问题切入点\"></a>问题切入点</h2><p>在GreenDao apt自动生成的DaoMaster代码<br>","more":"</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** WARNING: Drops all table on Upgrade! Use only during development. */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DevOpenHelper</span> <span class=\"keyword\">extends</span> <span class=\"title\">OpenHelper</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DevOpenHelper</span><span class=\"params\">(Context context, String name, CursorFactory factory)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, name, factory);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpgrade</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">int</span> oldVersion, <span class=\"keyword\">int</span> newVersion)</span> </span>&#123;</div><div class=\"line\">        Log.i(<span class=\"string\">\"greenDAO\"</span>, <span class=\"string\">\"Upgrading schema from version \"</span> + oldVersion + <span class=\"string\">\" to \"</span> + newVersion + <span class=\"string\">\" by dropping all tables\"</span>);</div><div class=\"line\">        dropAllTables(db, <span class=\"keyword\">true</span>);</div><div class=\"line\">        onCreate(db);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>GreenDao 在根据数据库版本号升级的时候会执行DevOpenHelper的onUpgrade方法，我们依次看到dropAllTables，onCreate，先清除所有的数据表，然后重建，这样我们上一个版本是数据表里的老数据就被drop掉了。所以我们的切入点就是着这里。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>这里我们的基本思路是：<br>1.对老的数据表重新命名，作为临时数据表<br>2.建立新的数据表<br>3.将临时数据表的所有数据迁移到新的数据表<br>4.删除临时数据表<br>这里我们统筹用MigrationHelper管理<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">migrate</span><span class=\"params\">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 1 新建临时表</span></div><div class=\"line\">    generateTempTables(db, daoClasses);</div><div class=\"line\">    <span class=\"comment\">// 2 创建新表</span></div><div class=\"line\">    createAllTables(db, <span class=\"keyword\">false</span>, daoClasses);</div><div class=\"line\">    <span class=\"comment\">// 3 临时表数据写入新表，删除临时表</span></div><div class=\"line\">    restoreData(db, daoClasses);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step.1\"></a>step.1</h3><p>将老的数据表重命名 **_TEMP<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generateTempTables</span><span class=\"params\">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; daoClasses.length; i++) &#123;</div><div class=\"line\">        DaoConfig daoConfig = <span class=\"keyword\">new</span> DaoConfig(db, daoClasses[i]);</div><div class=\"line\">        String tableName = daoConfig.tablename;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!checkTable(db, tableName))</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        String tempTableName = daoConfig.tablename.concat(<span class=\"string\">\"_TEMP\"</span>);</div><div class=\"line\">        StringBuilder insertTableStringBuilder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        insertTableStringBuilder.append(<span class=\"string\">\"alter table \"</span>)</div><div class=\"line\">                .append(tableName)</div><div class=\"line\">                .append(<span class=\"string\">\" rename to \"</span>)</div><div class=\"line\">                .append(tempTableName)</div><div class=\"line\">                .append(<span class=\"string\">\";\"</span>);</div><div class=\"line\">        db.execSQL(insertTableStringBuilder.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">checkTable</span><span class=\"params\">(SQLiteDatabase db, String tableName)</span> </span>&#123;</div><div class=\"line\">    StringBuilder query = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">    query.append(<span class=\"string\">\"SELECT count(*) FROM sqlite_master WHERE type='table' AND name='\"</span>)</div><div class=\"line\">            .append(tableName)</div><div class=\"line\">            .append(<span class=\"string\">\"'\"</span>);</div><div class=\"line\">    Cursor c = db.rawQuery(query.toString(), <span class=\"keyword\">null</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (c.moveToNext()) &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> count = c.getInt(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里从系统表 sqlite_master 里面查需要迁移数据的表是否存在</p>\n<h3 id=\"step-2\"><a href=\"#step-2\" class=\"headerlink\" title=\"step.2\"></a>step.2</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">createAllTables</span><span class=\"params\">(SQLiteDatabase db, <span class=\"keyword\">boolean</span> ifNotExits, @NonNull Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    reflectMethod(db, <span class=\"string\">\"createTable\"</span>, ifNotExits, daoClasses);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">reflectMethod</span><span class=\"params\">(SQLiteDatabase db, String methodName, <span class=\"keyword\">boolean</span> isExists, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (daoClasses.length &lt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Class cls : daoClasses) &#123;</div><div class=\"line\">            Method method = cls.getDeclaredMethod(methodName, SQLiteDatabase.class, <span class=\"keyword\">boolean</span>.class);</div><div class=\"line\">            method.invoke(<span class=\"keyword\">null</span>, db, isExists);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>由于父类AbstractDao不存在createTable这个方法，而是在每个子类的<em>*</em>Dao实现了createTable这个方法，所以这里我们采用反射来获得这个方法，来做建立新的表结构操作。</p>\n<h3 id=\"step-3\"><a href=\"#step-3\" class=\"headerlink\" title=\"step.3\"></a>step.3</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">restoreData</span><span class=\"params\">(SQLiteDatabase db, Class&lt;? extends AbstractDao&lt;?, ?&gt;&gt;... daoClasses)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; daoClasses.length; i++) &#123;</div><div class=\"line\">        DaoConfig daoConfig = <span class=\"keyword\">new</span> DaoConfig(db, daoClasses[i]);</div><div class=\"line\">        String tableName = daoConfig.tablename;</div><div class=\"line\">        String tempTableName = daoConfig.tablename.concat(<span class=\"string\">\"_TEMP\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!checkTable(db,tempTableName))</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        List&lt;String&gt; columns = getColumns(db, tempTableName);</div><div class=\"line\">        ArrayList&lt;String&gt; properties = <span class=\"keyword\">new</span> ArrayList&lt;&gt;(columns.size());</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; daoConfig.properties.length; j++) &#123;</div><div class=\"line\">            String columnName = daoConfig.properties[j].columnName;</div><div class=\"line\">            <span class=\"keyword\">if</span> (columns.contains(columnName)) &#123;</div><div class=\"line\">                properties.add(columnName);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (properties.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> String columnSQL = TextUtils.join(<span class=\"string\">\",\"</span>, properties);</div><div class=\"line\">            StringBuilder insertTableStringBuilder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">            insertTableStringBuilder.append(<span class=\"string\">\"INSERT INTO \"</span>)</div><div class=\"line\">                    .append(tableName)</div><div class=\"line\">                    .append(<span class=\"string\">\" (\"</span>)</div><div class=\"line\">                    .append(columnSQL)</div><div class=\"line\">                    .append(<span class=\"string\">\") SELECT \"</span>)</div><div class=\"line\">                    .append(columnSQL)</div><div class=\"line\">                    .append(<span class=\"string\">\" FROM \"</span>)</div><div class=\"line\">                    .append(tempTableName)</div><div class=\"line\">                    .append(<span class=\"string\">\";\"</span>);</div><div class=\"line\"></div><div class=\"line\">            db.execSQL(insertTableStringBuilder.toString());</div><div class=\"line\">        &#125;</div><div class=\"line\">        StringBuilder dropTableStringBuilder = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">        dropTableStringBuilder.append(<span class=\"string\">\"DROP TABLE \"</span>).append(tempTableName);</div><div class=\"line\">        db.execSQL(dropTableStringBuilder.toString());</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getColumns</span><span class=\"params\">(SQLiteDatabase db, String tableName)</span> </span>&#123;</div><div class=\"line\">    List&lt;String&gt; columns = <span class=\"keyword\">null</span>;</div><div class=\"line\">    Cursor cursor = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        cursor = db.rawQuery(<span class=\"string\">\"SELECT * FROM \"</span> + tableName + <span class=\"string\">\" limit 0\"</span>, <span class=\"keyword\">null</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cursor &amp;&amp; cursor.getColumnCount() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            columns = Arrays.asList(cursor.getColumnNames());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">        e.printStackTrace();</div><div class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (cursor != <span class=\"keyword\">null</span>)</div><div class=\"line\">            cursor.close();</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == columns)</div><div class=\"line\">            columns = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> columns;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这里就是简单的从老表拿数据insert到新的表结构里面，这里可以根据具体项目来进行插入。</p>"},{"title":"NestTouchScrollingLayout 无缝拖拽的 Layout","date":"2018-12-05T15:16:00.000Z","comments":1,"_content":"\n## 前言\n今年年初接触回答页面改版，由之前的左右滑动回答改为上下滑动回答，由于当时回答页的代码太过于庞大，所以第一次改版复用了之前的 UI 框架，外层 ViewPager + Fragment，\b内层是 WebView 嵌套 Hybrid 页面。\n\n问题出现了，WebView 可以滚动的时候，会持有整个 Touch 事件流程，导致当 webView 拖拽到底部，手指不脱离屏幕继续拖拽的时候，无法将当前的拖拽操作给翻页器，\b产生体验上的割裂感。\n\n接下来就是 UI 交互优化的历程\n<!--more-->\n## 调研\n### 1.NestedScrolling:\nSupport V4 提供了一套 API 来支持嵌入的滑动效果。NestedScrolling 提供了一套父 View 和子 View 滑动交互机制。要完成这样的交互，父 View 需要实现 NestedScrollingParent 接口，而子 View 需要实现 NestedScrollingChild 接口。\n\n作为一个可以嵌入 NestedScrollingChild 的父 View，需要实现 NestedScrollingParent，这个接口方法和 NestedScrollingChild 大致有一一对应的关系。同样，也有一个 NestedScrollingParentHelper 辅助类来默默的帮助你实现和 Child 交互的逻辑。滑动动作是 Child 主动发起，Parent 就收滑动回调并作出响应。\n\n从上面的 Child 分析可知，滑动开始的调用 startNestedScroll()，Parent 收到 onStartNestedScroll() 回调，决定是否需要配合 Child 一起进行处理滑动，如果需要配合，还会回调 onNestedScrollAccepted()。\n\n每次滑动前，Child 先询问 Parent 是否需要滑动，即 dispatchNestedPreScroll()，这就回调到 Parent 的 onNestedPreScroll()，Parent 可以在这个回调中“劫持”掉 Child 的滑动，也就是先于 Child 滑动。\n\nChild 滑动以后，会调用 onNestedScroll()，回调到 Parent 的 onNestedScroll()，这里就是 Child 滑动后，剩下的给 Parent 处理，也就是 后于 Child 滑动。\n\n最后，滑动结束，调用 onStopNestedScroll() 表示本次处理结束。\n\b\n这个方案其实很不错，但最后被 pass 了，因为由于工程的原因，我们的 webview 是被包裹起来的，不可以任意去继承 NestedScrollingChild 并做定制修改。\n\n\n### 2.自定义 ViewGroup\n\n其实目前的问题是当子 View scroll 到顶部或者底部的时候，无法将 Touch 事件流交还给父布局。\n因此这里我采用的思路是通过我的 ViewGroup 去统一 dispatchTouchEvent 给我的子 View，条件就是，假如子 View 可以滚动，我就会构造一套完整的 touch 时间流分发给他。否则我会自己消化。\n\n## \b解决方案\n### step 1:\n通过第二种方式的思路，我们第一步需要在我的 ViewGroup 拦截所有的 Touch 事件。所以...\n``` java\n@Override\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n    if (isParentDispatchTouchEvent) {\n        return true;\n    } else {\n        return super.onInterceptTouchEvent(ev);\n    }\n}\n```\n上来我们就拦截出所有的 Touch 事件。\n\n### step2:\n开始在 ViewGroup 的 onTouchEvent 处理所有相关的 Event。\n``` java\n// 1.初始记录 Touch 坐标\nint mDownY = event.getY();\nint deltaY = 0;\n\n// 2.默认子 View 持有事件流起始点 isHoldTouch = true,通过 isChildCanScroll 来判别当前子 View 是否可以滚动。\nif (isHoldTouch && !isChildCanScroll(event, deltaY) && deltaY != 0) {\n    // 3.假如子 View 不可以滚动，当前 ViewGroup 需要阻断 Touch 的下发，为了遵循 Touch \b事件流的\b规范，当被外部阻断时，需要\b对其下发 ACTION_CANEL。同时 isHoldTouch = false。\n    isHoldTouch = false;\n    MotionEvent cancelEvent = MotionEvent.obtain(event);\n    cancelEvent.setAction(MotionEvent.ACTION_CANCEL);\n    getChildAt(0).dispatchTouchEvent(cancelEvent);\n    cancelEvent.recycle();\n}\n\n// 5.假如当我们在 ViewGroup 滚动过程中，滑动到了子 View 可滚动的状态，这时候会将 ViewGroup 调整至滚动初始位置，然后对子 View 做一个 ACTION_DOWN 的操作，从而开始陆续分发子 View Touch 事件。同时 isHoldTouch = true。\nif (!isHoldTouch && isChildCanScroll(event, deltaY) && deltaY != 0) {\n    setSheetTranslation(maxSheetTranslation);\n    isHoldTouch = true;\n    if (event.getAction() == MotionEvent.ACTION_MOVE) {\n        MotionEvent downEvent = MotionEvent.obtain(event);\n        downEvent.setAction(MotionEvent.ACTION_DOWN);\n        getChildAt(0).dispatchTouchEvent(downEvent);\n        downEvent.recycle();\n    }\n}\n\nif (isHoldTouch && deltaY != 0) {\n    // 6.当前判断子 View 已经处于可分发 Touch 状态，会陆续将 ACTION_MOVE 分发给他。从而实现子 View 的滚动。\n    event.offsetLocation(0, mSheetTranslation - mTouchParentViewOriginMeasureHeight);\n    getChildAt(0).dispatchTouchEvent(event);\n} else {\n    // 4.当上面阻断完 Touch 的下发以后，这里我们开始自己消化 Touch 事件，也就是这里会做一个 TranslationY 修改，从而达到 ViewGroup \b做 Y轴方向的偏移.\n    setSheetTranslation(newSheetTranslation);\n\n    if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {\n        // 7.为了将这个结束事件后面分发给子 View\n        isHoldTouch = true;\n    }\n}\n```\n### step3:\b\b\n判断子 View 是否可以滚动\n``` java\n /**\n    * child can scroll\n    * @param view\n    * @param x\n    * @param y\n    * @param lockRect 是否开启 允许 touch 脱离当前子 View 区域继续生效。\n    * @return\n    */\nprotected boolean canScrollUp(View view, float x, float y, boolean lockRect) {\n\n    if (view instanceof WebView) {\n        return canWebViewScrollUp();\n    }\n    if (view instanceof ViewGroup) {\n        ViewGroup vg = (ViewGroup) view;\n        for (int i = 0; i < vg.getChildCount(); i++) {\n            View child = vg.getChildAt(i);\n            int childLeft = child.getLeft() - view.getScrollX();\n            int childTop = child.getTop() - view.getScrollY();\n            int childRight = child.getRight() - view.getScrollX();\n            int childBottom = child.getBottom() - view.getScrollY();\n            boolean intersects = x > childLeft && x < childRight && y > childTop && y < childBottom;\n            if ((!lockRect || intersects)\n                    && canScrollUp(child, x - childLeft, y - childTop, lockRect)) {\n                return true;\n            }\n        }\n    }\n\n    if (view instanceof CoordinatorLayout &&\n            ((CoordinatorLayout) view).getChildCount() > 0 &&\n            ((CoordinatorLayout) view).getChildAt(0) instanceof AppBarLayout) {\n        AppBarLayout layout = (AppBarLayout) ((CoordinatorLayout) view).getChildAt(0);\n        OnNestOffsetChangedListener listener = mOnOffsetChangedListener.get(layout.hashCode());\n        if (listener != null) {\n            if (listener.getOffsetY() < layout.getMeasuredHeight() && listener.getOffsetY() > 0) {\n                return true;\n            }\n        }\n    }\n\n    return view.canScrollVertically(-1);\n}\n\n/**\n    * child can scroll\n    * @param view\n    * @param x\n    * @param y\n    * @param lockRect 是否开启 允许 touch 脱离当前子 View 区域继续生效。\n    * @return\n    */\nprotected boolean canScrollDown(View view, float x, float y, boolean lockRect) {\n    if (view instanceof WebView) {\n        return canWebViewScrollDown();\n    }\n    if (view instanceof ViewGroup) {\n        ViewGroup vg = (ViewGroup) view;\n        for (int i = 0; i < vg.getChildCount(); i++) {\n            View child = vg.getChildAt(i);\n            int childLeft = child.getLeft() - view.getScrollX();\n            int childTop = child.getTop() - view.getScrollY();\n            int childRight = child.getRight() - view.getScrollX();\n            int childBottom = child.getBottom() - view.getScrollY();\n            boolean intersects = x > childLeft && x < childRight && y > childTop && y < childBottom;\n            if ((!lockRect || intersects)\n                    && canScrollDown(child, x - childLeft, y - childTop, lockRect)) {\n                return true;\n            }\n        }\n    }\n\n    if (view instanceof CoordinatorLayout &&\n            ((CoordinatorLayout) view).getChildCount() > 0 &&\n            ((CoordinatorLayout) view).getChildAt(0) instanceof AppBarLayout) {\n        AppBarLayout layout = (AppBarLayout) ((CoordinatorLayout) view).getChildAt(0);\n        OnNestOffsetChangedListener listener = mOnOffsetChangedListener.get(layout.hashCode());\n        if (listener != null) {\n            if (listener.getOffsetY() < layout.getMeasuredHeight() && listener.getOffsetY() > 0) {\n                return true;\n            }\n        }\n    }\n\n    return view.canScrollVertically(1);\n}\n```\n这部分核心在于递归查询当前 \bMotionEvent \b\b当前坐标下的所有子 View 有没有可以滚动的 View，从而根据 view.canScrollVertically 来进行判断。\n\n## 优势\n1.\b支持绝大多数的 View \b嵌套滚动。\n2.成本低，只需要在你想要嵌套滚动的 View 上面包一层这个 Layout。\n\n## 功能\n1.支持嵌套滚动，无缝拖拽\n2.支持 BottomSheet (使用方法详见下方)\n3.支持 Appbarlayout\n3.支持拖拽阻尼 (使用方法详见下方)\n\n\n## 效果\n\n|![demo1](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo1.gif?raw=true)|![demo2](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo2.gif?raw=true)|\n|-----------|:-----------:|\n|normal|webview|\n|![demo3](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo3.gif?raw=true)|![demo4](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo4.gif?raw=true)|\n|bottomsheet normal|bottomsheet appbarlayout|\n|![demo8](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo8.gif?raw=true)|![demo9](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo9.gif?raw=true)|\n|view recyclerview|webview recyclerview|\n|![demo6](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo6.gif?raw=true)||\n|question||\n\n\n### Usage example\n\n#### normal use\n``` XML\n<jarvis.com.library.NestedTouchScrollingLayout\n    android:id=\"@+id/wrapper\"\n    android:layout_gravity=\"center\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/container_rv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"400dp\"\n        android:background=\"#fff\"\n        android:overScrollMode=\"always\">\n    </android.support.v7.widget.RecyclerView>\n\n</jarvis.com.library.NestedTouchScrollingLayout>\n```\n\n``` Java\n// 设置手指下拉阻尼\nmNestedTouchScrollingLayout.setDampingDown(2.0f / 5);\n// 设置手指上拉阻尼\nmNestedTouchScrollingLayout.setDampingUp(3.0f / 5);\n\nmNestedTouchScrollingLayout.registerNestScrollChildCallback(new NestedTouchScrollingLayout.INestChildScrollChange() {\n        \n        // 当前 Layout 偏移距离\n\t@Override\n\tpublic void onNestChildScrollChange(float deltaY, float velocityY) {\n\n\t}\n\t\n\t// finger 脱离屏幕 Layout 偏移量，以及当前 Layout 的速度\n\t@Override\n\tpublic void onNestChildScrollRelease(final float deltaY, final int velocityY) {\n\t\tmNestedTouchScrollingLayout.recover(0, new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tLog.i(\"NestedTouchScrollingLayout ---> \", \"deltaY : \" + deltaY + \" velocityY : \" + velocityY);\n\t\t\t}\n\t\t});\n\t}\n\t// 手指抬起时机\n\t@Override\n\tpublic void onFingerUp(float velocityY) {\n\n\t}\n\n\t// 横向拖拽\n\t@Override\n\tpublic void onNestChildHorizationScroll(MotionEvent event, float deltaX, float deltaY) {\n\t\n\t}\n});\n```\n#### bottomsheet use\n``` xml\n <jarvis.com.library.NestedTouchScrollingLayout\n\tandroid:id=\"@+id/wrapper\"\n\tandroid:layout_marginTop=\"30dp\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\">\n\n\t<android.support.v7.widget.RecyclerView\n\t\tandroid:background=\"#fff\"\n\t\tandroid:id=\"@+id/container_rv\"\n\t\tandroid:layout_width=\"match_parent\"\n\t\tandroid:layout_height=\"match_parent\" />\n\n</jarvis.com.library.NestedTouchScrollingLayout>\n```\n``` java\n// 临界速度，根据业务而定\npublic static int mVelocityYBound = 1300;\n\n// 规定 sheetView 弹起方向\nmNestedTouchScrollingLayout.setSheetDirection(NestedTouchScrollingLayout.SheetDirection.BOTTOM);\n\nmNestedTouchScrollingLayout.registerNestScrollChildCallback(new NestedTouchScrollingLayout.INestChildScrollChange() {\n\t@Override\n\tpublic void onNestChildScrollChange(float deltaY) {\n\n\t}\n\n\t@Override\n\tpublic void onNestChildScrollRelease(final float deltaY, final int velocityY) {\n\t\tint totalYRange = mNestedTouchScrollingLayout.getMeasuredHeight();\n\t\tint helfLimit = (totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.this, 400)) / 2;\n\t\tint hideLimit = totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.this, 400) / 2;\n\t\tint helfHeight = totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.this, 400);\n\t\tif (velocityY > mVelocityYBound && velocityY > 0) {\n\t\t\tif (Math.abs(deltaY) > helfHeight) {\n\t\t\t\tmNestedTouchScrollingLayout.hiden();\n\t\t\t} else {\n\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.this,400));\n\t\t\t}\n\t\t} else if (velocityY < -mVelocityYBound && velocityY < 0) {\n\t\t\tif (Math.abs(deltaY) < helfHeight) {\n\t\t\t\tmNestedTouchScrollingLayout.expand();\n\t\t\t} else {\n\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.this,400));\n\t\t\t}\n\t\t} else {\n\t\t\tif (Math.abs(deltaY) > hideLimit) {\n\t\t\t\tmNestedTouchScrollingLayout.hiden();\n\t\t\t} else if (Math.abs(deltaY) > helfLimit) {\n\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.this, 400));\n\t\t\t} else {\n\t\t\t\tmNestedTouchScrollingLayout.expand();\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onFingerUp(float velocityY) {\n\n\t}\n\n\t@Override\n\tpublic void onNestChildHorizationScroll(MotionEvent event, float deltaX, float deltaY) {\n\n\t}\n});\n```\n\n### Usage\n方式 1:\n``` Gradle\nrepositories {\n    // ...\n    maven { url \"https://jitpack.io\" }\n}\n\ndependencies {\n    implementation 'com.github.JarvisGG:NestedTouchScrollingLayout:1.2.3'\n}\n```\n方式 2:\n``` Gradle\nrepositories {\n    // ...\n    jcenter()\n}\ndependencies {\n    implementation 'com.jarvis.library.NestedTouchScrollingLayout:library:1.2.3'\n}\n```\n\n### 源码\nhttps://github.com/JarvisGG/NestedTouchScrollingLayout\n### 欢迎大家食用\n\n\n\n","source":"_posts/NestTouchScrollingLayout 无缝滑动的 Layout.md","raw":"---\ntitle: NestTouchScrollingLayout 无缝拖拽的 Layout\ndate: 2018-12-05 23:16:00\ntag: Android 开源控件\ncomments: true\n---\n\n## 前言\n今年年初接触回答页面改版，由之前的左右滑动回答改为上下滑动回答，由于当时回答页的代码太过于庞大，所以第一次改版复用了之前的 UI 框架，外层 ViewPager + Fragment，\b内层是 WebView 嵌套 Hybrid 页面。\n\n问题出现了，WebView 可以滚动的时候，会持有整个 Touch 事件流程，导致当 webView 拖拽到底部，手指不脱离屏幕继续拖拽的时候，无法将当前的拖拽操作给翻页器，\b产生体验上的割裂感。\n\n接下来就是 UI 交互优化的历程\n<!--more-->\n## 调研\n### 1.NestedScrolling:\nSupport V4 提供了一套 API 来支持嵌入的滑动效果。NestedScrolling 提供了一套父 View 和子 View 滑动交互机制。要完成这样的交互，父 View 需要实现 NestedScrollingParent 接口，而子 View 需要实现 NestedScrollingChild 接口。\n\n作为一个可以嵌入 NestedScrollingChild 的父 View，需要实现 NestedScrollingParent，这个接口方法和 NestedScrollingChild 大致有一一对应的关系。同样，也有一个 NestedScrollingParentHelper 辅助类来默默的帮助你实现和 Child 交互的逻辑。滑动动作是 Child 主动发起，Parent 就收滑动回调并作出响应。\n\n从上面的 Child 分析可知，滑动开始的调用 startNestedScroll()，Parent 收到 onStartNestedScroll() 回调，决定是否需要配合 Child 一起进行处理滑动，如果需要配合，还会回调 onNestedScrollAccepted()。\n\n每次滑动前，Child 先询问 Parent 是否需要滑动，即 dispatchNestedPreScroll()，这就回调到 Parent 的 onNestedPreScroll()，Parent 可以在这个回调中“劫持”掉 Child 的滑动，也就是先于 Child 滑动。\n\nChild 滑动以后，会调用 onNestedScroll()，回调到 Parent 的 onNestedScroll()，这里就是 Child 滑动后，剩下的给 Parent 处理，也就是 后于 Child 滑动。\n\n最后，滑动结束，调用 onStopNestedScroll() 表示本次处理结束。\n\b\n这个方案其实很不错，但最后被 pass 了，因为由于工程的原因，我们的 webview 是被包裹起来的，不可以任意去继承 NestedScrollingChild 并做定制修改。\n\n\n### 2.自定义 ViewGroup\n\n其实目前的问题是当子 View scroll 到顶部或者底部的时候，无法将 Touch 事件流交还给父布局。\n因此这里我采用的思路是通过我的 ViewGroup 去统一 dispatchTouchEvent 给我的子 View，条件就是，假如子 View 可以滚动，我就会构造一套完整的 touch 时间流分发给他。否则我会自己消化。\n\n## \b解决方案\n### step 1:\n通过第二种方式的思路，我们第一步需要在我的 ViewGroup 拦截所有的 Touch 事件。所以...\n``` java\n@Override\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n    if (isParentDispatchTouchEvent) {\n        return true;\n    } else {\n        return super.onInterceptTouchEvent(ev);\n    }\n}\n```\n上来我们就拦截出所有的 Touch 事件。\n\n### step2:\n开始在 ViewGroup 的 onTouchEvent 处理所有相关的 Event。\n``` java\n// 1.初始记录 Touch 坐标\nint mDownY = event.getY();\nint deltaY = 0;\n\n// 2.默认子 View 持有事件流起始点 isHoldTouch = true,通过 isChildCanScroll 来判别当前子 View 是否可以滚动。\nif (isHoldTouch && !isChildCanScroll(event, deltaY) && deltaY != 0) {\n    // 3.假如子 View 不可以滚动，当前 ViewGroup 需要阻断 Touch 的下发，为了遵循 Touch \b事件流的\b规范，当被外部阻断时，需要\b对其下发 ACTION_CANEL。同时 isHoldTouch = false。\n    isHoldTouch = false;\n    MotionEvent cancelEvent = MotionEvent.obtain(event);\n    cancelEvent.setAction(MotionEvent.ACTION_CANCEL);\n    getChildAt(0).dispatchTouchEvent(cancelEvent);\n    cancelEvent.recycle();\n}\n\n// 5.假如当我们在 ViewGroup 滚动过程中，滑动到了子 View 可滚动的状态，这时候会将 ViewGroup 调整至滚动初始位置，然后对子 View 做一个 ACTION_DOWN 的操作，从而开始陆续分发子 View Touch 事件。同时 isHoldTouch = true。\nif (!isHoldTouch && isChildCanScroll(event, deltaY) && deltaY != 0) {\n    setSheetTranslation(maxSheetTranslation);\n    isHoldTouch = true;\n    if (event.getAction() == MotionEvent.ACTION_MOVE) {\n        MotionEvent downEvent = MotionEvent.obtain(event);\n        downEvent.setAction(MotionEvent.ACTION_DOWN);\n        getChildAt(0).dispatchTouchEvent(downEvent);\n        downEvent.recycle();\n    }\n}\n\nif (isHoldTouch && deltaY != 0) {\n    // 6.当前判断子 View 已经处于可分发 Touch 状态，会陆续将 ACTION_MOVE 分发给他。从而实现子 View 的滚动。\n    event.offsetLocation(0, mSheetTranslation - mTouchParentViewOriginMeasureHeight);\n    getChildAt(0).dispatchTouchEvent(event);\n} else {\n    // 4.当上面阻断完 Touch 的下发以后，这里我们开始自己消化 Touch 事件，也就是这里会做一个 TranslationY 修改，从而达到 ViewGroup \b做 Y轴方向的偏移.\n    setSheetTranslation(newSheetTranslation);\n\n    if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {\n        // 7.为了将这个结束事件后面分发给子 View\n        isHoldTouch = true;\n    }\n}\n```\n### step3:\b\b\n判断子 View 是否可以滚动\n``` java\n /**\n    * child can scroll\n    * @param view\n    * @param x\n    * @param y\n    * @param lockRect 是否开启 允许 touch 脱离当前子 View 区域继续生效。\n    * @return\n    */\nprotected boolean canScrollUp(View view, float x, float y, boolean lockRect) {\n\n    if (view instanceof WebView) {\n        return canWebViewScrollUp();\n    }\n    if (view instanceof ViewGroup) {\n        ViewGroup vg = (ViewGroup) view;\n        for (int i = 0; i < vg.getChildCount(); i++) {\n            View child = vg.getChildAt(i);\n            int childLeft = child.getLeft() - view.getScrollX();\n            int childTop = child.getTop() - view.getScrollY();\n            int childRight = child.getRight() - view.getScrollX();\n            int childBottom = child.getBottom() - view.getScrollY();\n            boolean intersects = x > childLeft && x < childRight && y > childTop && y < childBottom;\n            if ((!lockRect || intersects)\n                    && canScrollUp(child, x - childLeft, y - childTop, lockRect)) {\n                return true;\n            }\n        }\n    }\n\n    if (view instanceof CoordinatorLayout &&\n            ((CoordinatorLayout) view).getChildCount() > 0 &&\n            ((CoordinatorLayout) view).getChildAt(0) instanceof AppBarLayout) {\n        AppBarLayout layout = (AppBarLayout) ((CoordinatorLayout) view).getChildAt(0);\n        OnNestOffsetChangedListener listener = mOnOffsetChangedListener.get(layout.hashCode());\n        if (listener != null) {\n            if (listener.getOffsetY() < layout.getMeasuredHeight() && listener.getOffsetY() > 0) {\n                return true;\n            }\n        }\n    }\n\n    return view.canScrollVertically(-1);\n}\n\n/**\n    * child can scroll\n    * @param view\n    * @param x\n    * @param y\n    * @param lockRect 是否开启 允许 touch 脱离当前子 View 区域继续生效。\n    * @return\n    */\nprotected boolean canScrollDown(View view, float x, float y, boolean lockRect) {\n    if (view instanceof WebView) {\n        return canWebViewScrollDown();\n    }\n    if (view instanceof ViewGroup) {\n        ViewGroup vg = (ViewGroup) view;\n        for (int i = 0; i < vg.getChildCount(); i++) {\n            View child = vg.getChildAt(i);\n            int childLeft = child.getLeft() - view.getScrollX();\n            int childTop = child.getTop() - view.getScrollY();\n            int childRight = child.getRight() - view.getScrollX();\n            int childBottom = child.getBottom() - view.getScrollY();\n            boolean intersects = x > childLeft && x < childRight && y > childTop && y < childBottom;\n            if ((!lockRect || intersects)\n                    && canScrollDown(child, x - childLeft, y - childTop, lockRect)) {\n                return true;\n            }\n        }\n    }\n\n    if (view instanceof CoordinatorLayout &&\n            ((CoordinatorLayout) view).getChildCount() > 0 &&\n            ((CoordinatorLayout) view).getChildAt(0) instanceof AppBarLayout) {\n        AppBarLayout layout = (AppBarLayout) ((CoordinatorLayout) view).getChildAt(0);\n        OnNestOffsetChangedListener listener = mOnOffsetChangedListener.get(layout.hashCode());\n        if (listener != null) {\n            if (listener.getOffsetY() < layout.getMeasuredHeight() && listener.getOffsetY() > 0) {\n                return true;\n            }\n        }\n    }\n\n    return view.canScrollVertically(1);\n}\n```\n这部分核心在于递归查询当前 \bMotionEvent \b\b当前坐标下的所有子 View 有没有可以滚动的 View，从而根据 view.canScrollVertically 来进行判断。\n\n## 优势\n1.\b支持绝大多数的 View \b嵌套滚动。\n2.成本低，只需要在你想要嵌套滚动的 View 上面包一层这个 Layout。\n\n## 功能\n1.支持嵌套滚动，无缝拖拽\n2.支持 BottomSheet (使用方法详见下方)\n3.支持 Appbarlayout\n3.支持拖拽阻尼 (使用方法详见下方)\n\n\n## 效果\n\n|![demo1](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo1.gif?raw=true)|![demo2](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo2.gif?raw=true)|\n|-----------|:-----------:|\n|normal|webview|\n|![demo3](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo3.gif?raw=true)|![demo4](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo4.gif?raw=true)|\n|bottomsheet normal|bottomsheet appbarlayout|\n|![demo8](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo8.gif?raw=true)|![demo9](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo9.gif?raw=true)|\n|view recyclerview|webview recyclerview|\n|![demo6](https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo6.gif?raw=true)||\n|question||\n\n\n### Usage example\n\n#### normal use\n``` XML\n<jarvis.com.library.NestedTouchScrollingLayout\n    android:id=\"@+id/wrapper\"\n    android:layout_gravity=\"center\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/container_rv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"400dp\"\n        android:background=\"#fff\"\n        android:overScrollMode=\"always\">\n    </android.support.v7.widget.RecyclerView>\n\n</jarvis.com.library.NestedTouchScrollingLayout>\n```\n\n``` Java\n// 设置手指下拉阻尼\nmNestedTouchScrollingLayout.setDampingDown(2.0f / 5);\n// 设置手指上拉阻尼\nmNestedTouchScrollingLayout.setDampingUp(3.0f / 5);\n\nmNestedTouchScrollingLayout.registerNestScrollChildCallback(new NestedTouchScrollingLayout.INestChildScrollChange() {\n        \n        // 当前 Layout 偏移距离\n\t@Override\n\tpublic void onNestChildScrollChange(float deltaY, float velocityY) {\n\n\t}\n\t\n\t// finger 脱离屏幕 Layout 偏移量，以及当前 Layout 的速度\n\t@Override\n\tpublic void onNestChildScrollRelease(final float deltaY, final int velocityY) {\n\t\tmNestedTouchScrollingLayout.recover(0, new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tLog.i(\"NestedTouchScrollingLayout ---> \", \"deltaY : \" + deltaY + \" velocityY : \" + velocityY);\n\t\t\t}\n\t\t});\n\t}\n\t// 手指抬起时机\n\t@Override\n\tpublic void onFingerUp(float velocityY) {\n\n\t}\n\n\t// 横向拖拽\n\t@Override\n\tpublic void onNestChildHorizationScroll(MotionEvent event, float deltaX, float deltaY) {\n\t\n\t}\n});\n```\n#### bottomsheet use\n``` xml\n <jarvis.com.library.NestedTouchScrollingLayout\n\tandroid:id=\"@+id/wrapper\"\n\tandroid:layout_marginTop=\"30dp\"\n\tandroid:layout_width=\"match_parent\"\n\tandroid:layout_height=\"match_parent\">\n\n\t<android.support.v7.widget.RecyclerView\n\t\tandroid:background=\"#fff\"\n\t\tandroid:id=\"@+id/container_rv\"\n\t\tandroid:layout_width=\"match_parent\"\n\t\tandroid:layout_height=\"match_parent\" />\n\n</jarvis.com.library.NestedTouchScrollingLayout>\n```\n``` java\n// 临界速度，根据业务而定\npublic static int mVelocityYBound = 1300;\n\n// 规定 sheetView 弹起方向\nmNestedTouchScrollingLayout.setSheetDirection(NestedTouchScrollingLayout.SheetDirection.BOTTOM);\n\nmNestedTouchScrollingLayout.registerNestScrollChildCallback(new NestedTouchScrollingLayout.INestChildScrollChange() {\n\t@Override\n\tpublic void onNestChildScrollChange(float deltaY) {\n\n\t}\n\n\t@Override\n\tpublic void onNestChildScrollRelease(final float deltaY, final int velocityY) {\n\t\tint totalYRange = mNestedTouchScrollingLayout.getMeasuredHeight();\n\t\tint helfLimit = (totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.this, 400)) / 2;\n\t\tint hideLimit = totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.this, 400) / 2;\n\t\tint helfHeight = totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.this, 400);\n\t\tif (velocityY > mVelocityYBound && velocityY > 0) {\n\t\t\tif (Math.abs(deltaY) > helfHeight) {\n\t\t\t\tmNestedTouchScrollingLayout.hiden();\n\t\t\t} else {\n\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.this,400));\n\t\t\t}\n\t\t} else if (velocityY < -mVelocityYBound && velocityY < 0) {\n\t\t\tif (Math.abs(deltaY) < helfHeight) {\n\t\t\t\tmNestedTouchScrollingLayout.expand();\n\t\t\t} else {\n\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.this,400));\n\t\t\t}\n\t\t} else {\n\t\t\tif (Math.abs(deltaY) > hideLimit) {\n\t\t\t\tmNestedTouchScrollingLayout.hiden();\n\t\t\t} else if (Math.abs(deltaY) > helfLimit) {\n\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.this, 400));\n\t\t\t} else {\n\t\t\t\tmNestedTouchScrollingLayout.expand();\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onFingerUp(float velocityY) {\n\n\t}\n\n\t@Override\n\tpublic void onNestChildHorizationScroll(MotionEvent event, float deltaX, float deltaY) {\n\n\t}\n});\n```\n\n### Usage\n方式 1:\n``` Gradle\nrepositories {\n    // ...\n    maven { url \"https://jitpack.io\" }\n}\n\ndependencies {\n    implementation 'com.github.JarvisGG:NestedTouchScrollingLayout:1.2.3'\n}\n```\n方式 2:\n``` Gradle\nrepositories {\n    // ...\n    jcenter()\n}\ndependencies {\n    implementation 'com.jarvis.library.NestedTouchScrollingLayout:library:1.2.3'\n}\n```\n\n### 源码\nhttps://github.com/JarvisGG/NestedTouchScrollingLayout\n### 欢迎大家食用\n\n\n\n","slug":"NestTouchScrollingLayout 无缝滑动的 Layout","published":1,"updated":"2021-06-28T14:28:31.664Z","layout":"post","photos":[],"link":"","_id":"ckqgq9v5g00075y8d9lx8n1b5","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今年年初接触回答页面改版，由之前的左右滑动回答改为上下滑动回答，由于当时回答页的代码太过于庞大，所以第一次改版复用了之前的 UI 框架，外层 ViewPager + Fragment，\b内层是 WebView 嵌套 Hybrid 页面。</p>\n<p>问题出现了，WebView 可以滚动的时候，会持有整个 Touch 事件流程，导致当 webView 拖拽到底部，手指不脱离屏幕继续拖拽的时候，无法将当前的拖拽操作给翻页器，\b产生体验上的割裂感。</p>\n<p>接下来就是 UI 交互优化的历程<br><a id=\"more\"></a></p>\n<h2 id=\"调研\"><a href=\"#调研\" class=\"headerlink\" title=\"调研\"></a>调研</h2><h3 id=\"1-NestedScrolling\"><a href=\"#1-NestedScrolling\" class=\"headerlink\" title=\"1.NestedScrolling:\"></a>1.NestedScrolling:</h3><p>Support V4 提供了一套 API 来支持嵌入的滑动效果。NestedScrolling 提供了一套父 View 和子 View 滑动交互机制。要完成这样的交互，父 View 需要实现 NestedScrollingParent 接口，而子 View 需要实现 NestedScrollingChild 接口。</p>\n<p>作为一个可以嵌入 NestedScrollingChild 的父 View，需要实现 NestedScrollingParent，这个接口方法和 NestedScrollingChild 大致有一一对应的关系。同样，也有一个 NestedScrollingParentHelper 辅助类来默默的帮助你实现和 Child 交互的逻辑。滑动动作是 Child 主动发起，Parent 就收滑动回调并作出响应。</p>\n<p>从上面的 Child 分析可知，滑动开始的调用 startNestedScroll()，Parent 收到 onStartNestedScroll() 回调，决定是否需要配合 Child 一起进行处理滑动，如果需要配合，还会回调 onNestedScrollAccepted()。</p>\n<p>每次滑动前，Child 先询问 Parent 是否需要滑动，即 dispatchNestedPreScroll()，这就回调到 Parent 的 onNestedPreScroll()，Parent 可以在这个回调中“劫持”掉 Child 的滑动，也就是先于 Child 滑动。</p>\n<p>Child 滑动以后，会调用 onNestedScroll()，回调到 Parent 的 onNestedScroll()，这里就是 Child 滑动后，剩下的给 Parent 处理，也就是 后于 Child 滑动。</p>\n<p>最后，滑动结束，调用 onStopNestedScroll() 表示本次处理结束。<br>\b<br>这个方案其实很不错，但最后被 pass 了，因为由于工程的原因，我们的 webview 是被包裹起来的，不可以任意去继承 NestedScrollingChild 并做定制修改。</p>\n<h3 id=\"2-自定义-ViewGroup\"><a href=\"#2-自定义-ViewGroup\" class=\"headerlink\" title=\"2.自定义 ViewGroup\"></a>2.自定义 ViewGroup</h3><p>其实目前的问题是当子 View scroll 到顶部或者底部的时候，无法将 Touch 事件流交还给父布局。<br>因此这里我采用的思路是通过我的 ViewGroup 去统一 dispatchTouchEvent 给我的子 View，条件就是，假如子 View 可以滚动，我就会构造一套完整的 touch 时间流分发给他。否则我会自己消化。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"\b解决方案\"></a>\b解决方案</h2><h3 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1:\"></a>step 1:</h3><p>通过第二种方式的思路，我们第一步需要在我的 ViewGroup 拦截所有的 Touch 事件。所以…<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isParentDispatchTouchEvent) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上来我们就拦截出所有的 Touch 事件。</p>\n<h3 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2:\"></a>step2:</h3><p>开始在 ViewGroup 的 onTouchEvent 处理所有相关的 Event。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1.初始记录 Touch 坐标</span></div><div class=\"line\"><span class=\"keyword\">int</span> mDownY = event.getY();</div><div class=\"line\"><span class=\"keyword\">int</span> deltaY = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2.默认子 View 持有事件流起始点 isHoldTouch = true,通过 isChildCanScroll 来判别当前子 View 是否可以滚动。</span></div><div class=\"line\"><span class=\"keyword\">if</span> (isHoldTouch &amp;&amp; !isChildCanScroll(event, deltaY) &amp;&amp; deltaY != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 3.假如子 View 不可以滚动，当前 ViewGroup 需要阻断 Touch 的下发，为了遵循 Touch \b事件流的\b规范，当被外部阻断时，需要\b对其下发 ACTION_CANEL。同时 isHoldTouch = false。</span></div><div class=\"line\">    isHoldTouch = <span class=\"keyword\">false</span>;</div><div class=\"line\">    MotionEvent cancelEvent = MotionEvent.obtain(event);</div><div class=\"line\">    cancelEvent.setAction(MotionEvent.ACTION_CANCEL);</div><div class=\"line\">    getChildAt(<span class=\"number\">0</span>).dispatchTouchEvent(cancelEvent);</div><div class=\"line\">    cancelEvent.recycle();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 5.假如当我们在 ViewGroup 滚动过程中，滑动到了子 View 可滚动的状态，这时候会将 ViewGroup 调整至滚动初始位置，然后对子 View 做一个 ACTION_DOWN 的操作，从而开始陆续分发子 View Touch 事件。同时 isHoldTouch = true。</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!isHoldTouch &amp;&amp; isChildCanScroll(event, deltaY) &amp;&amp; deltaY != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    setSheetTranslation(maxSheetTranslation);</div><div class=\"line\">    isHoldTouch = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (event.getAction() == MotionEvent.ACTION_MOVE) &#123;</div><div class=\"line\">        MotionEvent downEvent = MotionEvent.obtain(event);</div><div class=\"line\">        downEvent.setAction(MotionEvent.ACTION_DOWN);</div><div class=\"line\">        getChildAt(<span class=\"number\">0</span>).dispatchTouchEvent(downEvent);</div><div class=\"line\">        downEvent.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (isHoldTouch &amp;&amp; deltaY != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 6.当前判断子 View 已经处于可分发 Touch 状态，会陆续将 ACTION_MOVE 分发给他。从而实现子 View 的滚动。</span></div><div class=\"line\">    event.offsetLocation(<span class=\"number\">0</span>, mSheetTranslation - mTouchParentViewOriginMeasureHeight);</div><div class=\"line\">    getChildAt(<span class=\"number\">0</span>).dispatchTouchEvent(event);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 4.当上面阻断完 Touch 的下发以后，这里我们开始自己消化 Touch 事件，也就是这里会做一个 TranslationY 修改，从而达到 ViewGroup \b做 Y轴方向的偏移.</span></div><div class=\"line\">    setSheetTranslation(newSheetTranslation);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) &#123;</div><div class=\"line\">        <span class=\"comment\">// 7.为了将这个结束事件后面分发给子 View</span></div><div class=\"line\">        isHoldTouch = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3:\b\b\"></a>step3:\b\b</h3><p>判断子 View 是否可以滚动<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">    * child can scroll</div><div class=\"line\">    * <span class=\"doctag\">@param</span> view</div><div class=\"line\">    * <span class=\"doctag\">@param</span> x</div><div class=\"line\">    * <span class=\"doctag\">@param</span> y</div><div class=\"line\">    * <span class=\"doctag\">@param</span> lockRect 是否开启 允许 touch 脱离当前子 View 区域继续生效。</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canScrollUp</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">boolean</span> lockRect)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> WebView) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> canWebViewScrollUp();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewGroup) &#123;</div><div class=\"line\">        ViewGroup vg = (ViewGroup) view;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vg.getChildCount(); i++) &#123;</div><div class=\"line\">            View child = vg.getChildAt(i);</div><div class=\"line\">            <span class=\"keyword\">int</span> childLeft = child.getLeft() - view.getScrollX();</div><div class=\"line\">            <span class=\"keyword\">int</span> childTop = child.getTop() - view.getScrollY();</div><div class=\"line\">            <span class=\"keyword\">int</span> childRight = child.getRight() - view.getScrollX();</div><div class=\"line\">            <span class=\"keyword\">int</span> childBottom = child.getBottom() - view.getScrollY();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> intersects = x &gt; childLeft &amp;&amp; x &lt; childRight &amp;&amp; y &gt; childTop &amp;&amp; y &lt; childBottom;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((!lockRect || intersects)</div><div class=\"line\">                    &amp;&amp; canScrollUp(child, x - childLeft, y - childTop, lockRect)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> CoordinatorLayout &amp;&amp;</div><div class=\"line\">            ((CoordinatorLayout) view).getChildCount() &gt; <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">            ((CoordinatorLayout) view).getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">instanceof</span> AppBarLayout) &#123;</div><div class=\"line\">        AppBarLayout layout = (AppBarLayout) ((CoordinatorLayout) view).getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">        OnNestOffsetChangedListener listener = mOnOffsetChangedListener.get(layout.hashCode());</div><div class=\"line\">        <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (listener.getOffsetY() &lt; layout.getMeasuredHeight() &amp;&amp; listener.getOffsetY() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> view.canScrollVertically(-<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * child can scroll</div><div class=\"line\">    * <span class=\"doctag\">@param</span> view</div><div class=\"line\">    * <span class=\"doctag\">@param</span> x</div><div class=\"line\">    * <span class=\"doctag\">@param</span> y</div><div class=\"line\">    * <span class=\"doctag\">@param</span> lockRect 是否开启 允许 touch 脱离当前子 View 区域继续生效。</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canScrollDown</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">boolean</span> lockRect)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> WebView) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> canWebViewScrollDown();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewGroup) &#123;</div><div class=\"line\">        ViewGroup vg = (ViewGroup) view;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vg.getChildCount(); i++) &#123;</div><div class=\"line\">            View child = vg.getChildAt(i);</div><div class=\"line\">            <span class=\"keyword\">int</span> childLeft = child.getLeft() - view.getScrollX();</div><div class=\"line\">            <span class=\"keyword\">int</span> childTop = child.getTop() - view.getScrollY();</div><div class=\"line\">            <span class=\"keyword\">int</span> childRight = child.getRight() - view.getScrollX();</div><div class=\"line\">            <span class=\"keyword\">int</span> childBottom = child.getBottom() - view.getScrollY();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> intersects = x &gt; childLeft &amp;&amp; x &lt; childRight &amp;&amp; y &gt; childTop &amp;&amp; y &lt; childBottom;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((!lockRect || intersects)</div><div class=\"line\">                    &amp;&amp; canScrollDown(child, x - childLeft, y - childTop, lockRect)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> CoordinatorLayout &amp;&amp;</div><div class=\"line\">            ((CoordinatorLayout) view).getChildCount() &gt; <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">            ((CoordinatorLayout) view).getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">instanceof</span> AppBarLayout) &#123;</div><div class=\"line\">        AppBarLayout layout = (AppBarLayout) ((CoordinatorLayout) view).getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">        OnNestOffsetChangedListener listener = mOnOffsetChangedListener.get(layout.hashCode());</div><div class=\"line\">        <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (listener.getOffsetY() &lt; layout.getMeasuredHeight() &amp;&amp; listener.getOffsetY() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> view.canScrollVertically(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这部分核心在于递归查询当前 \bMotionEvent \b\b当前坐标下的所有子 View 有没有可以滚动的 View，从而根据 view.canScrollVertically 来进行判断。</p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><p>1.\b支持绝大多数的 View \b嵌套滚动。<br>2.成本低，只需要在你想要嵌套滚动的 View 上面包一层这个 Layout。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>1.支持嵌套滚动，无缝拖拽<br>2.支持 BottomSheet (使用方法详见下方)<br>3.支持 Appbarlayout<br>3.支持拖拽阻尼 (使用方法详见下方)</p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><table>\n<thead>\n<tr>\n<th><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo1.gif?raw=true\" alt=\"demo1\"></th>\n<th style=\"text-align:center\"><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo2.gif?raw=true\" alt=\"demo2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>normal</td>\n<td style=\"text-align:center\">webview</td>\n</tr>\n<tr>\n<td><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo3.gif?raw=true\" alt=\"demo3\"></td>\n<td style=\"text-align:center\"><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo4.gif?raw=true\" alt=\"demo4\"></td>\n</tr>\n<tr>\n<td>bottomsheet normal</td>\n<td style=\"text-align:center\">bottomsheet appbarlayout</td>\n</tr>\n<tr>\n<td><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo8.gif?raw=true\" alt=\"demo8\"></td>\n<td style=\"text-align:center\"><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo9.gif?raw=true\" alt=\"demo9\"></td>\n</tr>\n<tr>\n<td>view recyclerview</td>\n<td style=\"text-align:center\">webview recyclerview</td>\n</tr>\n<tr>\n<td><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo6.gif?raw=true\" alt=\"demo6\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>question</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Usage-example\"><a href=\"#Usage-example\" class=\"headerlink\" title=\"Usage example\"></a>Usage example</h3><h4 id=\"normal-use\"><a href=\"#normal-use\" class=\"headerlink\" title=\"normal use\"></a>normal use</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jarvis.com.library.NestedTouchScrollingLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/wrapper\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container_rv\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"400dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#fff\"</span></div><div class=\"line\">        <span class=\"attr\">android:overScrollMode</span>=<span class=\"string\">\"always\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">jarvis.com.library.NestedTouchScrollingLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置手指下拉阻尼</span></div><div class=\"line\">mNestedTouchScrollingLayout.setDampingDown(<span class=\"number\">2.0f</span> / <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// 设置手指上拉阻尼</span></div><div class=\"line\">mNestedTouchScrollingLayout.setDampingUp(<span class=\"number\">3.0f</span> / <span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">mNestedTouchScrollingLayout.registerNestScrollChildCallback(<span class=\"keyword\">new</span> NestedTouchScrollingLayout.INestChildScrollChange() &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 当前 Layout 偏移距离</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildScrollChange</span><span class=\"params\">(<span class=\"keyword\">float</span> deltaY, <span class=\"keyword\">float</span> velocityY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// finger 脱离屏幕 Layout 偏移量，以及当前 Layout 的速度</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildScrollRelease</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> deltaY, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> velocityY)</span> </span>&#123;</div><div class=\"line\">\t\tmNestedTouchScrollingLayout.recover(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tLog.i(<span class=\"string\">\"NestedTouchScrollingLayout ---&gt; \"</span>, <span class=\"string\">\"deltaY : \"</span> + deltaY + <span class=\"string\">\" velocityY : \"</span> + velocityY);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 手指抬起时机</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFingerUp</span><span class=\"params\">(<span class=\"keyword\">float</span> velocityY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 横向拖拽</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildHorizationScroll</span><span class=\"params\">(MotionEvent event, <span class=\"keyword\">float</span> deltaX, <span class=\"keyword\">float</span> deltaY)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"bottomsheet-use\"><a href=\"#bottomsheet-use\" class=\"headerlink\" title=\"bottomsheet use\"></a>bottomsheet use</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">jarvis.com.library.NestedTouchScrollingLayout</span></span></div><div class=\"line\">\t<span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/wrapper\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"30dp\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></div><div class=\"line\">\t\t<span class=\"attr\">android:background</span>=<span class=\"string\">\"#fff\"</span></div><div class=\"line\">\t\t<span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container_rv\"</span></div><div class=\"line\">\t\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">\t\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">jarvis.com.library.NestedTouchScrollingLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 临界速度，根据业务而定</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mVelocityYBound = <span class=\"number\">1300</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 规定 sheetView 弹起方向</span></div><div class=\"line\">mNestedTouchScrollingLayout.setSheetDirection(NestedTouchScrollingLayout.SheetDirection.BOTTOM);</div><div class=\"line\"></div><div class=\"line\">mNestedTouchScrollingLayout.registerNestScrollChildCallback(<span class=\"keyword\">new</span> NestedTouchScrollingLayout.INestChildScrollChange() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildScrollChange</span><span class=\"params\">(<span class=\"keyword\">float</span> deltaY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildScrollRelease</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> deltaY, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> velocityY)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> totalYRange = mNestedTouchScrollingLayout.getMeasuredHeight();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> helfLimit = (totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>, <span class=\"number\">400</span>)) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hideLimit = totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>, <span class=\"number\">400</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> helfHeight = totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>, <span class=\"number\">400</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (velocityY &gt; mVelocityYBound &amp;&amp; velocityY &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(deltaY) &gt; helfHeight) &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.hiden();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>,<span class=\"number\">400</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (velocityY &lt; -mVelocityYBound &amp;&amp; velocityY &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(deltaY) &lt; helfHeight) &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.expand();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>,<span class=\"number\">400</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(deltaY) &gt; hideLimit) &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.hiden();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Math.abs(deltaY) &gt; helfLimit) &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>, <span class=\"number\">400</span>));</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.expand();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFingerUp</span><span class=\"params\">(<span class=\"keyword\">float</span> velocityY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildHorizationScroll</span><span class=\"params\">(MotionEvent event, <span class=\"keyword\">float</span> deltaX, <span class=\"keyword\">float</span> deltaY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p>方式 1:<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    maven &#123; url <span class=\"string\">\"https://jitpack.io\"</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    implementation <span class=\"string\">'com.github.JarvisGG:NestedTouchScrollingLayout:1.2.3'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>方式 2:<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    jcenter()</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    implementation <span class=\"string\">'com.jarvis.library.NestedTouchScrollingLayout:library:1.2.3'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><p><a href=\"https://github.com/JarvisGG/NestedTouchScrollingLayout\" target=\"_blank\" rel=\"external\">https://github.com/JarvisGG/NestedTouchScrollingLayout</a></p>\n<h3 id=\"欢迎大家食用\"><a href=\"#欢迎大家食用\" class=\"headerlink\" title=\"欢迎大家食用\"></a>欢迎大家食用</h3>","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>今年年初接触回答页面改版，由之前的左右滑动回答改为上下滑动回答，由于当时回答页的代码太过于庞大，所以第一次改版复用了之前的 UI 框架，外层 ViewPager + Fragment，\b内层是 WebView 嵌套 Hybrid 页面。</p>\n<p>问题出现了，WebView 可以滚动的时候，会持有整个 Touch 事件流程，导致当 webView 拖拽到底部，手指不脱离屏幕继续拖拽的时候，无法将当前的拖拽操作给翻页器，\b产生体验上的割裂感。</p>\n<p>接下来就是 UI 交互优化的历程<br>","more":"</p>\n<h2 id=\"调研\"><a href=\"#调研\" class=\"headerlink\" title=\"调研\"></a>调研</h2><h3 id=\"1-NestedScrolling\"><a href=\"#1-NestedScrolling\" class=\"headerlink\" title=\"1.NestedScrolling:\"></a>1.NestedScrolling:</h3><p>Support V4 提供了一套 API 来支持嵌入的滑动效果。NestedScrolling 提供了一套父 View 和子 View 滑动交互机制。要完成这样的交互，父 View 需要实现 NestedScrollingParent 接口，而子 View 需要实现 NestedScrollingChild 接口。</p>\n<p>作为一个可以嵌入 NestedScrollingChild 的父 View，需要实现 NestedScrollingParent，这个接口方法和 NestedScrollingChild 大致有一一对应的关系。同样，也有一个 NestedScrollingParentHelper 辅助类来默默的帮助你实现和 Child 交互的逻辑。滑动动作是 Child 主动发起，Parent 就收滑动回调并作出响应。</p>\n<p>从上面的 Child 分析可知，滑动开始的调用 startNestedScroll()，Parent 收到 onStartNestedScroll() 回调，决定是否需要配合 Child 一起进行处理滑动，如果需要配合，还会回调 onNestedScrollAccepted()。</p>\n<p>每次滑动前，Child 先询问 Parent 是否需要滑动，即 dispatchNestedPreScroll()，这就回调到 Parent 的 onNestedPreScroll()，Parent 可以在这个回调中“劫持”掉 Child 的滑动，也就是先于 Child 滑动。</p>\n<p>Child 滑动以后，会调用 onNestedScroll()，回调到 Parent 的 onNestedScroll()，这里就是 Child 滑动后，剩下的给 Parent 处理，也就是 后于 Child 滑动。</p>\n<p>最后，滑动结束，调用 onStopNestedScroll() 表示本次处理结束。<br>\b<br>这个方案其实很不错，但最后被 pass 了，因为由于工程的原因，我们的 webview 是被包裹起来的，不可以任意去继承 NestedScrollingChild 并做定制修改。</p>\n<h3 id=\"2-自定义-ViewGroup\"><a href=\"#2-自定义-ViewGroup\" class=\"headerlink\" title=\"2.自定义 ViewGroup\"></a>2.自定义 ViewGroup</h3><p>其实目前的问题是当子 View scroll 到顶部或者底部的时候，无法将 Touch 事件流交还给父布局。<br>因此这里我采用的思路是通过我的 ViewGroup 去统一 dispatchTouchEvent 给我的子 View，条件就是，假如子 View 可以滚动，我就会构造一套完整的 touch 时间流分发给他。否则我会自己消化。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"\b解决方案\"></a>\b解决方案</h2><h3 id=\"step-1\"><a href=\"#step-1\" class=\"headerlink\" title=\"step 1:\"></a>step 1:</h3><p>通过第二种方式的思路，我们第一步需要在我的 ViewGroup 拦截所有的 Touch 事件。所以…<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (isParentDispatchTouchEvent) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上来我们就拦截出所有的 Touch 事件。</p>\n<h3 id=\"step2\"><a href=\"#step2\" class=\"headerlink\" title=\"step2:\"></a>step2:</h3><p>开始在 ViewGroup 的 onTouchEvent 处理所有相关的 Event。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1.初始记录 Touch 坐标</span></div><div class=\"line\"><span class=\"keyword\">int</span> mDownY = event.getY();</div><div class=\"line\"><span class=\"keyword\">int</span> deltaY = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2.默认子 View 持有事件流起始点 isHoldTouch = true,通过 isChildCanScroll 来判别当前子 View 是否可以滚动。</span></div><div class=\"line\"><span class=\"keyword\">if</span> (isHoldTouch &amp;&amp; !isChildCanScroll(event, deltaY) &amp;&amp; deltaY != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 3.假如子 View 不可以滚动，当前 ViewGroup 需要阻断 Touch 的下发，为了遵循 Touch \b事件流的\b规范，当被外部阻断时，需要\b对其下发 ACTION_CANEL。同时 isHoldTouch = false。</span></div><div class=\"line\">    isHoldTouch = <span class=\"keyword\">false</span>;</div><div class=\"line\">    MotionEvent cancelEvent = MotionEvent.obtain(event);</div><div class=\"line\">    cancelEvent.setAction(MotionEvent.ACTION_CANCEL);</div><div class=\"line\">    getChildAt(<span class=\"number\">0</span>).dispatchTouchEvent(cancelEvent);</div><div class=\"line\">    cancelEvent.recycle();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 5.假如当我们在 ViewGroup 滚动过程中，滑动到了子 View 可滚动的状态，这时候会将 ViewGroup 调整至滚动初始位置，然后对子 View 做一个 ACTION_DOWN 的操作，从而开始陆续分发子 View Touch 事件。同时 isHoldTouch = true。</span></div><div class=\"line\"><span class=\"keyword\">if</span> (!isHoldTouch &amp;&amp; isChildCanScroll(event, deltaY) &amp;&amp; deltaY != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    setSheetTranslation(maxSheetTranslation);</div><div class=\"line\">    isHoldTouch = <span class=\"keyword\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (event.getAction() == MotionEvent.ACTION_MOVE) &#123;</div><div class=\"line\">        MotionEvent downEvent = MotionEvent.obtain(event);</div><div class=\"line\">        downEvent.setAction(MotionEvent.ACTION_DOWN);</div><div class=\"line\">        getChildAt(<span class=\"number\">0</span>).dispatchTouchEvent(downEvent);</div><div class=\"line\">        downEvent.recycle();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (isHoldTouch &amp;&amp; deltaY != <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 6.当前判断子 View 已经处于可分发 Touch 状态，会陆续将 ACTION_MOVE 分发给他。从而实现子 View 的滚动。</span></div><div class=\"line\">    event.offsetLocation(<span class=\"number\">0</span>, mSheetTranslation - mTouchParentViewOriginMeasureHeight);</div><div class=\"line\">    getChildAt(<span class=\"number\">0</span>).dispatchTouchEvent(event);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 4.当上面阻断完 Touch 的下发以后，这里我们开始自己消化 Touch 事件，也就是这里会做一个 TranslationY 修改，从而达到 ViewGroup \b做 Y轴方向的偏移.</span></div><div class=\"line\">    setSheetTranslation(newSheetTranslation);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) &#123;</div><div class=\"line\">        <span class=\"comment\">// 7.为了将这个结束事件后面分发给子 View</span></div><div class=\"line\">        isHoldTouch = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"step3\"><a href=\"#step3\" class=\"headerlink\" title=\"step3:\b\b\"></a>step3:\b\b</h3><p>判断子 View 是否可以滚动<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">    * child can scroll</div><div class=\"line\">    * <span class=\"doctag\">@param</span> view</div><div class=\"line\">    * <span class=\"doctag\">@param</span> x</div><div class=\"line\">    * <span class=\"doctag\">@param</span> y</div><div class=\"line\">    * <span class=\"doctag\">@param</span> lockRect 是否开启 允许 touch 脱离当前子 View 区域继续生效。</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canScrollUp</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">boolean</span> lockRect)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> WebView) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> canWebViewScrollUp();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewGroup) &#123;</div><div class=\"line\">        ViewGroup vg = (ViewGroup) view;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vg.getChildCount(); i++) &#123;</div><div class=\"line\">            View child = vg.getChildAt(i);</div><div class=\"line\">            <span class=\"keyword\">int</span> childLeft = child.getLeft() - view.getScrollX();</div><div class=\"line\">            <span class=\"keyword\">int</span> childTop = child.getTop() - view.getScrollY();</div><div class=\"line\">            <span class=\"keyword\">int</span> childRight = child.getRight() - view.getScrollX();</div><div class=\"line\">            <span class=\"keyword\">int</span> childBottom = child.getBottom() - view.getScrollY();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> intersects = x &gt; childLeft &amp;&amp; x &lt; childRight &amp;&amp; y &gt; childTop &amp;&amp; y &lt; childBottom;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((!lockRect || intersects)</div><div class=\"line\">                    &amp;&amp; canScrollUp(child, x - childLeft, y - childTop, lockRect)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> CoordinatorLayout &amp;&amp;</div><div class=\"line\">            ((CoordinatorLayout) view).getChildCount() &gt; <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">            ((CoordinatorLayout) view).getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">instanceof</span> AppBarLayout) &#123;</div><div class=\"line\">        AppBarLayout layout = (AppBarLayout) ((CoordinatorLayout) view).getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">        OnNestOffsetChangedListener listener = mOnOffsetChangedListener.get(layout.hashCode());</div><div class=\"line\">        <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (listener.getOffsetY() &lt; layout.getMeasuredHeight() &amp;&amp; listener.getOffsetY() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> view.canScrollVertically(-<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * child can scroll</div><div class=\"line\">    * <span class=\"doctag\">@param</span> view</div><div class=\"line\">    * <span class=\"doctag\">@param</span> x</div><div class=\"line\">    * <span class=\"doctag\">@param</span> y</div><div class=\"line\">    * <span class=\"doctag\">@param</span> lockRect 是否开启 允许 touch 脱离当前子 View 区域继续生效。</div><div class=\"line\">    * <span class=\"doctag\">@return</span></div><div class=\"line\">    */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canScrollDown</span><span class=\"params\">(View view, <span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, <span class=\"keyword\">boolean</span> lockRect)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> WebView) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> canWebViewScrollDown();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> ViewGroup) &#123;</div><div class=\"line\">        ViewGroup vg = (ViewGroup) view;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; vg.getChildCount(); i++) &#123;</div><div class=\"line\">            View child = vg.getChildAt(i);</div><div class=\"line\">            <span class=\"keyword\">int</span> childLeft = child.getLeft() - view.getScrollX();</div><div class=\"line\">            <span class=\"keyword\">int</span> childTop = child.getTop() - view.getScrollY();</div><div class=\"line\">            <span class=\"keyword\">int</span> childRight = child.getRight() - view.getScrollX();</div><div class=\"line\">            <span class=\"keyword\">int</span> childBottom = child.getBottom() - view.getScrollY();</div><div class=\"line\">            <span class=\"keyword\">boolean</span> intersects = x &gt; childLeft &amp;&amp; x &lt; childRight &amp;&amp; y &gt; childTop &amp;&amp; y &lt; childBottom;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((!lockRect || intersects)</div><div class=\"line\">                    &amp;&amp; canScrollDown(child, x - childLeft, y - childTop, lockRect)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (view <span class=\"keyword\">instanceof</span> CoordinatorLayout &amp;&amp;</div><div class=\"line\">            ((CoordinatorLayout) view).getChildCount() &gt; <span class=\"number\">0</span> &amp;&amp;</div><div class=\"line\">            ((CoordinatorLayout) view).getChildAt(<span class=\"number\">0</span>) <span class=\"keyword\">instanceof</span> AppBarLayout) &#123;</div><div class=\"line\">        AppBarLayout layout = (AppBarLayout) ((CoordinatorLayout) view).getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">        OnNestOffsetChangedListener listener = mOnOffsetChangedListener.get(layout.hashCode());</div><div class=\"line\">        <span class=\"keyword\">if</span> (listener != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (listener.getOffsetY() &lt; layout.getMeasuredHeight() &amp;&amp; listener.getOffsetY() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> view.canScrollVertically(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这部分核心在于递归查询当前 \bMotionEvent \b\b当前坐标下的所有子 View 有没有可以滚动的 View，从而根据 view.canScrollVertically 来进行判断。</p>\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><p>1.\b支持绝大多数的 View \b嵌套滚动。<br>2.成本低，只需要在你想要嵌套滚动的 View 上面包一层这个 Layout。</p>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><p>1.支持嵌套滚动，无缝拖拽<br>2.支持 BottomSheet (使用方法详见下方)<br>3.支持 Appbarlayout<br>3.支持拖拽阻尼 (使用方法详见下方)</p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><table>\n<thead>\n<tr>\n<th><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo1.gif?raw=true\" alt=\"demo1\"></th>\n<th style=\"text-align:center\"><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo2.gif?raw=true\" alt=\"demo2\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>normal</td>\n<td style=\"text-align:center\">webview</td>\n</tr>\n<tr>\n<td><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo3.gif?raw=true\" alt=\"demo3\"></td>\n<td style=\"text-align:center\"><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo4.gif?raw=true\" alt=\"demo4\"></td>\n</tr>\n<tr>\n<td>bottomsheet normal</td>\n<td style=\"text-align:center\">bottomsheet appbarlayout</td>\n</tr>\n<tr>\n<td><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo8.gif?raw=true\" alt=\"demo8\"></td>\n<td style=\"text-align:center\"><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo9.gif?raw=true\" alt=\"demo9\"></td>\n</tr>\n<tr>\n<td>view recyclerview</td>\n<td style=\"text-align:center\">webview recyclerview</td>\n</tr>\n<tr>\n<td><img src=\"https://github.com/JarvisGG/NestedTouchScrollingLayout/blob/master/captures/demo6.gif?raw=true\" alt=\"demo6\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>question</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Usage-example\"><a href=\"#Usage-example\" class=\"headerlink\" title=\"Usage example\"></a>Usage example</h3><h4 id=\"normal-use\"><a href=\"#normal-use\" class=\"headerlink\" title=\"normal use\"></a>normal use</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">jarvis.com.library.NestedTouchScrollingLayout</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/wrapper\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></div><div class=\"line\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container_rv\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"400dp\"</span></div><div class=\"line\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"#fff\"</span></div><div class=\"line\">        <span class=\"attr\">android:overScrollMode</span>=<span class=\"string\">\"always\"</span>&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">jarvis.com.library.NestedTouchScrollingLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 设置手指下拉阻尼</span></div><div class=\"line\">mNestedTouchScrollingLayout.setDampingDown(<span class=\"number\">2.0f</span> / <span class=\"number\">5</span>);</div><div class=\"line\"><span class=\"comment\">// 设置手指上拉阻尼</span></div><div class=\"line\">mNestedTouchScrollingLayout.setDampingUp(<span class=\"number\">3.0f</span> / <span class=\"number\">5</span>);</div><div class=\"line\"></div><div class=\"line\">mNestedTouchScrollingLayout.registerNestScrollChildCallback(<span class=\"keyword\">new</span> NestedTouchScrollingLayout.INestChildScrollChange() &#123;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// 当前 Layout 偏移距离</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildScrollChange</span><span class=\"params\">(<span class=\"keyword\">float</span> deltaY, <span class=\"keyword\">float</span> velocityY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">// finger 脱离屏幕 Layout 偏移量，以及当前 Layout 的速度</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildScrollRelease</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> deltaY, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> velocityY)</span> </span>&#123;</div><div class=\"line\">\t\tmNestedTouchScrollingLayout.recover(<span class=\"number\">0</span>, <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">\t\t\t\tLog.i(<span class=\"string\">\"NestedTouchScrollingLayout ---&gt; \"</span>, <span class=\"string\">\"deltaY : \"</span> + deltaY + <span class=\"string\">\" velocityY : \"</span> + velocityY);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">// 手指抬起时机</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFingerUp</span><span class=\"params\">(<span class=\"keyword\">float</span> velocityY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">// 横向拖拽</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildHorizationScroll</span><span class=\"params\">(MotionEvent event, <span class=\"keyword\">float</span> deltaX, <span class=\"keyword\">float</span> deltaY)</span> </span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"bottomsheet-use\"><a href=\"#bottomsheet-use\" class=\"headerlink\" title=\"bottomsheet use\"></a>bottomsheet use</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">jarvis.com.library.NestedTouchScrollingLayout</span></span></div><div class=\"line\">\t<span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/wrapper\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_marginTop</span>=<span class=\"string\">\"30dp\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">android.support.v7.widget.RecyclerView</span></span></div><div class=\"line\">\t\t<span class=\"attr\">android:background</span>=<span class=\"string\">\"#fff\"</span></div><div class=\"line\">\t\t<span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container_rv\"</span></div><div class=\"line\">\t\t<span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">\t\t<span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">jarvis.com.library.NestedTouchScrollingLayout</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 临界速度，根据业务而定</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> mVelocityYBound = <span class=\"number\">1300</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 规定 sheetView 弹起方向</span></div><div class=\"line\">mNestedTouchScrollingLayout.setSheetDirection(NestedTouchScrollingLayout.SheetDirection.BOTTOM);</div><div class=\"line\"></div><div class=\"line\">mNestedTouchScrollingLayout.registerNestScrollChildCallback(<span class=\"keyword\">new</span> NestedTouchScrollingLayout.INestChildScrollChange() &#123;</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildScrollChange</span><span class=\"params\">(<span class=\"keyword\">float</span> deltaY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildScrollRelease</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">float</span> deltaY, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> velocityY)</span> </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> totalYRange = mNestedTouchScrollingLayout.getMeasuredHeight();</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> helfLimit = (totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>, <span class=\"number\">400</span>)) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> hideLimit = totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>, <span class=\"number\">400</span>) / <span class=\"number\">2</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">int</span> helfHeight = totalYRange - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>, <span class=\"number\">400</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (velocityY &gt; mVelocityYBound &amp;&amp; velocityY &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(deltaY) &gt; helfHeight) &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.hiden();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>,<span class=\"number\">400</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (velocityY &lt; -mVelocityYBound &amp;&amp; velocityY &lt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(deltaY) &lt; helfHeight) &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.expand();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>,<span class=\"number\">400</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (Math.abs(deltaY) &gt; hideLimit) &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.hiden();</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Math.abs(deltaY) &gt; helfLimit) &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.peek(mNestedTouchScrollingLayout.getMeasuredHeight() - DisplayUtils.dpToPixel(BottomSheetActivity.<span class=\"keyword\">this</span>, <span class=\"number\">400</span>));</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\tmNestedTouchScrollingLayout.expand();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFingerUp</span><span class=\"params\">(<span class=\"keyword\">float</span> velocityY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNestChildHorizationScroll</span><span class=\"params\">(MotionEvent event, <span class=\"keyword\">float</span> deltaX, <span class=\"keyword\">float</span> deltaY)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h3><p>方式 1:<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    maven &#123; url <span class=\"string\">\"https://jitpack.io\"</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    implementation <span class=\"string\">'com.github.JarvisGG:NestedTouchScrollingLayout:1.2.3'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>方式 2:<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    jcenter()</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    implementation <span class=\"string\">'com.jarvis.library.NestedTouchScrollingLayout:library:1.2.3'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h3><p><a href=\"https://github.com/JarvisGG/NestedTouchScrollingLayout\" target=\"_blank\" rel=\"external\">https://github.com/JarvisGG/NestedTouchScrollingLayout</a></p>\n<h3 id=\"欢迎大家食用\"><a href=\"#欢迎大家食用\" class=\"headerlink\" title=\"欢迎大家食用\"></a>欢迎大家食用</h3>"},{"title":"ObjectAdapter 扩展RecyclerView Adapter的方式","date":"2017-11-01T02:03:56.000Z","comments":1,"_content":"\n## 前言\n起因，随着业务的开展，我们的Feed列表有时会增加好多的卡片类型，而过多的卡片就会引发过多的 ViewHolder，ViewType 造成Adapter路基冗杂。那么本篇博客就是基于这个问题做的Adapter 扩展。\n<!--more-->\n\n## 扩展对比\n### 扩展前\nActivity:\n``` Java\nrecyclerView.setAdapter(new OldAdapter(this));\nrecyclerView.setLayoutManager(new LinearLayoutManager(this));\n```\nAdapter:\n``` Java\npublic class OldAdapter extends RecyclerView.Adapter {\n    \n    private Context mContext;\n    private LayoutInflater mInflater;\n    private List<IndexTypeEnum> mData;\n    \n    public OldAdapter(Context context) {\n        this.mContext = context;\n        this.mInflater = LayoutInflater.from(mContext);\n        this.mData = new ArrayList<>();\n    }\n\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view;\n        if (viewType == 1) {\n            view = mInflater.inflate(R.layout.item_frist, parent, false);\n        } else if (viewType == 2) {\n            view = mInflater.inflate(R.layout.item_second, parent, false);\n        } else {\n            view = mInflater.inflate(R.layout.item_thrid, parent, false);\n        }\n        return new InnerViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\n        // ...do\n    }\n\n    @Override\n    public int getItemCount() {\n        return mData.size();\n    }\n\n    @Override\n    public int getItemViewType(int position) {\n        if (position == 0) {\n            return 1;\n        } else if (position == 1) {\n            return 2;\n        } else {\n            return 3;\n        }\n    }\n    \n    public void setData(List<IndexTypeEnum> data) {\n        this.mData = data;\n        notifyDataSetChanged();\n    }\n\n    public void add(IndexTypeEnum indexTypeEnum, int pos) {\n        mData.add(pos, indexTypeEnum);\n        notifyItemChanged(pos);\n    }\n    \n    public void remove(IndexTypeEnum indexTypeEnum, int pos) {\n        mData.remove(pos);\n        notifyItemChanged(pos);\n    }\n    \n    public void move(int fromPosition, int toPosition) {\n        IndexTypeEnum indexTypeEnum = mData.get(fromPosition);\n        mData.set(fromPosition, mData.get(toPosition));\n        mData.set(toPosition, indexTypeEnum);\n        notifyItemMoved(fromPosition, toPosition);\n    }\n    \n    public static class InnerViewHolder extends RecyclerView.ViewHolder {\n\n        public InnerViewHolder(View itemView) {\n            super(itemView);\n        }\n    }\n}\n```\n添加：\n``` Java\nadapter.add(1, FRIST);\n```\n删除：\n``` Java\nadapter.remove(1);\n```\n移动：\n``` Java\nadapter.move(1,2);\n```\n### 扩展后\nActivity:\n``` Java\npresenterSelector = new ZhihuPresenterSelector(this);\nobjectAdapter = new ArrayObjectAdapter(presenterSelector);\nrecyclerView.setObjectAdapter(objectAdapter);\nrecyclerView.setLayoutManager(new LinearLayoutManager(this));\n\nfor (IndexTypeEnum indexTypeEnum : data) {\n    objectAdapter.add(indexTypeEnum);\n}\n```\nPresenterSelector:\n``` Java\npublic class ZhihuPresenterSelector extends PresenterSelector {\n\n    private final ArrayList<Presenter> mPresenters = new ArrayList<>();\n    private FristPresenter fristPresenter;\n    private SecondPresenter secondPresenter;\n    private ThridPresenter thridPresenter;\n\n    public ZhihuPresenterSelector(Context context) {\n        fristPresenter = new FristPresenter(context);\n        secondPresenter = new SecondPresenter(context);\n        thridPresenter = new ThridPresenter(context);\n        containerPresenter = new ContainerPresenter(context);\n\n        mPresenters.add(fristPresenter);\n        mPresenters.add(secondPresenter);\n        mPresenters.add(thridPresenter);\n    }\n\n    @Override\n    public Presenter getPresenter(Object item) {\n        IndexTypeEnum indexRow = (IndexTypeEnum) item;\n        switch (indexRow) {\n            case FRIST:\n                return fristPresenter;\n            case SECOND:\n                return secondPresenter;\n            case THRIED:\n                return thridPresenter;\n            default:\n                return fristPresenter;\n        }\n    }\n\n    @Override\n    public Presenter[] getPresenters() {\n        return mPresenters.toArray(new Presenter[mPresenters.size()]);\n    }\n}\n```\nPresenter:\n``` Java\npublic class FristPresenter extends Presenter {\n\n    private Context mContext;\n    private LayoutInflater mInflater;\n\n    public FristPresenter(Context context) {\n        this.mContext = context;\n        this.mInflater = ((Activity) context).getLayoutInflater();\n    }\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent) {\n        View view = mInflater.inflate(R.layout.item_frist, parent, false);\n        return new InnerViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder viewHolder, Object item, int position) {\n\n    }\n\n    @Override\n    public void onUnBindViewHolder(ViewHolder viewHolder) {\n\n    }\n\n    protected class InnerViewHolder extends ViewHolder {\n\n        public InnerViewHolder(View view) {\n            super(view);\n        }\n    }\n}\n```\n添加：\n``` Java\nobjectAdapter.add(1, indexTypeEnum)\n```\n删除：\n``` Java\nobjectAdapter.remove(indexTypeEnum1);\nobjectAdapter.remove(1);\n```\n移动：\n``` Java\nobjectAdapter.move(1,2);\n```\n### 小节\n这里我们可以看到，优化前Adapter是很冗杂的，但优化后，我们可以按职责详细划分这里的业务逻辑.</br>\n1.我们这里通过 PresenterSelector 来总结当前所有的卡片种类（Presenter).</br>\n2.将我们不同的卡片业务逻辑划分到对应的 Presenter.</br>\n3.关于\b基本操作全部封装在 ObjectAdapter.</br>\n\n### How to use?\n``` gradle\nrepositories {\n    // ...\n    maven { url \"https://jitpack.io\" }\n}\n\ndependencies {\n    compile 'com.jarvis.library:ObjectAdapter:1.0'\n}\n```","source":"_posts/ObjectAdapter 扩展RecyclerView Adapter的方式.md","raw":"---\ntitle: ObjectAdapter 扩展RecyclerView Adapter的方式\ndate: 2017-11-01 10:03:56\ntags: Android 开源控件\ncomments: true\n---\n\n## 前言\n起因，随着业务的开展，我们的Feed列表有时会增加好多的卡片类型，而过多的卡片就会引发过多的 ViewHolder，ViewType 造成Adapter路基冗杂。那么本篇博客就是基于这个问题做的Adapter 扩展。\n<!--more-->\n\n## 扩展对比\n### 扩展前\nActivity:\n``` Java\nrecyclerView.setAdapter(new OldAdapter(this));\nrecyclerView.setLayoutManager(new LinearLayoutManager(this));\n```\nAdapter:\n``` Java\npublic class OldAdapter extends RecyclerView.Adapter {\n    \n    private Context mContext;\n    private LayoutInflater mInflater;\n    private List<IndexTypeEnum> mData;\n    \n    public OldAdapter(Context context) {\n        this.mContext = context;\n        this.mInflater = LayoutInflater.from(mContext);\n        this.mData = new ArrayList<>();\n    }\n\n    @Override\n    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View view;\n        if (viewType == 1) {\n            view = mInflater.inflate(R.layout.item_frist, parent, false);\n        } else if (viewType == 2) {\n            view = mInflater.inflate(R.layout.item_second, parent, false);\n        } else {\n            view = mInflater.inflate(R.layout.item_thrid, parent, false);\n        }\n        return new InnerViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\n        // ...do\n    }\n\n    @Override\n    public int getItemCount() {\n        return mData.size();\n    }\n\n    @Override\n    public int getItemViewType(int position) {\n        if (position == 0) {\n            return 1;\n        } else if (position == 1) {\n            return 2;\n        } else {\n            return 3;\n        }\n    }\n    \n    public void setData(List<IndexTypeEnum> data) {\n        this.mData = data;\n        notifyDataSetChanged();\n    }\n\n    public void add(IndexTypeEnum indexTypeEnum, int pos) {\n        mData.add(pos, indexTypeEnum);\n        notifyItemChanged(pos);\n    }\n    \n    public void remove(IndexTypeEnum indexTypeEnum, int pos) {\n        mData.remove(pos);\n        notifyItemChanged(pos);\n    }\n    \n    public void move(int fromPosition, int toPosition) {\n        IndexTypeEnum indexTypeEnum = mData.get(fromPosition);\n        mData.set(fromPosition, mData.get(toPosition));\n        mData.set(toPosition, indexTypeEnum);\n        notifyItemMoved(fromPosition, toPosition);\n    }\n    \n    public static class InnerViewHolder extends RecyclerView.ViewHolder {\n\n        public InnerViewHolder(View itemView) {\n            super(itemView);\n        }\n    }\n}\n```\n添加：\n``` Java\nadapter.add(1, FRIST);\n```\n删除：\n``` Java\nadapter.remove(1);\n```\n移动：\n``` Java\nadapter.move(1,2);\n```\n### 扩展后\nActivity:\n``` Java\npresenterSelector = new ZhihuPresenterSelector(this);\nobjectAdapter = new ArrayObjectAdapter(presenterSelector);\nrecyclerView.setObjectAdapter(objectAdapter);\nrecyclerView.setLayoutManager(new LinearLayoutManager(this));\n\nfor (IndexTypeEnum indexTypeEnum : data) {\n    objectAdapter.add(indexTypeEnum);\n}\n```\nPresenterSelector:\n``` Java\npublic class ZhihuPresenterSelector extends PresenterSelector {\n\n    private final ArrayList<Presenter> mPresenters = new ArrayList<>();\n    private FristPresenter fristPresenter;\n    private SecondPresenter secondPresenter;\n    private ThridPresenter thridPresenter;\n\n    public ZhihuPresenterSelector(Context context) {\n        fristPresenter = new FristPresenter(context);\n        secondPresenter = new SecondPresenter(context);\n        thridPresenter = new ThridPresenter(context);\n        containerPresenter = new ContainerPresenter(context);\n\n        mPresenters.add(fristPresenter);\n        mPresenters.add(secondPresenter);\n        mPresenters.add(thridPresenter);\n    }\n\n    @Override\n    public Presenter getPresenter(Object item) {\n        IndexTypeEnum indexRow = (IndexTypeEnum) item;\n        switch (indexRow) {\n            case FRIST:\n                return fristPresenter;\n            case SECOND:\n                return secondPresenter;\n            case THRIED:\n                return thridPresenter;\n            default:\n                return fristPresenter;\n        }\n    }\n\n    @Override\n    public Presenter[] getPresenters() {\n        return mPresenters.toArray(new Presenter[mPresenters.size()]);\n    }\n}\n```\nPresenter:\n``` Java\npublic class FristPresenter extends Presenter {\n\n    private Context mContext;\n    private LayoutInflater mInflater;\n\n    public FristPresenter(Context context) {\n        this.mContext = context;\n        this.mInflater = ((Activity) context).getLayoutInflater();\n    }\n\n    @Override\n    public ViewHolder onCreateViewHolder(ViewGroup parent) {\n        View view = mInflater.inflate(R.layout.item_frist, parent, false);\n        return new InnerViewHolder(view);\n    }\n\n    @Override\n    public void onBindViewHolder(ViewHolder viewHolder, Object item, int position) {\n\n    }\n\n    @Override\n    public void onUnBindViewHolder(ViewHolder viewHolder) {\n\n    }\n\n    protected class InnerViewHolder extends ViewHolder {\n\n        public InnerViewHolder(View view) {\n            super(view);\n        }\n    }\n}\n```\n添加：\n``` Java\nobjectAdapter.add(1, indexTypeEnum)\n```\n删除：\n``` Java\nobjectAdapter.remove(indexTypeEnum1);\nobjectAdapter.remove(1);\n```\n移动：\n``` Java\nobjectAdapter.move(1,2);\n```\n### 小节\n这里我们可以看到，优化前Adapter是很冗杂的，但优化后，我们可以按职责详细划分这里的业务逻辑.</br>\n1.我们这里通过 PresenterSelector 来总结当前所有的卡片种类（Presenter).</br>\n2.将我们不同的卡片业务逻辑划分到对应的 Presenter.</br>\n3.关于\b基本操作全部封装在 ObjectAdapter.</br>\n\n### How to use?\n``` gradle\nrepositories {\n    // ...\n    maven { url \"https://jitpack.io\" }\n}\n\ndependencies {\n    compile 'com.jarvis.library:ObjectAdapter:1.0'\n}\n```","slug":"ObjectAdapter 扩展RecyclerView Adapter的方式","published":1,"updated":"2021-06-28T14:28:31.664Z","layout":"post","photos":[],"link":"","_id":"ckqgq9v5h000a5y8dcxbomsri","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>起因，随着业务的开展，我们的Feed列表有时会增加好多的卡片类型，而过多的卡片就会引发过多的 ViewHolder，ViewType 造成Adapter路基冗杂。那么本篇博客就是基于这个问题做的Adapter 扩展。<br><a id=\"more\"></a></p>\n<h2 id=\"扩展对比\"><a href=\"#扩展对比\" class=\"headerlink\" title=\"扩展对比\"></a>扩展对比</h2><h3 id=\"扩展前\"><a href=\"#扩展前\" class=\"headerlink\" title=\"扩展前\"></a>扩展前</h3><p>Activity:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">recyclerView.setAdapter(<span class=\"keyword\">new</span> OldAdapter(<span class=\"keyword\">this</span>));</div><div class=\"line\">recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>));</div></pre></td></tr></table></figure></p>\n<p>Adapter:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OldAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater mInflater;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;IndexTypeEnum&gt; mData;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OldAdapter</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mInflater = LayoutInflater.from(mContext);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mData = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> RecyclerView.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">        View view;</div><div class=\"line\">        <span class=\"keyword\">if</span> (viewType == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            view = mInflater.inflate(R.layout.item_frist, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (viewType == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            view = mInflater.inflate(R.layout.item_second, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            view = mInflater.inflate(R.layout.item_thrid, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InnerViewHolder(view);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...do</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mData.size();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(List&lt;IndexTypeEnum&gt; data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mData = data;</div><div class=\"line\">        notifyDataSetChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(IndexTypeEnum indexTypeEnum, <span class=\"keyword\">int</span> pos)</span> </span>&#123;</div><div class=\"line\">        mData.add(pos, indexTypeEnum);</div><div class=\"line\">        notifyItemChanged(pos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(IndexTypeEnum indexTypeEnum, <span class=\"keyword\">int</span> pos)</span> </span>&#123;</div><div class=\"line\">        mData.remove(pos);</div><div class=\"line\">        notifyItemChanged(pos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(<span class=\"keyword\">int</span> fromPosition, <span class=\"keyword\">int</span> toPosition)</span> </span>&#123;</div><div class=\"line\">        IndexTypeEnum indexTypeEnum = mData.get(fromPosition);</div><div class=\"line\">        mData.set(fromPosition, mData.get(toPosition));</div><div class=\"line\">        mData.set(toPosition, indexTypeEnum);</div><div class=\"line\">        notifyItemMoved(fromPosition, toPosition);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>添加：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter.add(<span class=\"number\">1</span>, FRIST);</div></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter.remove(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure></p>\n<p>移动：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter.move(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"扩展后\"><a href=\"#扩展后\" class=\"headerlink\" title=\"扩展后\"></a>扩展后</h3><p>Activity:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">presenterSelector = <span class=\"keyword\">new</span> ZhihuPresenterSelector(<span class=\"keyword\">this</span>);</div><div class=\"line\">objectAdapter = <span class=\"keyword\">new</span> ArrayObjectAdapter(presenterSelector);</div><div class=\"line\">recyclerView.setObjectAdapter(objectAdapter);</div><div class=\"line\">recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (IndexTypeEnum indexTypeEnum : data) &#123;</div><div class=\"line\">    objectAdapter.add(indexTypeEnum);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PresenterSelector:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZhihuPresenterSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">PresenterSelector</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;Presenter&gt; mPresenters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> FristPresenter fristPresenter;</div><div class=\"line\">    <span class=\"keyword\">private</span> SecondPresenter secondPresenter;</div><div class=\"line\">    <span class=\"keyword\">private</span> ThridPresenter thridPresenter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ZhihuPresenterSelector</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        fristPresenter = <span class=\"keyword\">new</span> FristPresenter(context);</div><div class=\"line\">        secondPresenter = <span class=\"keyword\">new</span> SecondPresenter(context);</div><div class=\"line\">        thridPresenter = <span class=\"keyword\">new</span> ThridPresenter(context);</div><div class=\"line\">        containerPresenter = <span class=\"keyword\">new</span> ContainerPresenter(context);</div><div class=\"line\"></div><div class=\"line\">        mPresenters.add(fristPresenter);</div><div class=\"line\">        mPresenters.add(secondPresenter);</div><div class=\"line\">        mPresenters.add(thridPresenter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Presenter <span class=\"title\">getPresenter</span><span class=\"params\">(Object item)</span> </span>&#123;</div><div class=\"line\">        IndexTypeEnum indexRow = (IndexTypeEnum) item;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (indexRow) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> FRIST:</div><div class=\"line\">                <span class=\"keyword\">return</span> fristPresenter;</div><div class=\"line\">            <span class=\"keyword\">case</span> SECOND:</div><div class=\"line\">                <span class=\"keyword\">return</span> secondPresenter;</div><div class=\"line\">            <span class=\"keyword\">case</span> THRIED:</div><div class=\"line\">                <span class=\"keyword\">return</span> thridPresenter;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> fristPresenter;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Presenter[] getPresenters() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mPresenters.toArray(<span class=\"keyword\">new</span> Presenter[mPresenters.size()]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Presenter:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FristPresenter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Presenter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater mInflater;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FristPresenter</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mInflater = ((Activity) context).getLayoutInflater();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">        View view = mInflater.inflate(R.layout.item_frist, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InnerViewHolder(view);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder viewHolder, Object item, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUnBindViewHolder</span><span class=\"params\">(ViewHolder viewHolder)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerViewHolder</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(view);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>添加：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectAdapter.add(<span class=\"number\">1</span>, indexTypeEnum)</div></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectAdapter.remove(indexTypeEnum1);</div><div class=\"line\">objectAdapter.remove(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure></p>\n<p>移动：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectAdapter.move(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h3><p>这里我们可以看到，优化前Adapter是很冗杂的，但优化后，我们可以按职责详细划分这里的业务逻辑.<br><br>1.我们这里通过 PresenterSelector 来总结当前所有的卡片种类（Presenter).<br><br>2.将我们不同的卡片业务逻辑划分到对应的 Presenter.<br><br>3.关于\b基本操作全部封装在 ObjectAdapter.<br></p>\n<h3 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use?\"></a>How to use?</h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    maven &#123; url <span class=\"string\">\"https://jitpack.io\"</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.jarvis.library:ObjectAdapter:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>起因，随着业务的开展，我们的Feed列表有时会增加好多的卡片类型，而过多的卡片就会引发过多的 ViewHolder，ViewType 造成Adapter路基冗杂。那么本篇博客就是基于这个问题做的Adapter 扩展。<br>","more":"</p>\n<h2 id=\"扩展对比\"><a href=\"#扩展对比\" class=\"headerlink\" title=\"扩展对比\"></a>扩展对比</h2><h3 id=\"扩展前\"><a href=\"#扩展前\" class=\"headerlink\" title=\"扩展前\"></a>扩展前</h3><p>Activity:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">recyclerView.setAdapter(<span class=\"keyword\">new</span> OldAdapter(<span class=\"keyword\">this</span>));</div><div class=\"line\">recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>));</div></pre></td></tr></table></figure></p>\n<p>Adapter:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OldAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater mInflater;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;IndexTypeEnum&gt; mData;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OldAdapter</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mInflater = LayoutInflater.from(mContext);</div><div class=\"line\">        <span class=\"keyword\">this</span>.mData = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> RecyclerView.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span> </span>&#123;</div><div class=\"line\">        View view;</div><div class=\"line\">        <span class=\"keyword\">if</span> (viewType == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            view = mInflater.inflate(R.layout.item_frist, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (viewType == <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            view = mInflater.inflate(R.layout.item_second, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            view = mInflater.inflate(R.layout.item_thrid, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InnerViewHolder(view);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(RecyclerView.ViewHolder holder, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...do</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mData.size();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemViewType</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (position == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setData</span><span class=\"params\">(List&lt;IndexTypeEnum&gt; data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mData = data;</div><div class=\"line\">        notifyDataSetChanged();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(IndexTypeEnum indexTypeEnum, <span class=\"keyword\">int</span> pos)</span> </span>&#123;</div><div class=\"line\">        mData.add(pos, indexTypeEnum);</div><div class=\"line\">        notifyItemChanged(pos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">remove</span><span class=\"params\">(IndexTypeEnum indexTypeEnum, <span class=\"keyword\">int</span> pos)</span> </span>&#123;</div><div class=\"line\">        mData.remove(pos);</div><div class=\"line\">        notifyItemChanged(pos);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">move</span><span class=\"params\">(<span class=\"keyword\">int</span> fromPosition, <span class=\"keyword\">int</span> toPosition)</span> </span>&#123;</div><div class=\"line\">        IndexTypeEnum indexTypeEnum = mData.get(fromPosition);</div><div class=\"line\">        mData.set(fromPosition, mData.get(toPosition));</div><div class=\"line\">        mData.set(toPosition, indexTypeEnum);</div><div class=\"line\">        notifyItemMoved(fromPosition, toPosition);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerViewHolder</span><span class=\"params\">(View itemView)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(itemView);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>添加：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter.add(<span class=\"number\">1</span>, FRIST);</div></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter.remove(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure></p>\n<p>移动：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">adapter.move(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"扩展后\"><a href=\"#扩展后\" class=\"headerlink\" title=\"扩展后\"></a>扩展后</h3><p>Activity:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">presenterSelector = <span class=\"keyword\">new</span> ZhihuPresenterSelector(<span class=\"keyword\">this</span>);</div><div class=\"line\">objectAdapter = <span class=\"keyword\">new</span> ArrayObjectAdapter(presenterSelector);</div><div class=\"line\">recyclerView.setObjectAdapter(objectAdapter);</div><div class=\"line\">recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(<span class=\"keyword\">this</span>));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> (IndexTypeEnum indexTypeEnum : data) &#123;</div><div class=\"line\">    objectAdapter.add(indexTypeEnum);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>PresenterSelector:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ZhihuPresenterSelector</span> <span class=\"keyword\">extends</span> <span class=\"title\">PresenterSelector</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ArrayList&lt;Presenter&gt; mPresenters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">private</span> FristPresenter fristPresenter;</div><div class=\"line\">    <span class=\"keyword\">private</span> SecondPresenter secondPresenter;</div><div class=\"line\">    <span class=\"keyword\">private</span> ThridPresenter thridPresenter;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ZhihuPresenterSelector</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        fristPresenter = <span class=\"keyword\">new</span> FristPresenter(context);</div><div class=\"line\">        secondPresenter = <span class=\"keyword\">new</span> SecondPresenter(context);</div><div class=\"line\">        thridPresenter = <span class=\"keyword\">new</span> ThridPresenter(context);</div><div class=\"line\">        containerPresenter = <span class=\"keyword\">new</span> ContainerPresenter(context);</div><div class=\"line\"></div><div class=\"line\">        mPresenters.add(fristPresenter);</div><div class=\"line\">        mPresenters.add(secondPresenter);</div><div class=\"line\">        mPresenters.add(thridPresenter);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Presenter <span class=\"title\">getPresenter</span><span class=\"params\">(Object item)</span> </span>&#123;</div><div class=\"line\">        IndexTypeEnum indexRow = (IndexTypeEnum) item;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (indexRow) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> FRIST:</div><div class=\"line\">                <span class=\"keyword\">return</span> fristPresenter;</div><div class=\"line\">            <span class=\"keyword\">case</span> SECOND:</div><div class=\"line\">                <span class=\"keyword\">return</span> secondPresenter;</div><div class=\"line\">            <span class=\"keyword\">case</span> THRIED:</div><div class=\"line\">                <span class=\"keyword\">return</span> thridPresenter;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> fristPresenter;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Presenter[] getPresenters() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mPresenters.toArray(<span class=\"keyword\">new</span> Presenter[mPresenters.size()]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Presenter:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FristPresenter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Presenter</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\">    <span class=\"keyword\">private</span> LayoutInflater mInflater;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FristPresenter</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">        <span class=\"keyword\">this</span>.mInflater = ((Activity) context).getLayoutInflater();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(ViewGroup parent)</span> </span>&#123;</div><div class=\"line\">        View view = mInflater.inflate(R.layout.item_frist, parent, <span class=\"keyword\">false</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InnerViewHolder(view);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(ViewHolder viewHolder, Object item, <span class=\"keyword\">int</span> position)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUnBindViewHolder</span><span class=\"params\">(ViewHolder viewHolder)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerViewHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewHolder</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InnerViewHolder</span><span class=\"params\">(View view)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(view);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>添加：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectAdapter.add(<span class=\"number\">1</span>, indexTypeEnum)</div></pre></td></tr></table></figure></p>\n<p>删除：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectAdapter.remove(indexTypeEnum1);</div><div class=\"line\">objectAdapter.remove(<span class=\"number\">1</span>);</div></pre></td></tr></table></figure></p>\n<p>移动：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">objectAdapter.move(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h3><p>这里我们可以看到，优化前Adapter是很冗杂的，但优化后，我们可以按职责详细划分这里的业务逻辑.<br><br>1.我们这里通过 PresenterSelector 来总结当前所有的卡片种类（Presenter).<br><br>2.将我们不同的卡片业务逻辑划分到对应的 Presenter.<br><br>3.关于\b基本操作全部封装在 ObjectAdapter.<br></p>\n<h3 id=\"How-to-use\"><a href=\"#How-to-use\" class=\"headerlink\" title=\"How to use?\"></a>How to use?</h3><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">    maven &#123; url <span class=\"string\">\"https://jitpack.io\"</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">'com.jarvis.library:ObjectAdapter:1.0'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"RxBus 的初步探索","date":"2017-06-20T11:06:56.000Z","comments":1,"_content":"\n## 前言\n5月份项目上线了，之后就在优化项目结构，减少依赖。之前项目一直用的EventBus来作为项目事件流的框架，这两天偶然看到RxBus这个东西，基于RxJava和RxAndroid，考虑到自身的业务需求，由于本身用EventBus的功能比较单一，而发现RxBus足以实现我现有的业务，所以决定踩踩坑。\n<!--more-->\n## 具体实现\n``` Java\npublic class RxBus {\n    private static volatile RxBus mInstance;\n    private final Subject mBus;\n\n    public RxBus() {\n        mBus = new SerializedSubject<>(PublishSubject.create());\n    }\n\n    public static RxBus getInstance() {\n        if (mInstance == null) {\n            synchronized (RxBus.class) {\n                if (mInstance == null) {\n                    mInstance = new RxBus();\n                }\n            }\n        }\n        return mInstance;\n    }\n\n    public void post(Object object) {\n        mBus.onNext(object);\n    }\n\n    public <T> Observable<T> toObserverable(Class<T> eventType) {\n        return mBus.ofType(eventType);\n//        return mBus.filter(eventType::isInstance)\n//                .cast(eventType);\n    }\n}\n```\n目前只是消息的注册，发送。\n#### SerializedSubject\nSerializedSubject 特征是线程安全\n``` Java\npublic SerializedSubject(final Subject<T, R> actual) {\n    super(new OnSubscribe<R>() {\n\n        @Override\n        public void call(Subscriber<? super R> child) {\n            actual.unsafeSubscribe(child);\n        }\n\n    });\n    this.actual = actual;\n    this.observer = new SerializedObserver<T>(actual);\n}\n```\n这里有个小细节，actual 是当前的数据链，这里通过SerializedObserver将数据链做一个转换，类似于map。\n下面我们看SerializedObserver\n``` Java\npublic void onNext(T t) {\n    if (terminated) {\n        return;\n    }\n    synchronized (this) {\n        if (terminated) {\n            return;\n        }\n        if (emitting) {\n            FastList list = queue;\n            if (list == null) {\n                list = new FastList();\n                queue = list;\n            }\n            list.add(NotificationLite.next(t));\n            return;\n        }\n        emitting = true;\n    }\n    try {\n        actual.onNext(t);\n    } catch (Throwable e) {\n        terminated = true;\n        Exceptions.throwOrReport(e, actual, t);\n        return;\n    }\n    for (;;) {\n        FastList list;\n        synchronized (this) {\n            list = queue;\n            if (list == null) {\n                emitting = false;\n                return;\n            }\n            queue = null;\n        }\n        for (Object o : list.array) {\n            if (o == null) {\n                break;\n            }\n            try {\n                if (NotificationLite.accept(actual, o)) {\n                    terminated = true;\n                    return;\n                }\n            } catch (Throwable e) {\n                terminated = true;\n                Exceptions.throwIfFatal(e);\n                actual.onError(OnErrorThrowable.addValueAsLastCause(e, t));\n                return;\n            }\n        }\n    }\n}\n```\n这里丑抽出onNext，我们发现synchronized线程锁，证明当前是线程安全的，当多个线程再要执行onNext，这里线程安全，排队线程会加入queue，然后依次执行。onError，onComplete同理。\n#### PublishSubject\n与普通的Subject不同，在订阅时并不立即触发订阅事件，而是允许我们在任意时刻手动调用onNext(),onError(),onCompleted来触发事件。\n可以看到PublishSubject与普通的Subject最大的不同就是其可以先订阅事件，然后在某一时刻手动调用方法来触发事件。\ndemo：\n``` Java\nPublishSubject<String> publishSubject = PublishSubject.create();\npublishSubject.subscribe(new Action1<String>() {\n        @Override\n        public void call(String s) {\n            // TODO\n        }\n});\npublishSubject.onNext(result);\n```\n我们可以根据我们的业务需求先对Subject进行订阅，然后再默一时刻触发我们的onNext。\n\n## 原理总结\n这里的publishSubject就是在我们\b发出通知的时候才会去onNext，而我们的onNext是线程安全的，\b当并发访问的时候，可以\b依次执行onNext，这里我们要用到ofType这个操作符，用来过滤TargetEvent.class的Observable来实现“发送端”与“接收端”的约束。\n\n## 使用方法\n简单的使用方法\n### 消息发送\n``` Java\nRxBus.getInstance().post(event);\n```\n### 消息注册，取消注册\n这里就不以Activity，Fragment做对照了，基本用法都一样，风向一个View AttachToWindow,DetachFromWindow 的方式 \n``` Java\n@Override\nprotected void onAttachedToWindow() {\n    super.onAttachedToWindow();\n    mSubscription = RxBus.getInstance().toObserverable(IndexLeftBtnGetFocusEvent.class)\n            .compose(RxSchedulers.threadSwitchSchedulers())\n            .subscribe(event -> {\n                // TODO 业务逻辑\n            });\n//        EventBus.getDefault().register(this);\n}\n\n@Override\nprotected void onDetachedFromWindow() {\n    super.onDetachedFromWindow();\n    if (mSubscription.isUnsubscribed()) {\n        mSubscription.unsubscribe();\n    }\n//        EventBus.getDefault().unregister(this);\n}\n```\n## 后记\n这里我只是先用一个小demo来学习一下这里的代码设计，后期会对我们的RxBus优化，比如添加bind，unbind生命周期的相关逻辑。\n","source":"_posts/RxBus 的初步探索.md","raw":"---\ntitle: RxBus 的初步探索\ndate: 2017-06-20 19:06:56\ntags: RxBus\ncomments: true\n---\n\n## 前言\n5月份项目上线了，之后就在优化项目结构，减少依赖。之前项目一直用的EventBus来作为项目事件流的框架，这两天偶然看到RxBus这个东西，基于RxJava和RxAndroid，考虑到自身的业务需求，由于本身用EventBus的功能比较单一，而发现RxBus足以实现我现有的业务，所以决定踩踩坑。\n<!--more-->\n## 具体实现\n``` Java\npublic class RxBus {\n    private static volatile RxBus mInstance;\n    private final Subject mBus;\n\n    public RxBus() {\n        mBus = new SerializedSubject<>(PublishSubject.create());\n    }\n\n    public static RxBus getInstance() {\n        if (mInstance == null) {\n            synchronized (RxBus.class) {\n                if (mInstance == null) {\n                    mInstance = new RxBus();\n                }\n            }\n        }\n        return mInstance;\n    }\n\n    public void post(Object object) {\n        mBus.onNext(object);\n    }\n\n    public <T> Observable<T> toObserverable(Class<T> eventType) {\n        return mBus.ofType(eventType);\n//        return mBus.filter(eventType::isInstance)\n//                .cast(eventType);\n    }\n}\n```\n目前只是消息的注册，发送。\n#### SerializedSubject\nSerializedSubject 特征是线程安全\n``` Java\npublic SerializedSubject(final Subject<T, R> actual) {\n    super(new OnSubscribe<R>() {\n\n        @Override\n        public void call(Subscriber<? super R> child) {\n            actual.unsafeSubscribe(child);\n        }\n\n    });\n    this.actual = actual;\n    this.observer = new SerializedObserver<T>(actual);\n}\n```\n这里有个小细节，actual 是当前的数据链，这里通过SerializedObserver将数据链做一个转换，类似于map。\n下面我们看SerializedObserver\n``` Java\npublic void onNext(T t) {\n    if (terminated) {\n        return;\n    }\n    synchronized (this) {\n        if (terminated) {\n            return;\n        }\n        if (emitting) {\n            FastList list = queue;\n            if (list == null) {\n                list = new FastList();\n                queue = list;\n            }\n            list.add(NotificationLite.next(t));\n            return;\n        }\n        emitting = true;\n    }\n    try {\n        actual.onNext(t);\n    } catch (Throwable e) {\n        terminated = true;\n        Exceptions.throwOrReport(e, actual, t);\n        return;\n    }\n    for (;;) {\n        FastList list;\n        synchronized (this) {\n            list = queue;\n            if (list == null) {\n                emitting = false;\n                return;\n            }\n            queue = null;\n        }\n        for (Object o : list.array) {\n            if (o == null) {\n                break;\n            }\n            try {\n                if (NotificationLite.accept(actual, o)) {\n                    terminated = true;\n                    return;\n                }\n            } catch (Throwable e) {\n                terminated = true;\n                Exceptions.throwIfFatal(e);\n                actual.onError(OnErrorThrowable.addValueAsLastCause(e, t));\n                return;\n            }\n        }\n    }\n}\n```\n这里丑抽出onNext，我们发现synchronized线程锁，证明当前是线程安全的，当多个线程再要执行onNext，这里线程安全，排队线程会加入queue，然后依次执行。onError，onComplete同理。\n#### PublishSubject\n与普通的Subject不同，在订阅时并不立即触发订阅事件，而是允许我们在任意时刻手动调用onNext(),onError(),onCompleted来触发事件。\n可以看到PublishSubject与普通的Subject最大的不同就是其可以先订阅事件，然后在某一时刻手动调用方法来触发事件。\ndemo：\n``` Java\nPublishSubject<String> publishSubject = PublishSubject.create();\npublishSubject.subscribe(new Action1<String>() {\n        @Override\n        public void call(String s) {\n            // TODO\n        }\n});\npublishSubject.onNext(result);\n```\n我们可以根据我们的业务需求先对Subject进行订阅，然后再默一时刻触发我们的onNext。\n\n## 原理总结\n这里的publishSubject就是在我们\b发出通知的时候才会去onNext，而我们的onNext是线程安全的，\b当并发访问的时候，可以\b依次执行onNext，这里我们要用到ofType这个操作符，用来过滤TargetEvent.class的Observable来实现“发送端”与“接收端”的约束。\n\n## 使用方法\n简单的使用方法\n### 消息发送\n``` Java\nRxBus.getInstance().post(event);\n```\n### 消息注册，取消注册\n这里就不以Activity，Fragment做对照了，基本用法都一样，风向一个View AttachToWindow,DetachFromWindow 的方式 \n``` Java\n@Override\nprotected void onAttachedToWindow() {\n    super.onAttachedToWindow();\n    mSubscription = RxBus.getInstance().toObserverable(IndexLeftBtnGetFocusEvent.class)\n            .compose(RxSchedulers.threadSwitchSchedulers())\n            .subscribe(event -> {\n                // TODO 业务逻辑\n            });\n//        EventBus.getDefault().register(this);\n}\n\n@Override\nprotected void onDetachedFromWindow() {\n    super.onDetachedFromWindow();\n    if (mSubscription.isUnsubscribed()) {\n        mSubscription.unsubscribe();\n    }\n//        EventBus.getDefault().unregister(this);\n}\n```\n## 后记\n这里我只是先用一个小demo来学习一下这里的代码设计，后期会对我们的RxBus优化，比如添加bind，unbind生命周期的相关逻辑。\n","slug":"RxBus 的初步探索","published":1,"updated":"2021-06-28T14:28:31.665Z","layout":"post","photos":[],"link":"","_id":"ckqgq9v5h000b5y8dkm4791up","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>5月份项目上线了，之后就在优化项目结构，减少依赖。之前项目一直用的EventBus来作为项目事件流的框架，这两天偶然看到RxBus这个东西，基于RxJava和RxAndroid，考虑到自身的业务需求，由于本身用EventBus的功能比较单一，而发现RxBus足以实现我现有的业务，所以决定踩踩坑。<br><a id=\"more\"></a></p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RxBus</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> RxBus mInstance;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Subject mBus;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RxBus</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mBus = <span class=\"keyword\">new</span> SerializedSubject&lt;&gt;(PublishSubject.create());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RxBus <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mInstance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (RxBus.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mInstance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mInstance = <span class=\"keyword\">new</span> RxBus();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> mInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">post</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">        mBus.onNext(object);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Observable&lt;T&gt; <span class=\"title\">toObserverable</span><span class=\"params\">(Class&lt;T&gt; eventType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mBus.ofType(eventType);</div><div class=\"line\"><span class=\"comment\">//        return mBus.filter(eventType::isInstance)</span></div><div class=\"line\"><span class=\"comment\">//                .cast(eventType);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>目前只是消息的注册，发送。</p>\n<h4 id=\"SerializedSubject\"><a href=\"#SerializedSubject\" class=\"headerlink\" title=\"SerializedSubject\"></a>SerializedSubject</h4><p>SerializedSubject 特征是线程安全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SerializedSubject</span><span class=\"params\">(<span class=\"keyword\">final</span> Subject&lt;T, R&gt; actual)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> OnSubscribe&lt;R&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> R&gt; child)</span> </span>&#123;</div><div class=\"line\">            actual.unsafeSubscribe(child);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.actual = actual;</div><div class=\"line\">    <span class=\"keyword\">this</span>.observer = <span class=\"keyword\">new</span> SerializedObserver&lt;T&gt;(actual);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里有个小细节，actual 是当前的数据链，这里通过SerializedObserver将数据链做一个转换，类似于map。<br>下面我们看SerializedObserver<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(T t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (terminated) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (terminated) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (emitting) &#123;</div><div class=\"line\">            FastList list = queue;</div><div class=\"line\">            <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                list = <span class=\"keyword\">new</span> FastList();</div><div class=\"line\">                queue = list;</div><div class=\"line\">            &#125;</div><div class=\"line\">            list.add(NotificationLite.next(t));</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        emitting = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        actual.onNext(t);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">        terminated = <span class=\"keyword\">true</span>;</div><div class=\"line\">        Exceptions.throwOrReport(e, actual, t);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">        FastList list;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            list = queue;</div><div class=\"line\">            <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                emitting = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            queue = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Object o : list.array) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (NotificationLite.accept(actual, o)) &#123;</div><div class=\"line\">                    terminated = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">                terminated = <span class=\"keyword\">true</span>;</div><div class=\"line\">                Exceptions.throwIfFatal(e);</div><div class=\"line\">                actual.onError(OnErrorThrowable.addValueAsLastCause(e, t));</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里丑抽出onNext，我们发现synchronized线程锁，证明当前是线程安全的，当多个线程再要执行onNext，这里线程安全，排队线程会加入queue，然后依次执行。onError，onComplete同理。</p>\n<h4 id=\"PublishSubject\"><a href=\"#PublishSubject\" class=\"headerlink\" title=\"PublishSubject\"></a>PublishSubject</h4><p>与普通的Subject不同，在订阅时并不立即触发订阅事件，而是允许我们在任意时刻手动调用onNext(),onError(),onCompleted来触发事件。<br>可以看到PublishSubject与普通的Subject最大的不同就是其可以先订阅事件，然后在某一时刻手动调用方法来触发事件。<br>demo：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">PublishSubject&lt;String&gt; publishSubject = PublishSubject.create();</div><div class=\"line\">publishSubject.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">publishSubject.onNext(result);</div></pre></td></tr></table></figure></p>\n<p>我们可以根据我们的业务需求先对Subject进行订阅，然后再默一时刻触发我们的onNext。</p>\n<h2 id=\"原理总结\"><a href=\"#原理总结\" class=\"headerlink\" title=\"原理总结\"></a>原理总结</h2><p>这里的publishSubject就是在我们\b发出通知的时候才会去onNext，而我们的onNext是线程安全的，\b当并发访问的时候，可以\b依次执行onNext，这里我们要用到ofType这个操作符，用来过滤TargetEvent.class的Observable来实现“发送端”与“接收端”的约束。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>简单的使用方法</p>\n<h3 id=\"消息发送\"><a href=\"#消息发送\" class=\"headerlink\" title=\"消息发送\"></a>消息发送</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">RxBus.getInstance().post(event);</div></pre></td></tr></table></figure>\n<h3 id=\"消息注册，取消注册\"><a href=\"#消息注册，取消注册\" class=\"headerlink\" title=\"消息注册，取消注册\"></a>消息注册，取消注册</h3><p>这里就不以Activity，Fragment做对照了，基本用法都一样，风向一个View AttachToWindow,DetachFromWindow 的方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttachedToWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onAttachedToWindow();</div><div class=\"line\">    mSubscription = RxBus.getInstance().toObserverable(IndexLeftBtnGetFocusEvent.class)</div><div class=\"line\">            .compose(RxSchedulers.threadSwitchSchedulers())</div><div class=\"line\">            .subscribe(event -&gt; &#123;</div><div class=\"line\">                <span class=\"comment\">// TODO 业务逻辑</span></div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"comment\">//        EventBus.getDefault().register(this);</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDetachedFromWindow();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mSubscription.isUnsubscribed()) &#123;</div><div class=\"line\">        mSubscription.unsubscribe();</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//        EventBus.getDefault().unregister(this);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这里我只是先用一个小demo来学习一下这里的代码设计，后期会对我们的RxBus优化，比如添加bind，unbind生命周期的相关逻辑。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>5月份项目上线了，之后就在优化项目结构，减少依赖。之前项目一直用的EventBus来作为项目事件流的框架，这两天偶然看到RxBus这个东西，基于RxJava和RxAndroid，考虑到自身的业务需求，由于本身用EventBus的功能比较单一，而发现RxBus足以实现我现有的业务，所以决定踩踩坑。<br>","more":"</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RxBus</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> RxBus mInstance;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Subject mBus;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RxBus</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mBus = <span class=\"keyword\">new</span> SerializedSubject&lt;&gt;(PublishSubject.create());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RxBus <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mInstance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">synchronized</span> (RxBus.class) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (mInstance == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    mInstance = <span class=\"keyword\">new</span> RxBus();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> mInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">post</span><span class=\"params\">(Object object)</span> </span>&#123;</div><div class=\"line\">        mBus.onNext(object);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">Observable&lt;T&gt; <span class=\"title\">toObserverable</span><span class=\"params\">(Class&lt;T&gt; eventType)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> mBus.ofType(eventType);</div><div class=\"line\"><span class=\"comment\">//        return mBus.filter(eventType::isInstance)</span></div><div class=\"line\"><span class=\"comment\">//                .cast(eventType);</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>目前只是消息的注册，发送。</p>\n<h4 id=\"SerializedSubject\"><a href=\"#SerializedSubject\" class=\"headerlink\" title=\"SerializedSubject\"></a>SerializedSubject</h4><p>SerializedSubject 特征是线程安全<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SerializedSubject</span><span class=\"params\">(<span class=\"keyword\">final</span> Subject&lt;T, R&gt; actual)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(<span class=\"keyword\">new</span> OnSubscribe&lt;R&gt;() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Subscriber&lt;? <span class=\"keyword\">super</span> R&gt; child)</span> </span>&#123;</div><div class=\"line\">            actual.unsafeSubscribe(child);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.actual = actual;</div><div class=\"line\">    <span class=\"keyword\">this</span>.observer = <span class=\"keyword\">new</span> SerializedObserver&lt;T&gt;(actual);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里有个小细节，actual 是当前的数据链，这里通过SerializedObserver将数据链做一个转换，类似于map。<br>下面我们看SerializedObserver<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(T t)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (terminated) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (terminated) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (emitting) &#123;</div><div class=\"line\">            FastList list = queue;</div><div class=\"line\">            <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                list = <span class=\"keyword\">new</span> FastList();</div><div class=\"line\">                queue = list;</div><div class=\"line\">            &#125;</div><div class=\"line\">            list.add(NotificationLite.next(t));</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        emitting = <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        actual.onNext(t);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">        terminated = <span class=\"keyword\">true</span>;</div><div class=\"line\">        Exceptions.throwOrReport(e, actual, t);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</div><div class=\"line\">        FastList list;</div><div class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">            list = queue;</div><div class=\"line\">            <span class=\"keyword\">if</span> (list == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                emitting = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            queue = <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">for</span> (Object o : list.array) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (o == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (NotificationLite.accept(actual, o)) &#123;</div><div class=\"line\">                    terminated = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</div><div class=\"line\">                terminated = <span class=\"keyword\">true</span>;</div><div class=\"line\">                Exceptions.throwIfFatal(e);</div><div class=\"line\">                actual.onError(OnErrorThrowable.addValueAsLastCause(e, t));</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里丑抽出onNext，我们发现synchronized线程锁，证明当前是线程安全的，当多个线程再要执行onNext，这里线程安全，排队线程会加入queue，然后依次执行。onError，onComplete同理。</p>\n<h4 id=\"PublishSubject\"><a href=\"#PublishSubject\" class=\"headerlink\" title=\"PublishSubject\"></a>PublishSubject</h4><p>与普通的Subject不同，在订阅时并不立即触发订阅事件，而是允许我们在任意时刻手动调用onNext(),onError(),onCompleted来触发事件。<br>可以看到PublishSubject与普通的Subject最大的不同就是其可以先订阅事件，然后在某一时刻手动调用方法来触发事件。<br>demo：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">PublishSubject&lt;String&gt; publishSubject = PublishSubject.create();</div><div class=\"line\">publishSubject.subscribe(<span class=\"keyword\">new</span> Action1&lt;String&gt;() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(String s)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// TODO</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">publishSubject.onNext(result);</div></pre></td></tr></table></figure></p>\n<p>我们可以根据我们的业务需求先对Subject进行订阅，然后再默一时刻触发我们的onNext。</p>\n<h2 id=\"原理总结\"><a href=\"#原理总结\" class=\"headerlink\" title=\"原理总结\"></a>原理总结</h2><p>这里的publishSubject就是在我们\b发出通知的时候才会去onNext，而我们的onNext是线程安全的，\b当并发访问的时候，可以\b依次执行onNext，这里我们要用到ofType这个操作符，用来过滤TargetEvent.class的Observable来实现“发送端”与“接收端”的约束。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>简单的使用方法</p>\n<h3 id=\"消息发送\"><a href=\"#消息发送\" class=\"headerlink\" title=\"消息发送\"></a>消息发送</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">RxBus.getInstance().post(event);</div></pre></td></tr></table></figure>\n<h3 id=\"消息注册，取消注册\"><a href=\"#消息注册，取消注册\" class=\"headerlink\" title=\"消息注册，取消注册\"></a>消息注册，取消注册</h3><p>这里就不以Activity，Fragment做对照了，基本用法都一样，风向一个View AttachToWindow,DetachFromWindow 的方式<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onAttachedToWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onAttachedToWindow();</div><div class=\"line\">    mSubscription = RxBus.getInstance().toObserverable(IndexLeftBtnGetFocusEvent.class)</div><div class=\"line\">            .compose(RxSchedulers.threadSwitchSchedulers())</div><div class=\"line\">            .subscribe(event -&gt; &#123;</div><div class=\"line\">                <span class=\"comment\">// TODO 业务逻辑</span></div><div class=\"line\">            &#125;);</div><div class=\"line\"><span class=\"comment\">//        EventBus.getDefault().register(this);</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onDetachedFromWindow();</div><div class=\"line\">    <span class=\"keyword\">if</span> (mSubscription.isUnsubscribed()) &#123;</div><div class=\"line\">        mSubscription.unsubscribe();</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"comment\">//        EventBus.getDefault().unregister(this);</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>这里我只是先用一个小demo来学习一下这里的代码设计，后期会对我们的RxBus优化，比如添加bind，unbind生命周期的相关逻辑。</p>"},{"title":"RecyclerView 知识点","data":"2017-09-24T16:00:00.000Z","comments":1,"_content":"\n## 前言\n好久没写博客了，到新公司差不多一个月了，之前做Android TV 开发，现在开始做手机端了，写手机端App 或许是一个很久的执念吧。\n就最近的页面需求，好好研究了一下ViewGroup，RecyclerView 的绘制，这里打算立个flag，记一下自己踩的坑。\n先立个自己的思路：\n***这里再提议嘴，一般我们处理一个view的UI交互，动效，最好来封装控件，从我们的mvp，mvvm等等模式里抽离动画，交互的具体代码！！！！！！！***\n## 最近的一个需求\n最近碰到一个需求，如视频所示：\n<!--more-->\n<video width=\"494\" height=\"878\" controls>\n    <source src=\"https://raw.githubusercontent.com/JarvisGG/JarvisBlog/master/source/video/demo.mp4\">\n</video>\n\n如图所示动画过程：\n1.上下滚动是，底图是跟着浮动的（item从头到尾滑动recycerview的高度，但是图片需要滚动全屏距离）.\n2.点击item，列表展开.\n3.底图放大到全屏.\n\n## 涉及到的知识点\n### itemDecoration 是什么\n这里我们先看看源码：\n``` Java\npublic static abstract class ItemDecoration {\n    public void onDraw(Canvas c, RecyclerView parent, State state) {\n        onDraw(c, parent);\n    }\n\n    @Deprecated\n    public void onDraw(Canvas c, RecyclerView parent) {\n    }\n\n    public void onDrawOver(Canvas c, RecyclerView parent, State state) {\n        onDrawOver(c, parent);\n    }\n\n    @Deprecated\n    public void onDrawOver(Canvas c, RecyclerView parent) {\n    }\n\n    @Deprecated\n    public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) {\n        outRect.set(0, 0, 0, 0);\n    }\n    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State state) {\n        getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),\n                parent);\n    }\n}\n```\n这里我们看到是直接在**recyclerview的画布上用Canvas**画出来的，这地方很重要。\n### ItemView 的绘制\n我们可以看源码\n``` Java\n@Override\nprotected int getChildDrawingOrder(int childCount, int i) {\n    return super.getChildDrawingOrder(childCount, i);\n}\n```\n可以通过控制这个方法来决定recyclerview itemview的绘制顺序\n``` Java\n@Override\nprotected void dispatchDraw(Canvas canvas) {\n    super.dispatchDraw(canvas);\n}\n```\n这里是具体执行recyclerview 绘制itemview的地方\n之前我在做recyclerview itemview滑到屏幕中间的时候放大，由于itemview的绘制顺序，放大的itemview会被后面的itemview盖住，这里我通过复写这个方法来完成。\n``` Java\n\n@Override\npublic void onChildAttachedToWindow(View child) {\n    this.post(() -> {\n        if (child instanceof ContainerCardView) {\n            mContainerCardView.put((ContainerCardView) child, TopRecyclerView.this.getChildAdapterPosition(child));\n        }\n    });\n    super.onChildAttachedToWindow(child);\n}\n\n@Override\nprotected void dispatchDraw(Canvas canvas) {\n    // 第一遍绘制所有view\n    super.dispatchDraw(canvas);\n    // 开始绘制特定view，保证层级最高\n    List<ContainerCardView> crashChildViews = new ArrayList<>();\n    crashChildViews.addAll(mContainerCardView.keySet());\n\n    for (int i = 0; i < crashChildViews.size(); i++) {\n        super.drawChild(canvas, crashChildViews.get(i), this.getDrawingTime());\n        crashChildViews.get(i).setTag(\"draw\");\n    }\n}\n```\nitemview的layout\n``` Java\n@Override\npublic void onLayoutChildren(Recycler recycler, State state) {\n    super.onLayoutChildren(recycler, state);\n}\n```\n### recyclerview（ViewGroup） 以及 itemview 重绘\n对于重绘我们应该多做注意：\n1.频繁重绘，会导致vsync信号间隔，gpu来不及绘制framequeue里面的frames，导致丢帧。\n2.itemview 重绘会导致Android TV焦点丢失。\n3.itemview 重绘，假如外层的viewgroup是wrapcontent，将会导致递归到根节点（宽高给死的viewgroup）的所有view重绘。假如其中有layout位置动画，将会导致动画失效。\n4.避免子view重绘制导致上层跟着重绘制，最简单的方式是给定上层viewgroup固定的框高，任你子view变化莫测，我岿然不动，这样就可以保存一些layout的动画状态。\n\n## 具体的实现方式\n### 拆分动画\n#### recyclerview 展开，收缩动画：\n``` Java\n/**\n    * 展开动画\n    * @param childView\n    * @param selectedPosition\n    */\npublic void excuteExtendAnim(View childView, int selectedPosition) {\n    this.mTargetView = childView;\n    this.mSelectPosition = selectedPosition;\n    \n    int screenPosition[] = new int[2];\n    childView.getLocationOnScreen(screenPosition);\n\n    List<Animator> excuteChildAnim = new ArrayList<>();\n    List<View> excuteChilds = new ArrayList<>();\n    for (int i = 0; i < getChildCount(); i++) {\n        View child = this.getChildAt(i);\n        int position = getChildAdapterPosition(child);\n        if (position < selectedPosition) {\n            excuteChilds.add(child);\n            final ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, 0, -screenPosition[1] + mParentScreenPosition[1]);\n            objectAnimator.setDuration(mDuration);\n            excuteChildAnim.add(objectAnimator);\n        } else if (position > selectedPosition) {\n            excuteChilds.add(child);\n            final ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, 0, Utils.getScreenSizeY(mContext) - screenPosition[1] - childView.getHeight());\n            objectAnimator.setDuration(mDuration);\n            excuteChildAnim.add(objectAnimator);\n        }\n    }\n    excuteItemAnim(excuteChildAnim, false);\n}\n\n/**\n    * 收缩动画\n    */\npublic void excuteShrinkAnim() {\n    List<Animator> excuteChildAnim = new ArrayList<>();\n    for (int i = 0; i < getChildCount(); i++) {\n        View child = this.getChildAt(i);\n        int position = getChildAdapterPosition(child);\n        if (position != mSelectPosition) {\n            float startY = child.getTranslationY();\n            final ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, startY, 0);\n            objectAnimator.setDuration(200);\n            excuteChildAnim.add(objectAnimator);\n        }\n    }\n    excuteItemAnim(excuteChildAnim, true);\n}\n\nprivate void excuteItemAnim(List<Animator> excuteChildAnim, boolean isShrink) {\n\n    AnimatorSet set = new AnimatorSet();\n    set.playTogether(excuteChildAnim);\n    set.setInterpolator(new DecelerateInterpolator());\n    set.start();\n    notifyAnimStateStart(null, !isShrink);\n    set.addListener(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animator) {\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animator) {\n            notifyAnimStateEnd(animator, !isShrink);\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animator) {\n            notifyAnimStateCancel(animator, !isShrink);\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animator) {\n            notifyAnimStateRepeat(animator, !isShrink);\n        }\n    });\n}\n```\n#### recyclerview 滚动，itemview 的imageview 的移动动画：\nrecyclerview：\n``` Java\n/**\n * 定义接口\n */\npublic interface ScrollStateCallback {\n    public void onScrollStateChanged(RecyclerView recyclerView, int newState);\n    public void onScrolled(int headerHeight, int totalHeight, int dx, int dy);\n}\n／**\n * 将实现这个接口的cardview 添加到集合\n *／\n@Override\npublic void onChildAttachedToWindow(View child) {\n    super.onChildAttachedToWindow(child);\n    if (child instanceof ScrollStateCallback) {\n        mScrollStateCallback.add((ScrollStateCallback) child);\n    }\n    initChildOperator(child);\n}\n／**\n * 将实现这个接口的cardview 移除集合\n *／\n@Override\npublic void onChildDetachedFromWindow(View child) {\n    super.onChildDetachedFromWindow(child);\n    if (child instanceof ScrollStateCallback) {\n        mScrollStateCallback.remove(child);\n    }\n    detachChildOperator(child);\n}\n\nprivate void initView(Context context) {\n    this.mContext = context;\n    this.addOnScrollListener(new OnScrollListener() {\n        @Override\n        public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\n            super.onScrollStateChanged(recyclerView, newState);\n            notifyScrollStateChanged(recyclerView, newState); // 开始调用方法\n        }\n\n        @Override\n        public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n            super.onScrolled(recyclerView, dx, dy);\n            notifyScrolled(recyclerView, dx, dy);// 开始调用Scroll方法\n        }\n    });\n}\n\nprivate void notifyScrolled(RecyclerView recyclerView, int dx, int dy) {\n    for (ScrollStateCallback callback : mScrollStateCallback) {\n        callback.onScrolled(mHeaderHeight, mTotalHeight, dx, dy);\n    }\n}\n\nprivate void notifyScrollStateChanged(RecyclerView recyclerView, int newState) {\n    for (ScrollStateCallback callback : mScrollStateCallback) {\n        callback.onScrollStateChanged(recyclerView, newState);\n    }\n}\n\n```\ncardview 继承 ScrollStateCallback:\n``` Java\n@Override\npublic void onScrollStateChanged(RecyclerView recyclerView, int newState) {\n\n}\n\n@Override\npublic void onScrolled(int mHeaderHeight, int mTotalHeight, int dx, int dy) {\n    excuteAdCardAnim(mHeaderHeight, mTotalHeight, dx, dy);\n}\n\n/**\n * 数学公式推倒\n */\npublic void excuteAdCardAnim(int mHeaderHeight, int mTotalHeight, int dx, int dy) {\n    int topOffset = this.getTop();\n    int a = topOffset + mHeaderHeight;\n    int b = topOffset * mTotalHeight;\n    int c = mTotalHeight - mHeaderHeight;\n    int top = a - b / c - mHeaderHeight;\n    if (top > 0) {\n        top = topOffset;\n    }\n    // 这里要注意我刚才提出的重回问题，不然这块儿的动画会因为重绘制失效\n    this.mImageView.dragPosition(\n            mImageView.getLeft(),\n            top - topOffset,\n            mImageView.getRight(),\n            top + mImageView.getHeight() - topOffset);\n}\n```\n#### 关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview 的目标itemview 需要也保持移动来保证跟后面的imageview保持一致：\n``` Java\n@Override\npublic void onAnimationStart(Ad.Creative creative, boolean isShrink) {\n    this.mCreative = creative;\n    mZHFloatAdFullView.setCreative(mCreative);\n    AnimatorSet set = new AnimatorSet();\n    List<Animator> animatorList = new ArrayList<>();\n\n    if (isShrink) {\n\n        ValueAnimator downAnim = ValueAnimator.ofInt(0, mLastTopHeight);\n        downAnim.addUpdateListener(new AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));\n        animatorList.add(downAnim);\n\n        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(this, View.TRANSLATION_Y, 0);\n        animatorList.add(parentAnim);\n\n        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();\n        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, 0);\n        animatorList.add(clickAnim);\n\n    } else {\n        int currentTop = mZHFloatAdRecyclerView.getCurrentAnimItemLogoViewTop();\n        mLastTopHeight = currentTop;\n        mLastItemHeight = mZHFloatAdRecyclerView.getCurrentAnimItemMargetTop();\n\n        ValueAnimator upAnim = ValueAnimator.ofInt(currentTop, 0);\n        upAnim.addUpdateListener(new AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));\n        animatorList.add(upAnim);\n\n        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(this, View.TRANSLATION_Y,  -mHeaderHeight);\n        animatorList.add(parentAnim);\n\n        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();\n        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, -currentTop);\n        animatorList.add(clickAnim);\n\n    }\n\n    set.playTogether(animatorList);\n    set.setInterpolator(new AccelerateDecelerateInterpolator());\n    set.addListener(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animator) {\n\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animator) {\n            Log.e(\"topOffset ------> \", ZHFloatAdFloatView.this.getTop()+\"\");\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animator) {\n\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animator) {\n\n        }\n    });\n    set.setDuration(sAdNormalAnimDuration);\n    set.start();\n}\n\nclass AdLogoViewAnimatorUpdateListener implements ValueAnimator.AnimatorUpdateListener {\n\n    int totalTop;\n    int itemTop;\n\n    public AdLogoViewAnimatorUpdateListener(int totalTop, int itemTop) {\n        this.totalTop = totalTop;\n        this.itemTop = itemTop;\n    }\n\n    @Override\n    public void onAnimationUpdate(ValueAnimator valueAnimator) {\n        int top = (int)valueAnimator.getAnimatedValue();\n        if (mZHFloatAdRecyclerView.getCurrentClickAdCardType() == ZHFloatAdCardView.ADCardViewType.FLOAT) {\n            mAdLogoView.dragPosition(\n                    mAdLogoView.getLeft(),\n                    top,\n                    mAdLogoView.getRight(),\n                    top + mAdLogoView.getHeight());\n        }\n    }\n}\n```\n### 手势控制\n展开第二级页面，我们要监控手势，往上滑，就控制滑动到webview，在webview状态想上滑，就滑到顶部，漏出imageview。\n``` Java\n@Override\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n\n    if (isOvering) {\n        return true;\n    }\n\n    if (mCurrent == 0) {\n        return true;\n    }\n    if (mWebView.getScrollY() == 0) {\n        switch (ev.getAction()) {\n            case ACTION_DOWN:\n                lastY = y = ev.getY();\n                break;\n            case ACTION_MOVE:\n                y = ev.getY();\n                deltaY = (int) (lastY - y);\n                if (deltaY < -mTouchThreshold) {\n                    isOvering = true;\n                    mZHFloatAdFloatView.excuteScrollAnim(mContext, this, false,\n                            () -> {\n                        isOvering = false;\n                        setCurrent(0);\n                    });\n                }\n                break;\n            case ACTION_UP:\n                break;\n            default:\n                break;\n        }\n    }\n    return super.onInterceptTouchEvent(ev);\n}\n\n@Override\npublic boolean onTouchEvent(MotionEvent event) {\n\n    if (isOvering) {\n        return true;\n    }\n\n    if (mCurrent == 0) {\n        switch (event.getAction()) {\n            case ACTION_DOWN:\n                lastY = y = event.getY();\n                return true;\n            case ACTION_MOVE:\n                y = event.getY();\n                deltaY = (int) (lastY - y);\n                if (deltaY > mTouchThreshold) {\n                    isOvering = true;\n                    mZHFloatAdFloatView.excuteScrollAnim(mContext, this, true,\n                            () -> {\n                                isOvering = false;\n                                setCurrent(1);\n                            });\n                }\n                break;\n            case ACTION_UP:\n                break;\n            default:\n                break;\n        }\n    }\n    return super.onTouchEvent(event);\n}\n```\n这里Touch事件的传递方式就不说了。自行google。\n### webview的基本配置\n``` Java\nprivate void initWebSettings() {\n    WebSettings settings = mWebView.getSettings();\n    //支持JS\n    settings.setJavaScriptEnabled(true);\n    //支持插件\n    settings.setPluginState(WebSettings.PluginState.ON);\n    //设置适应屏幕\n    settings.setUseWideViewPort(true);\n    settings.setLoadWithOverviewMode(true);\n    //支持缩放\n    settings.setSupportZoom(false);\n    //隐藏原生的缩放控件\n    settings.setDisplayZoomControls(false);\n    //支持内容重新布局\n    settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);\n    settings.supportMultipleWindows();\n    settings.setSupportMultipleWindows(true);\n    //设置缓存模式\n    settings.setDomStorageEnabled(true);\n    settings.setDatabaseEnabled(true);\n    settings.setCacheMode(WebSettings.LOAD_DEFAULT);\n    settings.setAppCacheEnabled(true);\n    settings.setAppCachePath(mWebView.getContext().getCacheDir().getAbsolutePath());\n\n    //设置可访问文件\n    settings.setAllowFileAccess(true);\n    //支持自动加载图片\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        settings.setLoadsImagesAutomatically(true);\n    } else {\n        settings.setLoadsImagesAutomatically(false);\n    }\n    //设置编码格式\n    settings.setDefaultTextEncodingName(\"UTF-8\");\n}\n\nprivate void initWebViewClient() {\n    mWebView.setWebViewClient(new WebViewClient() {\n\n        //页面开始加载时\n        @Override\n        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n            super.onPageStarted(view, url, favicon);\n        }\n\n\n        //页面完成加载时\n        @Override\n        public void onPageFinished(WebView view, String url) {\n            super.onPageFinished(view, url);\n        }\n\n        //是否在WebView内加载新页面\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n            return super.shouldOverrideUrlLoading(view, request);\n        }\n\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, String url) {\n            if (url.contains(HTTP) || url.contains(HTTPS)) {\n                return super.shouldOverrideUrlLoading(view, url);\n            } else if (UriHandlerDispatcher.handleUri(getContext(), url)) {\n                return true;\n            } else {\n                return super.shouldOverrideUrlLoading(view, url);\n            }\n        }\n\n        //网络错误时回调的方法\n        @Override\n        public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n            super.onReceivedError(view, request, error);\n        }\n\n        @Override\n        public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\n            super.onReceivedHttpError(view, request, errorResponse);\n        }\n\n        @Override\n        public void doUpdateVisitedHistory(WebView view, String url, boolean isReload) {\n            super.doUpdateVisitedHistory(view, url, isReload);\n            mWebView.clearHistory(); // 不保存历史，不允许goBack\n        }\n    });\n}\n\nprivate void initWebChromeClient() {\n\n    mWebView.setWebChromeClient(new WebChromeClient() {\n\n        @Override\n        public void onReceivedTitle(WebView view, String title) {\n            super.onReceivedTitle(view, title);\n        }\n\n        @Override\n        public void onProgressChanged(WebView view, int newProgress) {\n            super.onProgressChanged(view, newProgress);\n        }\n\n        @Override\n        public Bitmap getDefaultVideoPoster() {\n            return super.getDefaultVideoPoster();\n        }\n    });\n}\n```\n## 总结\n之前走了不少坑。这个是PlanB+，之前的心路历程PlanA -> PlanB -> PlanC -> PlanB+。😂 \n好在看了不少源码，感觉收获挺大的。后续打算还是继续结合具体需求，整理记录知识点儿。\n\n\n\n","source":"_posts/RecyclerView 知识点.md","raw":"---\ntitle: RecyclerView 知识点\ndata: 2017-09-25\ntags: Android View\ncomments: true\n---\n\n## 前言\n好久没写博客了，到新公司差不多一个月了，之前做Android TV 开发，现在开始做手机端了，写手机端App 或许是一个很久的执念吧。\n就最近的页面需求，好好研究了一下ViewGroup，RecyclerView 的绘制，这里打算立个flag，记一下自己踩的坑。\n先立个自己的思路：\n***这里再提议嘴，一般我们处理一个view的UI交互，动效，最好来封装控件，从我们的mvp，mvvm等等模式里抽离动画，交互的具体代码！！！！！！！***\n## 最近的一个需求\n最近碰到一个需求，如视频所示：\n<!--more-->\n<video width=\"494\" height=\"878\" controls>\n    <source src=\"https://raw.githubusercontent.com/JarvisGG/JarvisBlog/master/source/video/demo.mp4\">\n</video>\n\n如图所示动画过程：\n1.上下滚动是，底图是跟着浮动的（item从头到尾滑动recycerview的高度，但是图片需要滚动全屏距离）.\n2.点击item，列表展开.\n3.底图放大到全屏.\n\n## 涉及到的知识点\n### itemDecoration 是什么\n这里我们先看看源码：\n``` Java\npublic static abstract class ItemDecoration {\n    public void onDraw(Canvas c, RecyclerView parent, State state) {\n        onDraw(c, parent);\n    }\n\n    @Deprecated\n    public void onDraw(Canvas c, RecyclerView parent) {\n    }\n\n    public void onDrawOver(Canvas c, RecyclerView parent, State state) {\n        onDrawOver(c, parent);\n    }\n\n    @Deprecated\n    public void onDrawOver(Canvas c, RecyclerView parent) {\n    }\n\n    @Deprecated\n    public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) {\n        outRect.set(0, 0, 0, 0);\n    }\n    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, State state) {\n        getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),\n                parent);\n    }\n}\n```\n这里我们看到是直接在**recyclerview的画布上用Canvas**画出来的，这地方很重要。\n### ItemView 的绘制\n我们可以看源码\n``` Java\n@Override\nprotected int getChildDrawingOrder(int childCount, int i) {\n    return super.getChildDrawingOrder(childCount, i);\n}\n```\n可以通过控制这个方法来决定recyclerview itemview的绘制顺序\n``` Java\n@Override\nprotected void dispatchDraw(Canvas canvas) {\n    super.dispatchDraw(canvas);\n}\n```\n这里是具体执行recyclerview 绘制itemview的地方\n之前我在做recyclerview itemview滑到屏幕中间的时候放大，由于itemview的绘制顺序，放大的itemview会被后面的itemview盖住，这里我通过复写这个方法来完成。\n``` Java\n\n@Override\npublic void onChildAttachedToWindow(View child) {\n    this.post(() -> {\n        if (child instanceof ContainerCardView) {\n            mContainerCardView.put((ContainerCardView) child, TopRecyclerView.this.getChildAdapterPosition(child));\n        }\n    });\n    super.onChildAttachedToWindow(child);\n}\n\n@Override\nprotected void dispatchDraw(Canvas canvas) {\n    // 第一遍绘制所有view\n    super.dispatchDraw(canvas);\n    // 开始绘制特定view，保证层级最高\n    List<ContainerCardView> crashChildViews = new ArrayList<>();\n    crashChildViews.addAll(mContainerCardView.keySet());\n\n    for (int i = 0; i < crashChildViews.size(); i++) {\n        super.drawChild(canvas, crashChildViews.get(i), this.getDrawingTime());\n        crashChildViews.get(i).setTag(\"draw\");\n    }\n}\n```\nitemview的layout\n``` Java\n@Override\npublic void onLayoutChildren(Recycler recycler, State state) {\n    super.onLayoutChildren(recycler, state);\n}\n```\n### recyclerview（ViewGroup） 以及 itemview 重绘\n对于重绘我们应该多做注意：\n1.频繁重绘，会导致vsync信号间隔，gpu来不及绘制framequeue里面的frames，导致丢帧。\n2.itemview 重绘会导致Android TV焦点丢失。\n3.itemview 重绘，假如外层的viewgroup是wrapcontent，将会导致递归到根节点（宽高给死的viewgroup）的所有view重绘。假如其中有layout位置动画，将会导致动画失效。\n4.避免子view重绘制导致上层跟着重绘制，最简单的方式是给定上层viewgroup固定的框高，任你子view变化莫测，我岿然不动，这样就可以保存一些layout的动画状态。\n\n## 具体的实现方式\n### 拆分动画\n#### recyclerview 展开，收缩动画：\n``` Java\n/**\n    * 展开动画\n    * @param childView\n    * @param selectedPosition\n    */\npublic void excuteExtendAnim(View childView, int selectedPosition) {\n    this.mTargetView = childView;\n    this.mSelectPosition = selectedPosition;\n    \n    int screenPosition[] = new int[2];\n    childView.getLocationOnScreen(screenPosition);\n\n    List<Animator> excuteChildAnim = new ArrayList<>();\n    List<View> excuteChilds = new ArrayList<>();\n    for (int i = 0; i < getChildCount(); i++) {\n        View child = this.getChildAt(i);\n        int position = getChildAdapterPosition(child);\n        if (position < selectedPosition) {\n            excuteChilds.add(child);\n            final ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, 0, -screenPosition[1] + mParentScreenPosition[1]);\n            objectAnimator.setDuration(mDuration);\n            excuteChildAnim.add(objectAnimator);\n        } else if (position > selectedPosition) {\n            excuteChilds.add(child);\n            final ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, 0, Utils.getScreenSizeY(mContext) - screenPosition[1] - childView.getHeight());\n            objectAnimator.setDuration(mDuration);\n            excuteChildAnim.add(objectAnimator);\n        }\n    }\n    excuteItemAnim(excuteChildAnim, false);\n}\n\n/**\n    * 收缩动画\n    */\npublic void excuteShrinkAnim() {\n    List<Animator> excuteChildAnim = new ArrayList<>();\n    for (int i = 0; i < getChildCount(); i++) {\n        View child = this.getChildAt(i);\n        int position = getChildAdapterPosition(child);\n        if (position != mSelectPosition) {\n            float startY = child.getTranslationY();\n            final ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, startY, 0);\n            objectAnimator.setDuration(200);\n            excuteChildAnim.add(objectAnimator);\n        }\n    }\n    excuteItemAnim(excuteChildAnim, true);\n}\n\nprivate void excuteItemAnim(List<Animator> excuteChildAnim, boolean isShrink) {\n\n    AnimatorSet set = new AnimatorSet();\n    set.playTogether(excuteChildAnim);\n    set.setInterpolator(new DecelerateInterpolator());\n    set.start();\n    notifyAnimStateStart(null, !isShrink);\n    set.addListener(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animator) {\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animator) {\n            notifyAnimStateEnd(animator, !isShrink);\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animator) {\n            notifyAnimStateCancel(animator, !isShrink);\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animator) {\n            notifyAnimStateRepeat(animator, !isShrink);\n        }\n    });\n}\n```\n#### recyclerview 滚动，itemview 的imageview 的移动动画：\nrecyclerview：\n``` Java\n/**\n * 定义接口\n */\npublic interface ScrollStateCallback {\n    public void onScrollStateChanged(RecyclerView recyclerView, int newState);\n    public void onScrolled(int headerHeight, int totalHeight, int dx, int dy);\n}\n／**\n * 将实现这个接口的cardview 添加到集合\n *／\n@Override\npublic void onChildAttachedToWindow(View child) {\n    super.onChildAttachedToWindow(child);\n    if (child instanceof ScrollStateCallback) {\n        mScrollStateCallback.add((ScrollStateCallback) child);\n    }\n    initChildOperator(child);\n}\n／**\n * 将实现这个接口的cardview 移除集合\n *／\n@Override\npublic void onChildDetachedFromWindow(View child) {\n    super.onChildDetachedFromWindow(child);\n    if (child instanceof ScrollStateCallback) {\n        mScrollStateCallback.remove(child);\n    }\n    detachChildOperator(child);\n}\n\nprivate void initView(Context context) {\n    this.mContext = context;\n    this.addOnScrollListener(new OnScrollListener() {\n        @Override\n        public void onScrollStateChanged(RecyclerView recyclerView, int newState) {\n            super.onScrollStateChanged(recyclerView, newState);\n            notifyScrollStateChanged(recyclerView, newState); // 开始调用方法\n        }\n\n        @Override\n        public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\n            super.onScrolled(recyclerView, dx, dy);\n            notifyScrolled(recyclerView, dx, dy);// 开始调用Scroll方法\n        }\n    });\n}\n\nprivate void notifyScrolled(RecyclerView recyclerView, int dx, int dy) {\n    for (ScrollStateCallback callback : mScrollStateCallback) {\n        callback.onScrolled(mHeaderHeight, mTotalHeight, dx, dy);\n    }\n}\n\nprivate void notifyScrollStateChanged(RecyclerView recyclerView, int newState) {\n    for (ScrollStateCallback callback : mScrollStateCallback) {\n        callback.onScrollStateChanged(recyclerView, newState);\n    }\n}\n\n```\ncardview 继承 ScrollStateCallback:\n``` Java\n@Override\npublic void onScrollStateChanged(RecyclerView recyclerView, int newState) {\n\n}\n\n@Override\npublic void onScrolled(int mHeaderHeight, int mTotalHeight, int dx, int dy) {\n    excuteAdCardAnim(mHeaderHeight, mTotalHeight, dx, dy);\n}\n\n/**\n * 数学公式推倒\n */\npublic void excuteAdCardAnim(int mHeaderHeight, int mTotalHeight, int dx, int dy) {\n    int topOffset = this.getTop();\n    int a = topOffset + mHeaderHeight;\n    int b = topOffset * mTotalHeight;\n    int c = mTotalHeight - mHeaderHeight;\n    int top = a - b / c - mHeaderHeight;\n    if (top > 0) {\n        top = topOffset;\n    }\n    // 这里要注意我刚才提出的重回问题，不然这块儿的动画会因为重绘制失效\n    this.mImageView.dragPosition(\n            mImageView.getLeft(),\n            top - topOffset,\n            mImageView.getRight(),\n            top + mImageView.getHeight() - topOffset);\n}\n```\n#### 关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview 的目标itemview 需要也保持移动来保证跟后面的imageview保持一致：\n``` Java\n@Override\npublic void onAnimationStart(Ad.Creative creative, boolean isShrink) {\n    this.mCreative = creative;\n    mZHFloatAdFullView.setCreative(mCreative);\n    AnimatorSet set = new AnimatorSet();\n    List<Animator> animatorList = new ArrayList<>();\n\n    if (isShrink) {\n\n        ValueAnimator downAnim = ValueAnimator.ofInt(0, mLastTopHeight);\n        downAnim.addUpdateListener(new AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));\n        animatorList.add(downAnim);\n\n        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(this, View.TRANSLATION_Y, 0);\n        animatorList.add(parentAnim);\n\n        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();\n        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, 0);\n        animatorList.add(clickAnim);\n\n    } else {\n        int currentTop = mZHFloatAdRecyclerView.getCurrentAnimItemLogoViewTop();\n        mLastTopHeight = currentTop;\n        mLastItemHeight = mZHFloatAdRecyclerView.getCurrentAnimItemMargetTop();\n\n        ValueAnimator upAnim = ValueAnimator.ofInt(currentTop, 0);\n        upAnim.addUpdateListener(new AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));\n        animatorList.add(upAnim);\n\n        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(this, View.TRANSLATION_Y,  -mHeaderHeight);\n        animatorList.add(parentAnim);\n\n        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();\n        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, -currentTop);\n        animatorList.add(clickAnim);\n\n    }\n\n    set.playTogether(animatorList);\n    set.setInterpolator(new AccelerateDecelerateInterpolator());\n    set.addListener(new Animator.AnimatorListener() {\n        @Override\n        public void onAnimationStart(Animator animator) {\n\n        }\n\n        @Override\n        public void onAnimationEnd(Animator animator) {\n            Log.e(\"topOffset ------> \", ZHFloatAdFloatView.this.getTop()+\"\");\n        }\n\n        @Override\n        public void onAnimationCancel(Animator animator) {\n\n        }\n\n        @Override\n        public void onAnimationRepeat(Animator animator) {\n\n        }\n    });\n    set.setDuration(sAdNormalAnimDuration);\n    set.start();\n}\n\nclass AdLogoViewAnimatorUpdateListener implements ValueAnimator.AnimatorUpdateListener {\n\n    int totalTop;\n    int itemTop;\n\n    public AdLogoViewAnimatorUpdateListener(int totalTop, int itemTop) {\n        this.totalTop = totalTop;\n        this.itemTop = itemTop;\n    }\n\n    @Override\n    public void onAnimationUpdate(ValueAnimator valueAnimator) {\n        int top = (int)valueAnimator.getAnimatedValue();\n        if (mZHFloatAdRecyclerView.getCurrentClickAdCardType() == ZHFloatAdCardView.ADCardViewType.FLOAT) {\n            mAdLogoView.dragPosition(\n                    mAdLogoView.getLeft(),\n                    top,\n                    mAdLogoView.getRight(),\n                    top + mAdLogoView.getHeight());\n        }\n    }\n}\n```\n### 手势控制\n展开第二级页面，我们要监控手势，往上滑，就控制滑动到webview，在webview状态想上滑，就滑到顶部，漏出imageview。\n``` Java\n@Override\npublic boolean onInterceptTouchEvent(MotionEvent ev) {\n\n    if (isOvering) {\n        return true;\n    }\n\n    if (mCurrent == 0) {\n        return true;\n    }\n    if (mWebView.getScrollY() == 0) {\n        switch (ev.getAction()) {\n            case ACTION_DOWN:\n                lastY = y = ev.getY();\n                break;\n            case ACTION_MOVE:\n                y = ev.getY();\n                deltaY = (int) (lastY - y);\n                if (deltaY < -mTouchThreshold) {\n                    isOvering = true;\n                    mZHFloatAdFloatView.excuteScrollAnim(mContext, this, false,\n                            () -> {\n                        isOvering = false;\n                        setCurrent(0);\n                    });\n                }\n                break;\n            case ACTION_UP:\n                break;\n            default:\n                break;\n        }\n    }\n    return super.onInterceptTouchEvent(ev);\n}\n\n@Override\npublic boolean onTouchEvent(MotionEvent event) {\n\n    if (isOvering) {\n        return true;\n    }\n\n    if (mCurrent == 0) {\n        switch (event.getAction()) {\n            case ACTION_DOWN:\n                lastY = y = event.getY();\n                return true;\n            case ACTION_MOVE:\n                y = event.getY();\n                deltaY = (int) (lastY - y);\n                if (deltaY > mTouchThreshold) {\n                    isOvering = true;\n                    mZHFloatAdFloatView.excuteScrollAnim(mContext, this, true,\n                            () -> {\n                                isOvering = false;\n                                setCurrent(1);\n                            });\n                }\n                break;\n            case ACTION_UP:\n                break;\n            default:\n                break;\n        }\n    }\n    return super.onTouchEvent(event);\n}\n```\n这里Touch事件的传递方式就不说了。自行google。\n### webview的基本配置\n``` Java\nprivate void initWebSettings() {\n    WebSettings settings = mWebView.getSettings();\n    //支持JS\n    settings.setJavaScriptEnabled(true);\n    //支持插件\n    settings.setPluginState(WebSettings.PluginState.ON);\n    //设置适应屏幕\n    settings.setUseWideViewPort(true);\n    settings.setLoadWithOverviewMode(true);\n    //支持缩放\n    settings.setSupportZoom(false);\n    //隐藏原生的缩放控件\n    settings.setDisplayZoomControls(false);\n    //支持内容重新布局\n    settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);\n    settings.supportMultipleWindows();\n    settings.setSupportMultipleWindows(true);\n    //设置缓存模式\n    settings.setDomStorageEnabled(true);\n    settings.setDatabaseEnabled(true);\n    settings.setCacheMode(WebSettings.LOAD_DEFAULT);\n    settings.setAppCacheEnabled(true);\n    settings.setAppCachePath(mWebView.getContext().getCacheDir().getAbsolutePath());\n\n    //设置可访问文件\n    settings.setAllowFileAccess(true);\n    //支持自动加载图片\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        settings.setLoadsImagesAutomatically(true);\n    } else {\n        settings.setLoadsImagesAutomatically(false);\n    }\n    //设置编码格式\n    settings.setDefaultTextEncodingName(\"UTF-8\");\n}\n\nprivate void initWebViewClient() {\n    mWebView.setWebViewClient(new WebViewClient() {\n\n        //页面开始加载时\n        @Override\n        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n            super.onPageStarted(view, url, favicon);\n        }\n\n\n        //页面完成加载时\n        @Override\n        public void onPageFinished(WebView view, String url) {\n            super.onPageFinished(view, url);\n        }\n\n        //是否在WebView内加载新页面\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {\n            return super.shouldOverrideUrlLoading(view, request);\n        }\n\n        @Override\n        public boolean shouldOverrideUrlLoading(WebView view, String url) {\n            if (url.contains(HTTP) || url.contains(HTTPS)) {\n                return super.shouldOverrideUrlLoading(view, url);\n            } else if (UriHandlerDispatcher.handleUri(getContext(), url)) {\n                return true;\n            } else {\n                return super.shouldOverrideUrlLoading(view, url);\n            }\n        }\n\n        //网络错误时回调的方法\n        @Override\n        public void onReceivedError(WebView view, WebResourceRequest request, WebResourceError error) {\n            super.onReceivedError(view, request, error);\n        }\n\n        @Override\n        public void onReceivedHttpError(WebView view, WebResourceRequest request, WebResourceResponse errorResponse) {\n            super.onReceivedHttpError(view, request, errorResponse);\n        }\n\n        @Override\n        public void doUpdateVisitedHistory(WebView view, String url, boolean isReload) {\n            super.doUpdateVisitedHistory(view, url, isReload);\n            mWebView.clearHistory(); // 不保存历史，不允许goBack\n        }\n    });\n}\n\nprivate void initWebChromeClient() {\n\n    mWebView.setWebChromeClient(new WebChromeClient() {\n\n        @Override\n        public void onReceivedTitle(WebView view, String title) {\n            super.onReceivedTitle(view, title);\n        }\n\n        @Override\n        public void onProgressChanged(WebView view, int newProgress) {\n            super.onProgressChanged(view, newProgress);\n        }\n\n        @Override\n        public Bitmap getDefaultVideoPoster() {\n            return super.getDefaultVideoPoster();\n        }\n    });\n}\n```\n## 总结\n之前走了不少坑。这个是PlanB+，之前的心路历程PlanA -> PlanB -> PlanC -> PlanB+。😂 \n好在看了不少源码，感觉收获挺大的。后续打算还是继续结合具体需求，整理记录知识点儿。\n\n\n\n","slug":"RecyclerView 知识点","published":1,"date":"2021-06-28T14:28:31.664Z","updated":"2021-06-28T14:28:31.664Z","layout":"post","photos":[],"link":"","_id":"ckqgq9v5j000d5y8dmk27xbj2","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>好久没写博客了，到新公司差不多一个月了，之前做Android TV 开发，现在开始做手机端了，写手机端App 或许是一个很久的执念吧。<br>就最近的页面需求，好好研究了一下ViewGroup，RecyclerView 的绘制，这里打算立个flag，记一下自己踩的坑。<br>先立个自己的思路：<br><strong><em>这里再提议嘴，一般我们处理一个view的UI交互，动效，最好来封装控件，从我们的mvp，mvvm等等模式里抽离动画，交互的具体代码！！！！！！！</em></strong></p>\n<h2 id=\"最近的一个需求\"><a href=\"#最近的一个需求\" class=\"headerlink\" title=\"最近的一个需求\"></a>最近的一个需求</h2><p>最近碰到一个需求，如视频所示：<br><a id=\"more\"></a></p>\n<video width=\"494\" height=\"878\" controls><br>    <source src=\"https://raw.githubusercontent.com/JarvisGG/JarvisBlog/master/source/video/demo.mp4\"><br></video>\n\n<p>如图所示动画过程：<br>1.上下滚动是，底图是跟着浮动的（item从头到尾滑动recycerview的高度，但是图片需要滚动全屏距离）.<br>2.点击item，列表展开.<br>3.底图放大到全屏.</p>\n<h2 id=\"涉及到的知识点\"><a href=\"#涉及到的知识点\" class=\"headerlink\" title=\"涉及到的知识点\"></a>涉及到的知识点</h2><h3 id=\"itemDecoration-是什么\"><a href=\"#itemDecoration-是什么\" class=\"headerlink\" title=\"itemDecoration 是什么\"></a>itemDecoration 是什么</h3><p>这里我们先看看源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemDecoration</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class=\"line\">        onDraw(c, parent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawOver</span><span class=\"params\">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class=\"line\">        onDrawOver(c, parent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawOver</span><span class=\"params\">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getItemOffsets</span><span class=\"params\">(Rect outRect, <span class=\"keyword\">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class=\"line\">        outRect.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getItemOffsets</span><span class=\"params\">(Rect outRect, View view, RecyclerView parent, State state)</span> </span>&#123;</div><div class=\"line\">        getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),</div><div class=\"line\">                parent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们看到是直接在<strong>recyclerview的画布上用Canvas</strong>画出来的，这地方很重要。</p>\n<h3 id=\"ItemView-的绘制\"><a href=\"#ItemView-的绘制\" class=\"headerlink\" title=\"ItemView 的绘制\"></a>ItemView 的绘制</h3><p>我们可以看源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildDrawingOrder</span><span class=\"params\">(<span class=\"keyword\">int</span> childCount, <span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getChildDrawingOrder(childCount, i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以通过控制这个方法来决定recyclerview itemview的绘制顺序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.dispatchDraw(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里是具体执行recyclerview 绘制itemview的地方<br>之前我在做recyclerview itemview滑到屏幕中间的时候放大，由于itemview的绘制顺序，放大的itemview会被后面的itemview盖住，这里我通过复写这个方法来完成。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChildAttachedToWindow</span><span class=\"params\">(View child)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.post(() -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child <span class=\"keyword\">instanceof</span> ContainerCardView) &#123;</div><div class=\"line\">            mContainerCardView.put((ContainerCardView) child, TopRecyclerView.<span class=\"keyword\">this</span>.getChildAdapterPosition(child));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">super</span>.onChildAttachedToWindow(child);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 第一遍绘制所有view</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.dispatchDraw(canvas);</div><div class=\"line\">    <span class=\"comment\">// 开始绘制特定view，保证层级最高</span></div><div class=\"line\">    List&lt;ContainerCardView&gt; crashChildViews = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    crashChildViews.addAll(mContainerCardView.keySet());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; crashChildViews.size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.drawChild(canvas, crashChildViews.get(i), <span class=\"keyword\">this</span>.getDrawingTime());</div><div class=\"line\">        crashChildViews.get(i).setTag(<span class=\"string\">\"draw\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>itemview的layout<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayoutChildren</span><span class=\"params\">(Recycler recycler, State state)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onLayoutChildren(recycler, state);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"recyclerview（ViewGroup）-以及-itemview-重绘\"><a href=\"#recyclerview（ViewGroup）-以及-itemview-重绘\" class=\"headerlink\" title=\"recyclerview（ViewGroup） 以及 itemview 重绘\"></a>recyclerview（ViewGroup） 以及 itemview 重绘</h3><p>对于重绘我们应该多做注意：<br>1.频繁重绘，会导致vsync信号间隔，gpu来不及绘制framequeue里面的frames，导致丢帧。<br>2.itemview 重绘会导致Android TV焦点丢失。<br>3.itemview 重绘，假如外层的viewgroup是wrapcontent，将会导致递归到根节点（宽高给死的viewgroup）的所有view重绘。假如其中有layout位置动画，将会导致动画失效。<br>4.避免子view重绘制导致上层跟着重绘制，最简单的方式是给定上层viewgroup固定的框高，任你子view变化莫测，我岿然不动，这样就可以保存一些layout的动画状态。</p>\n<h2 id=\"具体的实现方式\"><a href=\"#具体的实现方式\" class=\"headerlink\" title=\"具体的实现方式\"></a>具体的实现方式</h2><h3 id=\"拆分动画\"><a href=\"#拆分动画\" class=\"headerlink\" title=\"拆分动画\"></a>拆分动画</h3><h4 id=\"recyclerview-展开，收缩动画：\"><a href=\"#recyclerview-展开，收缩动画：\" class=\"headerlink\" title=\"recyclerview 展开，收缩动画：\"></a>recyclerview 展开，收缩动画：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 展开动画</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childView</div><div class=\"line\">    * <span class=\"doctag\">@param</span> selectedPosition</div><div class=\"line\">    */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuteExtendAnim</span><span class=\"params\">(View childView, <span class=\"keyword\">int</span> selectedPosition)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.mTargetView = childView;</div><div class=\"line\">    <span class=\"keyword\">this</span>.mSelectPosition = selectedPosition;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> screenPosition[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">    childView.getLocationOnScreen(screenPosition);</div><div class=\"line\"></div><div class=\"line\">    List&lt;Animator&gt; excuteChildAnim = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    List&lt;View&gt; excuteChilds = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getChildCount(); i++) &#123;</div><div class=\"line\">        View child = <span class=\"keyword\">this</span>.getChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">int</span> position = getChildAdapterPosition(child);</div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; selectedPosition) &#123;</div><div class=\"line\">            excuteChilds.add(child);</div><div class=\"line\">            <span class=\"keyword\">final</span> ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, <span class=\"number\">0</span>, -screenPosition[<span class=\"number\">1</span>] + mParentScreenPosition[<span class=\"number\">1</span>]);</div><div class=\"line\">            objectAnimator.setDuration(mDuration);</div><div class=\"line\">            excuteChildAnim.add(objectAnimator);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &gt; selectedPosition) &#123;</div><div class=\"line\">            excuteChilds.add(child);</div><div class=\"line\">            <span class=\"keyword\">final</span> ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, <span class=\"number\">0</span>, Utils.getScreenSizeY(mContext) - screenPosition[<span class=\"number\">1</span>] - childView.getHeight());</div><div class=\"line\">            objectAnimator.setDuration(mDuration);</div><div class=\"line\">            excuteChildAnim.add(objectAnimator);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    excuteItemAnim(excuteChildAnim, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 收缩动画</div><div class=\"line\">    */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuteShrinkAnim</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    List&lt;Animator&gt; excuteChildAnim = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getChildCount(); i++) &#123;</div><div class=\"line\">        View child = <span class=\"keyword\">this</span>.getChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">int</span> position = getChildAdapterPosition(child);</div><div class=\"line\">        <span class=\"keyword\">if</span> (position != mSelectPosition) &#123;</div><div class=\"line\">            <span class=\"keyword\">float</span> startY = child.getTranslationY();</div><div class=\"line\">            <span class=\"keyword\">final</span> ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, startY, <span class=\"number\">0</span>);</div><div class=\"line\">            objectAnimator.setDuration(<span class=\"number\">200</span>);</div><div class=\"line\">            excuteChildAnim.add(objectAnimator);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    excuteItemAnim(excuteChildAnim, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">excuteItemAnim</span><span class=\"params\">(List&lt;Animator&gt; excuteChildAnim, <span class=\"keyword\">boolean</span> isShrink)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">    set.playTogether(excuteChildAnim);</div><div class=\"line\">    set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">    set.start();</div><div class=\"line\">    notifyAnimStateStart(<span class=\"keyword\">null</span>, !isShrink);</div><div class=\"line\">    set.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">            notifyAnimStateEnd(animator, !isShrink);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">            notifyAnimStateCancel(animator, !isShrink);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">            notifyAnimStateRepeat(animator, !isShrink);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"recyclerview-滚动，itemview-的imageview-的移动动画：\"><a href=\"#recyclerview-滚动，itemview-的imageview-的移动动画：\" class=\"headerlink\" title=\"recyclerview 滚动，itemview 的imageview 的移动动画：\"></a>recyclerview 滚动，itemview 的imageview 的移动动画：</h4><p>recyclerview：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义接口</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ScrollStateCallback</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> newState)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> headerHeight, <span class=\"keyword\">int</span> totalHeight, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\">／**</div><div class=\"line\"> * 将实现这个接口的cardview 添加到集合</div><div class=\"line\"> *／</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChildAttachedToWindow</span><span class=\"params\">(View child)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onChildAttachedToWindow(child);</div><div class=\"line\">    <span class=\"keyword\">if</span> (child <span class=\"keyword\">instanceof</span> ScrollStateCallback) &#123;</div><div class=\"line\">        mScrollStateCallback.add((ScrollStateCallback) child);</div><div class=\"line\">    &#125;</div><div class=\"line\">    initChildOperator(child);</div><div class=\"line\">&#125;</div><div class=\"line\">／**</div><div class=\"line\"> * 将实现这个接口的cardview 移除集合</div><div class=\"line\"> *／</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChildDetachedFromWindow</span><span class=\"params\">(View child)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onChildDetachedFromWindow(child);</div><div class=\"line\">    <span class=\"keyword\">if</span> (child <span class=\"keyword\">instanceof</span> ScrollStateCallback) &#123;</div><div class=\"line\">        mScrollStateCallback.remove(child);</div><div class=\"line\">    &#125;</div><div class=\"line\">    detachChildOperator(child);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">    <span class=\"keyword\">this</span>.addOnScrollListener(<span class=\"keyword\">new</span> OnScrollListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> newState)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onScrollStateChanged(recyclerView, newState);</div><div class=\"line\">            notifyScrollStateChanged(recyclerView, newState); <span class=\"comment\">// 开始调用方法</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onScrolled(recyclerView, dx, dy);</div><div class=\"line\">            notifyScrolled(recyclerView, dx, dy);<span class=\"comment\">// 开始调用Scroll方法</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyScrolled</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ScrollStateCallback callback : mScrollStateCallback) &#123;</div><div class=\"line\">        callback.onScrolled(mHeaderHeight, mTotalHeight, dx, dy);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> newState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ScrollStateCallback callback : mScrollStateCallback) &#123;</div><div class=\"line\">        callback.onScrollStateChanged(recyclerView, newState);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>cardview 继承 ScrollStateCallback:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> newState)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> mHeaderHeight, <span class=\"keyword\">int</span> mTotalHeight, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">    excuteAdCardAnim(mHeaderHeight, mTotalHeight, dx, dy);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 数学公式推倒</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuteAdCardAnim</span><span class=\"params\">(<span class=\"keyword\">int</span> mHeaderHeight, <span class=\"keyword\">int</span> mTotalHeight, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> topOffset = <span class=\"keyword\">this</span>.getTop();</div><div class=\"line\">    <span class=\"keyword\">int</span> a = topOffset + mHeaderHeight;</div><div class=\"line\">    <span class=\"keyword\">int</span> b = topOffset * mTotalHeight;</div><div class=\"line\">    <span class=\"keyword\">int</span> c = mTotalHeight - mHeaderHeight;</div><div class=\"line\">    <span class=\"keyword\">int</span> top = a - b / c - mHeaderHeight;</div><div class=\"line\">    <span class=\"keyword\">if</span> (top &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        top = topOffset;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 这里要注意我刚才提出的重回问题，不然这块儿的动画会因为重绘制失效</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.mImageView.dragPosition(</div><div class=\"line\">            mImageView.getLeft(),</div><div class=\"line\">            top - topOffset,</div><div class=\"line\">            mImageView.getRight(),</div><div class=\"line\">            top + mImageView.getHeight() - topOffset);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview-的目标itemview-需要也保持移动来保证跟后面的imageview保持一致：\"><a href=\"#关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview-的目标itemview-需要也保持移动来保证跟后面的imageview保持一致：\" class=\"headerlink\" title=\"关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview 的目标itemview 需要也保持移动来保证跟后面的imageview保持一致：\"></a>关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview 的目标itemview 需要也保持移动来保证跟后面的imageview保持一致：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Ad.Creative creative, <span class=\"keyword\">boolean</span> isShrink)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.mCreative = creative;</div><div class=\"line\">    mZHFloatAdFullView.setCreative(mCreative);</div><div class=\"line\">    AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">    List&lt;Animator&gt; animatorList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isShrink) &#123;</div><div class=\"line\"></div><div class=\"line\">        ValueAnimator downAnim = ValueAnimator.ofInt(<span class=\"number\">0</span>, mLastTopHeight);</div><div class=\"line\">        downAnim.addUpdateListener(<span class=\"keyword\">new</span> AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));</div><div class=\"line\">        animatorList.add(downAnim);</div><div class=\"line\"></div><div class=\"line\">        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(<span class=\"keyword\">this</span>, View.TRANSLATION_Y, <span class=\"number\">0</span>);</div><div class=\"line\">        animatorList.add(parentAnim);</div><div class=\"line\"></div><div class=\"line\">        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();</div><div class=\"line\">        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, <span class=\"number\">0</span>);</div><div class=\"line\">        animatorList.add(clickAnim);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> currentTop = mZHFloatAdRecyclerView.getCurrentAnimItemLogoViewTop();</div><div class=\"line\">        mLastTopHeight = currentTop;</div><div class=\"line\">        mLastItemHeight = mZHFloatAdRecyclerView.getCurrentAnimItemMargetTop();</div><div class=\"line\"></div><div class=\"line\">        ValueAnimator upAnim = ValueAnimator.ofInt(currentTop, <span class=\"number\">0</span>);</div><div class=\"line\">        upAnim.addUpdateListener(<span class=\"keyword\">new</span> AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));</div><div class=\"line\">        animatorList.add(upAnim);</div><div class=\"line\"></div><div class=\"line\">        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(<span class=\"keyword\">this</span>, View.TRANSLATION_Y,  -mHeaderHeight);</div><div class=\"line\">        animatorList.add(parentAnim);</div><div class=\"line\"></div><div class=\"line\">        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();</div><div class=\"line\">        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, -currentTop);</div><div class=\"line\">        animatorList.add(clickAnim);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    set.playTogether(animatorList);</div><div class=\"line\">    set.setInterpolator(<span class=\"keyword\">new</span> AccelerateDecelerateInterpolator());</div><div class=\"line\">    set.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">            Log.e(<span class=\"string\">\"topOffset ------&gt; \"</span>, ZHFloatAdFloatView.<span class=\"keyword\">this</span>.getTop()+<span class=\"string\">\"\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    set.setDuration(sAdNormalAnimDuration);</div><div class=\"line\">    set.start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdLogoViewAnimatorUpdateListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ValueAnimator</span>.<span class=\"title\">AnimatorUpdateListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> totalTop;</div><div class=\"line\">    <span class=\"keyword\">int</span> itemTop;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdLogoViewAnimatorUpdateListener</span><span class=\"params\">(<span class=\"keyword\">int</span> totalTop, <span class=\"keyword\">int</span> itemTop)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.totalTop = totalTop;</div><div class=\"line\">        <span class=\"keyword\">this</span>.itemTop = itemTop;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> top = (<span class=\"keyword\">int</span>)valueAnimator.getAnimatedValue();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mZHFloatAdRecyclerView.getCurrentClickAdCardType() == ZHFloatAdCardView.ADCardViewType.FLOAT) &#123;</div><div class=\"line\">            mAdLogoView.dragPosition(</div><div class=\"line\">                    mAdLogoView.getLeft(),</div><div class=\"line\">                    top,</div><div class=\"line\">                    mAdLogoView.getRight(),</div><div class=\"line\">                    top + mAdLogoView.getHeight());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"手势控制\"><a href=\"#手势控制\" class=\"headerlink\" title=\"手势控制\"></a>手势控制</h3><p>展开第二级页面，我们要监控手势，往上滑，就控制滑动到webview，在webview状态想上滑，就滑到顶部，漏出imageview。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isOvering) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCurrent == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mWebView.getScrollY() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (ev.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_DOWN:</div><div class=\"line\">                lastY = y = ev.getY();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_MOVE:</div><div class=\"line\">                y = ev.getY();</div><div class=\"line\">                deltaY = (<span class=\"keyword\">int</span>) (lastY - y);</div><div class=\"line\">                <span class=\"keyword\">if</span> (deltaY &lt; -mTouchThreshold) &#123;</div><div class=\"line\">                    isOvering = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    mZHFloatAdFloatView.excuteScrollAnim(mContext, <span class=\"keyword\">this</span>, <span class=\"keyword\">false</span>,</div><div class=\"line\">                            () -&gt; &#123;</div><div class=\"line\">                        isOvering = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        setCurrent(<span class=\"number\">0</span>);</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_UP:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isOvering) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCurrent == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_DOWN:</div><div class=\"line\">                lastY = y = event.getY();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_MOVE:</div><div class=\"line\">                y = event.getY();</div><div class=\"line\">                deltaY = (<span class=\"keyword\">int</span>) (lastY - y);</div><div class=\"line\">                <span class=\"keyword\">if</span> (deltaY &gt; mTouchThreshold) &#123;</div><div class=\"line\">                    isOvering = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    mZHFloatAdFloatView.excuteScrollAnim(mContext, <span class=\"keyword\">this</span>, <span class=\"keyword\">true</span>,</div><div class=\"line\">                            () -&gt; &#123;</div><div class=\"line\">                                isOvering = <span class=\"keyword\">false</span>;</div><div class=\"line\">                                setCurrent(<span class=\"number\">1</span>);</div><div class=\"line\">                            &#125;);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_UP:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里Touch事件的传递方式就不说了。自行google。</p>\n<h3 id=\"webview的基本配置\"><a href=\"#webview的基本配置\" class=\"headerlink\" title=\"webview的基本配置\"></a>webview的基本配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initWebSettings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    WebSettings settings = mWebView.getSettings();</div><div class=\"line\">    <span class=\"comment\">//支持JS</span></div><div class=\"line\">    settings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"comment\">//支持插件</span></div><div class=\"line\">    settings.setPluginState(WebSettings.PluginState.ON);</div><div class=\"line\">    <span class=\"comment\">//设置适应屏幕</span></div><div class=\"line\">    settings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">    settings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"comment\">//支持缩放</span></div><div class=\"line\">    settings.setSupportZoom(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"comment\">//隐藏原生的缩放控件</span></div><div class=\"line\">    settings.setDisplayZoomControls(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"comment\">//支持内容重新布局</span></div><div class=\"line\">    settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);</div><div class=\"line\">    settings.supportMultipleWindows();</div><div class=\"line\">    settings.setSupportMultipleWindows(<span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"comment\">//设置缓存模式</span></div><div class=\"line\">    settings.setDomStorageEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    settings.setDatabaseEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    settings.setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class=\"line\">    settings.setAppCacheEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    settings.setAppCachePath(mWebView.getContext().getCacheDir().getAbsolutePath());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置可访问文件</span></div><div class=\"line\">    settings.setAllowFileAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"comment\">//支持自动加载图片</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">        settings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        settings.setLoadsImagesAutomatically(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//设置编码格式</span></div><div class=\"line\">    settings.setDefaultTextEncodingName(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initWebViewClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mWebView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//页面开始加载时</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//页面完成加载时</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//是否在WebView内加载新页面</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldOverrideUrlLoading(view, request);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (url.contains(HTTP) || url.contains(HTTPS)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldOverrideUrlLoading(view, url);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UriHandlerDispatcher.handleUri(getContext(), url)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldOverrideUrlLoading(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//网络错误时回调的方法</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onReceivedError(view, request, error);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedHttpError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceResponse errorResponse)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onReceivedHttpError(view, request, errorResponse);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doUpdateVisitedHistory</span><span class=\"params\">(WebView view, String url, <span class=\"keyword\">boolean</span> isReload)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.doUpdateVisitedHistory(view, url, isReload);</div><div class=\"line\">            mWebView.clearHistory(); <span class=\"comment\">// 不保存历史，不允许goBack</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initWebChromeClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    mWebView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedTitle</span><span class=\"params\">(WebView view, String title)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onReceivedTitle(view, title);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onProgressChanged(view, newProgress);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getDefaultVideoPoster</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getDefaultVideoPoster();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>之前走了不少坑。这个是PlanB+，之前的心路历程PlanA -&gt; PlanB -&gt; PlanC -&gt; PlanB+。😂<br>好在看了不少源码，感觉收获挺大的。后续打算还是继续结合具体需求，整理记录知识点儿。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>好久没写博客了，到新公司差不多一个月了，之前做Android TV 开发，现在开始做手机端了，写手机端App 或许是一个很久的执念吧。<br>就最近的页面需求，好好研究了一下ViewGroup，RecyclerView 的绘制，这里打算立个flag，记一下自己踩的坑。<br>先立个自己的思路：<br><strong><em>这里再提议嘴，一般我们处理一个view的UI交互，动效，最好来封装控件，从我们的mvp，mvvm等等模式里抽离动画，交互的具体代码！！！！！！！</em></strong></p>\n<h2 id=\"最近的一个需求\"><a href=\"#最近的一个需求\" class=\"headerlink\" title=\"最近的一个需求\"></a>最近的一个需求</h2><p>最近碰到一个需求，如视频所示：<br>","more":"</p>\n<video width=\"494\" height=\"878\" controls><br>    <source src=\"https://raw.githubusercontent.com/JarvisGG/JarvisBlog/master/source/video/demo.mp4\"><br></video>\n\n<p>如图所示动画过程：<br>1.上下滚动是，底图是跟着浮动的（item从头到尾滑动recycerview的高度，但是图片需要滚动全屏距离）.<br>2.点击item，列表展开.<br>3.底图放大到全屏.</p>\n<h2 id=\"涉及到的知识点\"><a href=\"#涉及到的知识点\" class=\"headerlink\" title=\"涉及到的知识点\"></a>涉及到的知识点</h2><h3 id=\"itemDecoration-是什么\"><a href=\"#itemDecoration-是什么\" class=\"headerlink\" title=\"itemDecoration 是什么\"></a>itemDecoration 是什么</h3><p>这里我们先看看源码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemDecoration</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class=\"line\">        onDraw(c, parent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawOver</span><span class=\"params\">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class=\"line\">        onDrawOver(c, parent);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDrawOver</span><span class=\"params\">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getItemOffsets</span><span class=\"params\">(Rect outRect, <span class=\"keyword\">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class=\"line\">        outRect.set(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getItemOffsets</span><span class=\"params\">(Rect outRect, View view, RecyclerView parent, State state)</span> </span>&#123;</div><div class=\"line\">        getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),</div><div class=\"line\">                parent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里我们看到是直接在<strong>recyclerview的画布上用Canvas</strong>画出来的，这地方很重要。</p>\n<h3 id=\"ItemView-的绘制\"><a href=\"#ItemView-的绘制\" class=\"headerlink\" title=\"ItemView 的绘制\"></a>ItemView 的绘制</h3><p>我们可以看源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildDrawingOrder</span><span class=\"params\">(<span class=\"keyword\">int</span> childCount, <span class=\"keyword\">int</span> i)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getChildDrawingOrder(childCount, i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以通过控制这个方法来决定recyclerview itemview的绘制顺序<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.dispatchDraw(canvas);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里是具体执行recyclerview 绘制itemview的地方<br>之前我在做recyclerview itemview滑到屏幕中间的时候放大，由于itemview的绘制顺序，放大的itemview会被后面的itemview盖住，这里我通过复写这个方法来完成。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChildAttachedToWindow</span><span class=\"params\">(View child)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.post(() -&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (child <span class=\"keyword\">instanceof</span> ContainerCardView) &#123;</div><div class=\"line\">            mContainerCardView.put((ContainerCardView) child, TopRecyclerView.<span class=\"keyword\">this</span>.getChildAdapterPosition(child));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">super</span>.onChildAttachedToWindow(child);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">dispatchDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 第一遍绘制所有view</span></div><div class=\"line\">    <span class=\"keyword\">super</span>.dispatchDraw(canvas);</div><div class=\"line\">    <span class=\"comment\">// 开始绘制特定view，保证层级最高</span></div><div class=\"line\">    List&lt;ContainerCardView&gt; crashChildViews = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    crashChildViews.addAll(mContainerCardView.keySet());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; crashChildViews.size(); i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.drawChild(canvas, crashChildViews.get(i), <span class=\"keyword\">this</span>.getDrawingTime());</div><div class=\"line\">        crashChildViews.get(i).setTag(<span class=\"string\">\"draw\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>itemview的layout<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayoutChildren</span><span class=\"params\">(Recycler recycler, State state)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onLayoutChildren(recycler, state);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"recyclerview（ViewGroup）-以及-itemview-重绘\"><a href=\"#recyclerview（ViewGroup）-以及-itemview-重绘\" class=\"headerlink\" title=\"recyclerview（ViewGroup） 以及 itemview 重绘\"></a>recyclerview（ViewGroup） 以及 itemview 重绘</h3><p>对于重绘我们应该多做注意：<br>1.频繁重绘，会导致vsync信号间隔，gpu来不及绘制framequeue里面的frames，导致丢帧。<br>2.itemview 重绘会导致Android TV焦点丢失。<br>3.itemview 重绘，假如外层的viewgroup是wrapcontent，将会导致递归到根节点（宽高给死的viewgroup）的所有view重绘。假如其中有layout位置动画，将会导致动画失效。<br>4.避免子view重绘制导致上层跟着重绘制，最简单的方式是给定上层viewgroup固定的框高，任你子view变化莫测，我岿然不动，这样就可以保存一些layout的动画状态。</p>\n<h2 id=\"具体的实现方式\"><a href=\"#具体的实现方式\" class=\"headerlink\" title=\"具体的实现方式\"></a>具体的实现方式</h2><h3 id=\"拆分动画\"><a href=\"#拆分动画\" class=\"headerlink\" title=\"拆分动画\"></a>拆分动画</h3><h4 id=\"recyclerview-展开，收缩动画：\"><a href=\"#recyclerview-展开，收缩动画：\" class=\"headerlink\" title=\"recyclerview 展开，收缩动画：\"></a>recyclerview 展开，收缩动画：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 展开动画</div><div class=\"line\">    * <span class=\"doctag\">@param</span> childView</div><div class=\"line\">    * <span class=\"doctag\">@param</span> selectedPosition</div><div class=\"line\">    */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuteExtendAnim</span><span class=\"params\">(View childView, <span class=\"keyword\">int</span> selectedPosition)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.mTargetView = childView;</div><div class=\"line\">    <span class=\"keyword\">this</span>.mSelectPosition = selectedPosition;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">int</span> screenPosition[] = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</div><div class=\"line\">    childView.getLocationOnScreen(screenPosition);</div><div class=\"line\"></div><div class=\"line\">    List&lt;Animator&gt; excuteChildAnim = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    List&lt;View&gt; excuteChilds = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getChildCount(); i++) &#123;</div><div class=\"line\">        View child = <span class=\"keyword\">this</span>.getChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">int</span> position = getChildAdapterPosition(child);</div><div class=\"line\">        <span class=\"keyword\">if</span> (position &lt; selectedPosition) &#123;</div><div class=\"line\">            excuteChilds.add(child);</div><div class=\"line\">            <span class=\"keyword\">final</span> ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, <span class=\"number\">0</span>, -screenPosition[<span class=\"number\">1</span>] + mParentScreenPosition[<span class=\"number\">1</span>]);</div><div class=\"line\">            objectAnimator.setDuration(mDuration);</div><div class=\"line\">            excuteChildAnim.add(objectAnimator);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (position &gt; selectedPosition) &#123;</div><div class=\"line\">            excuteChilds.add(child);</div><div class=\"line\">            <span class=\"keyword\">final</span> ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, <span class=\"number\">0</span>, Utils.getScreenSizeY(mContext) - screenPosition[<span class=\"number\">1</span>] - childView.getHeight());</div><div class=\"line\">            objectAnimator.setDuration(mDuration);</div><div class=\"line\">            excuteChildAnim.add(objectAnimator);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    excuteItemAnim(excuteChildAnim, <span class=\"keyword\">false</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">    * 收缩动画</div><div class=\"line\">    */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuteShrinkAnim</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    List&lt;Animator&gt; excuteChildAnim = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getChildCount(); i++) &#123;</div><div class=\"line\">        View child = <span class=\"keyword\">this</span>.getChildAt(i);</div><div class=\"line\">        <span class=\"keyword\">int</span> position = getChildAdapterPosition(child);</div><div class=\"line\">        <span class=\"keyword\">if</span> (position != mSelectPosition) &#123;</div><div class=\"line\">            <span class=\"keyword\">float</span> startY = child.getTranslationY();</div><div class=\"line\">            <span class=\"keyword\">final</span> ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(child, View.TRANSLATION_Y, startY, <span class=\"number\">0</span>);</div><div class=\"line\">            objectAnimator.setDuration(<span class=\"number\">200</span>);</div><div class=\"line\">            excuteChildAnim.add(objectAnimator);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    excuteItemAnim(excuteChildAnim, <span class=\"keyword\">true</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">excuteItemAnim</span><span class=\"params\">(List&lt;Animator&gt; excuteChildAnim, <span class=\"keyword\">boolean</span> isShrink)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">    set.playTogether(excuteChildAnim);</div><div class=\"line\">    set.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</div><div class=\"line\">    set.start();</div><div class=\"line\">    notifyAnimStateStart(<span class=\"keyword\">null</span>, !isShrink);</div><div class=\"line\">    set.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">            notifyAnimStateEnd(animator, !isShrink);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">            notifyAnimStateCancel(animator, !isShrink);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">            notifyAnimStateRepeat(animator, !isShrink);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"recyclerview-滚动，itemview-的imageview-的移动动画：\"><a href=\"#recyclerview-滚动，itemview-的imageview-的移动动画：\" class=\"headerlink\" title=\"recyclerview 滚动，itemview 的imageview 的移动动画：\"></a>recyclerview 滚动，itemview 的imageview 的移动动画：</h4><p>recyclerview：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 定义接口</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">ScrollStateCallback</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> newState)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> headerHeight, <span class=\"keyword\">int</span> totalHeight, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span></span>;</div><div class=\"line\">&#125;</div><div class=\"line\">／**</div><div class=\"line\"> * 将实现这个接口的cardview 添加到集合</div><div class=\"line\"> *／</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChildAttachedToWindow</span><span class=\"params\">(View child)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onChildAttachedToWindow(child);</div><div class=\"line\">    <span class=\"keyword\">if</span> (child <span class=\"keyword\">instanceof</span> ScrollStateCallback) &#123;</div><div class=\"line\">        mScrollStateCallback.add((ScrollStateCallback) child);</div><div class=\"line\">    &#125;</div><div class=\"line\">    initChildOperator(child);</div><div class=\"line\">&#125;</div><div class=\"line\">／**</div><div class=\"line\"> * 将实现这个接口的cardview 移除集合</div><div class=\"line\"> *／</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onChildDetachedFromWindow</span><span class=\"params\">(View child)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onChildDetachedFromWindow(child);</div><div class=\"line\">    <span class=\"keyword\">if</span> (child <span class=\"keyword\">instanceof</span> ScrollStateCallback) &#123;</div><div class=\"line\">        mScrollStateCallback.remove(child);</div><div class=\"line\">    &#125;</div><div class=\"line\">    detachChildOperator(child);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.mContext = context;</div><div class=\"line\">    <span class=\"keyword\">this</span>.addOnScrollListener(<span class=\"keyword\">new</span> OnScrollListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> newState)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onScrollStateChanged(recyclerView, newState);</div><div class=\"line\">            notifyScrollStateChanged(recyclerView, newState); <span class=\"comment\">// 开始调用方法</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onScrolled(recyclerView, dx, dy);</div><div class=\"line\">            notifyScrolled(recyclerView, dx, dy);<span class=\"comment\">// 开始调用Scroll方法</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyScrolled</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ScrollStateCallback callback : mScrollStateCallback) &#123;</div><div class=\"line\">        callback.onScrolled(mHeaderHeight, mTotalHeight, dx, dy);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> newState)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (ScrollStateCallback callback : mScrollStateCallback) &#123;</div><div class=\"line\">        callback.onScrollStateChanged(recyclerView, newState);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>cardview 继承 ScrollStateCallback:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrollStateChanged</span><span class=\"params\">(RecyclerView recyclerView, <span class=\"keyword\">int</span> newState)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onScrolled</span><span class=\"params\">(<span class=\"keyword\">int</span> mHeaderHeight, <span class=\"keyword\">int</span> mTotalHeight, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">    excuteAdCardAnim(mHeaderHeight, mTotalHeight, dx, dy);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 数学公式推倒</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">excuteAdCardAnim</span><span class=\"params\">(<span class=\"keyword\">int</span> mHeaderHeight, <span class=\"keyword\">int</span> mTotalHeight, <span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> topOffset = <span class=\"keyword\">this</span>.getTop();</div><div class=\"line\">    <span class=\"keyword\">int</span> a = topOffset + mHeaderHeight;</div><div class=\"line\">    <span class=\"keyword\">int</span> b = topOffset * mTotalHeight;</div><div class=\"line\">    <span class=\"keyword\">int</span> c = mTotalHeight - mHeaderHeight;</div><div class=\"line\">    <span class=\"keyword\">int</span> top = a - b / c - mHeaderHeight;</div><div class=\"line\">    <span class=\"keyword\">if</span> (top &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        top = topOffset;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 这里要注意我刚才提出的重回问题，不然这块儿的动画会因为重绘制失效</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.mImageView.dragPosition(</div><div class=\"line\">            mImageView.getLeft(),</div><div class=\"line\">            top - topOffset,</div><div class=\"line\">            mImageView.getRight(),</div><div class=\"line\">            top + mImageView.getHeight() - topOffset);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview-的目标itemview-需要也保持移动来保证跟后面的imageview保持一致：\"><a href=\"#关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview-的目标itemview-需要也保持移动来保证跟后面的imageview保持一致：\" class=\"headerlink\" title=\"关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview 的目标itemview 需要也保持移动来保证跟后面的imageview保持一致：\"></a>关键的动画已经基本完成，现在存在一个问题，我上访的titlebar也要动画，消失，这里就不列出代码了，很简单，问题是我的recyclerview 的目标itemview 需要也保持移动来保证跟后面的imageview保持一致：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Ad.Creative creative, <span class=\"keyword\">boolean</span> isShrink)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.mCreative = creative;</div><div class=\"line\">    mZHFloatAdFullView.setCreative(mCreative);</div><div class=\"line\">    AnimatorSet set = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">    List&lt;Animator&gt; animatorList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isShrink) &#123;</div><div class=\"line\"></div><div class=\"line\">        ValueAnimator downAnim = ValueAnimator.ofInt(<span class=\"number\">0</span>, mLastTopHeight);</div><div class=\"line\">        downAnim.addUpdateListener(<span class=\"keyword\">new</span> AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));</div><div class=\"line\">        animatorList.add(downAnim);</div><div class=\"line\"></div><div class=\"line\">        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(<span class=\"keyword\">this</span>, View.TRANSLATION_Y, <span class=\"number\">0</span>);</div><div class=\"line\">        animatorList.add(parentAnim);</div><div class=\"line\"></div><div class=\"line\">        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();</div><div class=\"line\">        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, <span class=\"number\">0</span>);</div><div class=\"line\">        animatorList.add(clickAnim);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> currentTop = mZHFloatAdRecyclerView.getCurrentAnimItemLogoViewTop();</div><div class=\"line\">        mLastTopHeight = currentTop;</div><div class=\"line\">        mLastItemHeight = mZHFloatAdRecyclerView.getCurrentAnimItemMargetTop();</div><div class=\"line\"></div><div class=\"line\">        ValueAnimator upAnim = ValueAnimator.ofInt(currentTop, <span class=\"number\">0</span>);</div><div class=\"line\">        upAnim.addUpdateListener(<span class=\"keyword\">new</span> AdLogoViewAnimatorUpdateListener(mLastTopHeight, mLastItemHeight));</div><div class=\"line\">        animatorList.add(upAnim);</div><div class=\"line\"></div><div class=\"line\">        ObjectAnimator parentAnim = ObjectAnimator.ofFloat(<span class=\"keyword\">this</span>, View.TRANSLATION_Y,  -mHeaderHeight);</div><div class=\"line\">        animatorList.add(parentAnim);</div><div class=\"line\"></div><div class=\"line\">        ZHFloatAdCardView cardView = mZHFloatAdRecyclerView.getCurrentClickView();</div><div class=\"line\">        ObjectAnimator clickAnim = ObjectAnimator.ofFloat(cardView, View.TRANSLATION_Y, -currentTop);</div><div class=\"line\">        animatorList.add(clickAnim);</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    set.playTogether(animatorList);</div><div class=\"line\">    set.setInterpolator(<span class=\"keyword\">new</span> AccelerateDecelerateInterpolator());</div><div class=\"line\">    set.addListener(<span class=\"keyword\">new</span> Animator.AnimatorListener() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationStart</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\">            Log.e(<span class=\"string\">\"topOffset ------&gt; \"</span>, ZHFloatAdFloatView.<span class=\"keyword\">this</span>.getTop()+<span class=\"string\">\"\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationCancel</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationRepeat</span><span class=\"params\">(Animator animator)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    set.setDuration(sAdNormalAnimDuration);</div><div class=\"line\">    set.start();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdLogoViewAnimatorUpdateListener</span> <span class=\"keyword\">implements</span> <span class=\"title\">ValueAnimator</span>.<span class=\"title\">AnimatorUpdateListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">int</span> totalTop;</div><div class=\"line\">    <span class=\"keyword\">int</span> itemTop;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AdLogoViewAnimatorUpdateListener</span><span class=\"params\">(<span class=\"keyword\">int</span> totalTop, <span class=\"keyword\">int</span> itemTop)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.totalTop = totalTop;</div><div class=\"line\">        <span class=\"keyword\">this</span>.itemTop = itemTop;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> top = (<span class=\"keyword\">int</span>)valueAnimator.getAnimatedValue();</div><div class=\"line\">        <span class=\"keyword\">if</span> (mZHFloatAdRecyclerView.getCurrentClickAdCardType() == ZHFloatAdCardView.ADCardViewType.FLOAT) &#123;</div><div class=\"line\">            mAdLogoView.dragPosition(</div><div class=\"line\">                    mAdLogoView.getLeft(),</div><div class=\"line\">                    top,</div><div class=\"line\">                    mAdLogoView.getRight(),</div><div class=\"line\">                    top + mAdLogoView.getHeight());</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"手势控制\"><a href=\"#手势控制\" class=\"headerlink\" title=\"手势控制\"></a>手势控制</h3><p>展开第二级页面，我们要监控手势，往上滑，就控制滑动到webview，在webview状态想上滑，就滑到顶部，漏出imageview。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isOvering) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCurrent == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (mWebView.getScrollY() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (ev.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_DOWN:</div><div class=\"line\">                lastY = y = ev.getY();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_MOVE:</div><div class=\"line\">                y = ev.getY();</div><div class=\"line\">                deltaY = (<span class=\"keyword\">int</span>) (lastY - y);</div><div class=\"line\">                <span class=\"keyword\">if</span> (deltaY &lt; -mTouchThreshold) &#123;</div><div class=\"line\">                    isOvering = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    mZHFloatAdFloatView.excuteScrollAnim(mContext, <span class=\"keyword\">this</span>, <span class=\"keyword\">false</span>,</div><div class=\"line\">                            () -&gt; &#123;</div><div class=\"line\">                        isOvering = <span class=\"keyword\">false</span>;</div><div class=\"line\">                        setCurrent(<span class=\"number\">0</span>);</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_UP:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (isOvering) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (mCurrent == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_DOWN:</div><div class=\"line\">                lastY = y = event.getY();</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_MOVE:</div><div class=\"line\">                y = event.getY();</div><div class=\"line\">                deltaY = (<span class=\"keyword\">int</span>) (lastY - y);</div><div class=\"line\">                <span class=\"keyword\">if</span> (deltaY &gt; mTouchThreshold) &#123;</div><div class=\"line\">                    isOvering = <span class=\"keyword\">true</span>;</div><div class=\"line\">                    mZHFloatAdFloatView.excuteScrollAnim(mContext, <span class=\"keyword\">this</span>, <span class=\"keyword\">true</span>,</div><div class=\"line\">                            () -&gt; &#123;</div><div class=\"line\">                                isOvering = <span class=\"keyword\">false</span>;</div><div class=\"line\">                                setCurrent(<span class=\"number\">1</span>);</div><div class=\"line\">                            &#125;);</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">case</span> ACTION_UP:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里Touch事件的传递方式就不说了。自行google。</p>\n<h3 id=\"webview的基本配置\"><a href=\"#webview的基本配置\" class=\"headerlink\" title=\"webview的基本配置\"></a>webview的基本配置</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initWebSettings</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    WebSettings settings = mWebView.getSettings();</div><div class=\"line\">    <span class=\"comment\">//支持JS</span></div><div class=\"line\">    settings.setJavaScriptEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"comment\">//支持插件</span></div><div class=\"line\">    settings.setPluginState(WebSettings.PluginState.ON);</div><div class=\"line\">    <span class=\"comment\">//设置适应屏幕</span></div><div class=\"line\">    settings.setUseWideViewPort(<span class=\"keyword\">true</span>);</div><div class=\"line\">    settings.setLoadWithOverviewMode(<span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"comment\">//支持缩放</span></div><div class=\"line\">    settings.setSupportZoom(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"comment\">//隐藏原生的缩放控件</span></div><div class=\"line\">    settings.setDisplayZoomControls(<span class=\"keyword\">false</span>);</div><div class=\"line\">    <span class=\"comment\">//支持内容重新布局</span></div><div class=\"line\">    settings.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NORMAL);</div><div class=\"line\">    settings.supportMultipleWindows();</div><div class=\"line\">    settings.setSupportMultipleWindows(<span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"comment\">//设置缓存模式</span></div><div class=\"line\">    settings.setDomStorageEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    settings.setDatabaseEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    settings.setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class=\"line\">    settings.setAppCacheEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">    settings.setAppCachePath(mWebView.getContext().getCacheDir().getAbsolutePath());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//设置可访问文件</span></div><div class=\"line\">    settings.setAllowFileAccess(<span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"comment\">//支持自动加载图片</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class=\"line\">        settings.setLoadsImagesAutomatically(<span class=\"keyword\">true</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        settings.setLoadsImagesAutomatically(<span class=\"keyword\">false</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//设置编码格式</span></div><div class=\"line\">    settings.setDefaultTextEncodingName(<span class=\"string\">\"UTF-8\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initWebViewClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    mWebView.setWebViewClient(<span class=\"keyword\">new</span> WebViewClient() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//页面开始加载时</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageStarted</span><span class=\"params\">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPageStarted(view, url, favicon);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//页面完成加载时</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPageFinished</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPageFinished(view, url);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//是否在WebView内加载新页面</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldOverrideUrlLoading(view, request);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">shouldOverrideUrlLoading</span><span class=\"params\">(WebView view, String url)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (url.contains(HTTP) || url.contains(HTTPS)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldOverrideUrlLoading(view, url);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (UriHandlerDispatcher.handleUri(getContext(), url)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.shouldOverrideUrlLoading(view, url);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//网络错误时回调的方法</span></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceError error)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onReceivedError(view, request, error);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedHttpError</span><span class=\"params\">(WebView view, WebResourceRequest request, WebResourceResponse errorResponse)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onReceivedHttpError(view, request, errorResponse);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doUpdateVisitedHistory</span><span class=\"params\">(WebView view, String url, <span class=\"keyword\">boolean</span> isReload)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.doUpdateVisitedHistory(view, url, isReload);</div><div class=\"line\">            mWebView.clearHistory(); <span class=\"comment\">// 不保存历史，不允许goBack</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initWebChromeClient</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    mWebView.setWebChromeClient(<span class=\"keyword\">new</span> WebChromeClient() &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceivedTitle</span><span class=\"params\">(WebView view, String title)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onReceivedTitle(view, title);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(WebView view, <span class=\"keyword\">int</span> newProgress)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onProgressChanged(view, newProgress);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Bitmap <span class=\"title\">getDefaultVideoPoster</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getDefaultVideoPoster();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>之前走了不少坑。这个是PlanB+，之前的心路历程PlanA -&gt; PlanB -&gt; PlanC -&gt; PlanB+。😂<br>好在看了不少源码，感觉收获挺大的。后续打算还是继续结合具体需求，整理记录知识点儿。</p>"},{"title":"SelectFrameView 视觉选择","date":"2021-06-28T14:31:00.000Z","comments":1,"_content":"\n## 背景\n最近调研一个动效，淘宝的拍摄识别选择。🌰：\n<video width=\"494\" height=\"878\" controls>\n    <source src=\"https://raw.githubusercontent.com/JarvisGG/JarvisBlog/master/source/video/tb_select_frame.mp4\">\n</video>","source":"_posts/SelectFrameView 视觉选择.md","raw":"---\ntitle: SelectFrameView 视觉选择\ndate: 2021-06-28 22:31:00\ntag: Android 开源控件\ncomments: true\n---\n\n## 背景\n最近调研一个动效，淘宝的拍摄识别选择。🌰：\n<video width=\"494\" height=\"878\" controls>\n    <source src=\"https://raw.githubusercontent.com/JarvisGG/JarvisBlog/master/source/video/tb_select_frame.mp4\">\n</video>","slug":"SelectFrameView 视觉选择","published":1,"updated":"2021-06-28T14:36:19.375Z","layout":"post","photos":[],"link":"","_id":"ckqgq9v5k000f5y8dcwl2o4wm","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近调研一个动效，淘宝的拍摄识别选择。🌰：</p>\n<video width=\"494\" height=\"878\" controls><br>    <source src=\"https://raw.githubusercontent.com/JarvisGG/JarvisBlog/master/source/video/tb_select_frame.mp4\"><br></video>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近调研一个动效，淘宝的拍摄识别选择。🌰：</p>\n<video width=\"494\" height=\"878\" controls><br>    <source src=\"https://raw.githubusercontent.com/JarvisGG/JarvisBlog/master/source/video/tb_select_frame.mp4\"><br></video>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckqgq9v5800005y8dgv0um84x","tag_id":"ckqgq9v5d00045y8dnxkq9b5o","_id":"ckqgq9v5h00095y8dn1j7lzba"},{"post_id":"ckqgq9v5c00025y8d98n5o4um","tag_id":"ckqgq9v5g00085y8dl5fnojfi","_id":"ckqgq9v5k000e5y8d91c8po7t"},{"post_id":"ckqgq9v5e00055y8dmzs6v4dv","tag_id":"ckqgq9v5d00045y8dnxkq9b5o","_id":"ckqgq9v5l000h5y8dgeawcwvi"},{"post_id":"ckqgq9v5f00065y8dym2ld2t1","tag_id":"ckqgq9v5g00085y8dl5fnojfi","_id":"ckqgq9v5l000j5y8dz1mkq08s"},{"post_id":"ckqgq9v5g00075y8d9lx8n1b5","tag_id":"ckqgq9v5l000i5y8dp21kc5x3","_id":"ckqgq9v5m000l5y8ds7jltcru"},{"post_id":"ckqgq9v5h000a5y8dcxbomsri","tag_id":"ckqgq9v5l000i5y8dp21kc5x3","_id":"ckqgq9v5m000n5y8dsf7yp0td"},{"post_id":"ckqgq9v5h000b5y8dkm4791up","tag_id":"ckqgq9v5m000m5y8dqw57t8dk","_id":"ckqgq9v5n000p5y8dmnc6kvfx"},{"post_id":"ckqgq9v5j000d5y8dmk27xbj2","tag_id":"ckqgq9v5m000o5y8dsxqt1ugp","_id":"ckqgq9v5n000r5y8dwfdfif4a"},{"post_id":"ckqgq9v5k000f5y8dcwl2o4wm","tag_id":"ckqgq9v5l000i5y8dp21kc5x3","_id":"ckqgq9v5n000s5y8d9k9yhzuo"}],"Tag":[{"name":"Android 源码","_id":"ckqgq9v5d00045y8dnxkq9b5o"},{"name":"Android 第三方","_id":"ckqgq9v5g00085y8dl5fnojfi"},{"name":"Android 开源控件","_id":"ckqgq9v5l000i5y8dp21kc5x3"},{"name":"RxBus","_id":"ckqgq9v5m000m5y8dqw57t8dk"},{"name":"Android View","_id":"ckqgq9v5m000o5y8dsxqt1ugp"}]}}